<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常见web攻击总结</title>
    <url>/2019/12/22/%E5%B8%B8%E8%A7%81web%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>本篇主要简单介绍在Web领域几种常见的攻击手段及Java Web中的预防方式。</p>
<ul>
<li><a href="https://www.cnblogs.com/morethink/p/8734103.html#XSS" target="_blank" rel="noopener">XSS</a></li>
<li><a href="https://www.cnblogs.com/morethink/p/8734103.html#SQL注入" target="_blank" rel="noopener">SQL注入</a></li>
<li><a href="https://www.cnblogs.com/morethink/p/8734103.html#DDOS" target="_blank" rel="noopener">DDOS</a></li>
<li><a href="https://www.cnblogs.com/morethink/p/8734103.html#CSRF" target="_blank" rel="noopener">CSRF</a></li>
</ul>
<p>项目地址： <a href="https://github.com/morethink/web-security" target="_blank" rel="noopener">https://github.com/morethink/web-security</a></p>
<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h2><p>XSS攻击：跨站脚本攻击(Cross-Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。XSS是一种常见的web安全漏洞，它允许攻击者将恶意代码植入到提供给其它用户使用的页面中。不同于大多数攻击(一般只涉及攻击者和受害者)，XSS涉及到三方，即攻击者、客户端与Web应用。XSS的攻击目标是为了盗取存储在客户端的cookie或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互。</p>
<p>XSS通常可以分为两大类：</p>
<ol>
<li>存储型XSS，主要出现在让用户输入数据，供其他浏览此页的用户进行查看的地方，包括留言、评论、博客日志和各类表单等。应用程序从数据库中查询数据，在页面中显示出来，攻击者在相关页面输入恶意的脚本数据后，用户浏览此类页面时就可能受到攻击。这个流程简单可以描述为：<code>恶意用户的Html输入Web程序-&gt;进入数据库-&gt;Web程序-&gt;用户浏览器</code>。</li>
<li>反射型XSS，主要做法是将脚本代码加入URL地址的请求参数里，请求参数进入程序后在页面直接输出，用户点击类似的恶意链接就可能受到攻击。</li>
</ol>
<p>比如说我写了一个网站，然后攻击者在上面发布了一个文章，内容是这样的 <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>,如果我没有对他的内容进行处理，直接存储到数据库，那么下一次当其他用户访问他的这篇文章的时候，服务器从数据库读取后然后响应给客户端，浏览器执行了这段脚本，就会将cookie展现出来，这就是典型的存储型XSS。</p>
<p>如图：<br><img src="https://images.morethink.cn/a1c6ebf6de227e086d0289f34d8c5f76.png" alt="img"></p>
<h2 id="如何预防XSS"><a href="#如何预防XSS" class="headerlink" title="如何预防XSS"></a>如何预防XSS</h2><p>答案很简单，坚决不要相信用户的任何输入，并过滤掉输入中的所有特殊字符。这样就能消灭绝大部分的XSS攻击。</p>
<p>目前防御XSS主要有如下几种方式：</p>
<ol>
<li>过滤特殊字符<br>避免XSS的方法之一主要是将用户所提供的内容进行过滤(如上面的<code>script</code>标签)。</li>
<li>使用HTTP头指定类型<br><code>w.Header().Set(&quot;Content-Type&quot;,&quot;text/javascript&quot;)</code><br>这样就可以让浏览器解析javascript代码，而不会是html输出。</li>
</ol>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><p>攻击者成功的向服务器提交恶意的SQL查询代码，程序在接收后错误的将攻击者的输入作为查询语句的一部分执行，导致原始的查询逻辑被改变，额外的执行了攻击者精心构造的恶意代码。</p>
<p>举例：<code>&#39; OR &#39;1&#39;=&#39;1</code></p>
<p>这是最常见的 SQL注入攻击，当我们输如用户名 admin ，然后密码输如<code>&#39; OR &#39;1&#39;=1=&#39;1</code>的时候，我们在查询用户名和密码是否正确的时候，本来要执行的是<code>SELECT * FROM user WHERE username=&#39;&#39; and password=&#39;&#39;</code>,经过参数拼接后，会执行 SQL语句 <code>SELECT * FROM user WHERE username=&#39;&#39; and password=&#39;&#39; OR &#39;1&#39;=&#39;1&#39;</code>，这个时候1=1是成立，自然就跳过验证了。<br>如下图所示：</p>
<p><img src="https://images.morethink.cn/69855b1538333659f26afc281feb4e30.png" alt="img"></p>
<p>但是如果再严重一点，密码输如的是<code>&#39;;DROP TABLE user;--</code>，那么 SQL命令为<code>SELECT * FROM user WHERE username=&#39;admin&#39; and password=&#39;&#39;;drop table user;--&#39;</code> 这个时候我们就直接把这个表给删除了。</p>
<h2 id="如何预防SQL注入"><a href="#如何预防SQL注入" class="headerlink" title="如何预防SQL注入"></a>如何预防SQL注入</h2><ul>
<li>在Java中，我们可以使用预编译语句(PreparedStatement)，这样的话即使我们使用 SQL语句伪造成参数，到了服务端的时候，这个伪造 SQL语句的参数也只是简单的字符，并不能起到攻击的作用。</li>
<li>对进入数据库的特殊字符（<code>&#39;&quot;\尖括号&amp;*</code>;等）进行转义处理，或编码转换。</li>
<li>在应用发布之前建议使用专业的SQL注入检测工具进行检测，以及时修补被发现的SQL注入漏洞。网上有很多这方面的开源工具，例如sqlmap、SQLninja等。</li>
<li>避免网站打印出SQL错误信息，比如类型错误、字段不匹配等，把代码里的SQL语句暴露出来，以防止攻击者利用这些错误信息进行SQL注入。</li>
</ul>
<p>在上图展示中，使用了Java JDBC中的<code>PreparedStatement</code>预编译预防SQL注入，可以看到将所有输入都作为了字符串，避免执行恶意SQL。</p>
<h1 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h1><h2 id="什么是DDOS"><a href="#什么是DDOS" class="headerlink" title="什么是DDOS"></a>什么是DDOS</h2><p>DDOS：分布式拒绝服务攻击（Distributed Denial of Service），简单说就是发送大量请求是使服务器瘫痪。DDos攻击是在DOS攻击基础上的，可以通俗理解，dos是单挑，而ddos是群殴，因为现代技术的发展，dos攻击的杀伤力降低，所以出现了DDOS，攻击者借助公共网络，将大数量的计算机设备联合起来，向一个或多个目标进行攻击。</p>
<p>在技术角度上，DDoS攻击可以针对网络通讯协议的各层，手段大致有：TCP类的SYN Flood、ACK Flood，UDP类的Fraggle、Trinoo，DNS Query Flood，ICMP Flood，Slowloris类等等。一般会根据攻击目标的情况，针对性的把技术手法混合，以达到最低的成本最难防御的目的，并且可以进行合理的节奏控制，以及隐藏保护攻击资源。</p>
<p>下面介绍一下TCP协议中的SYN攻击。</p>
<h2 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h2><p>在三次握手过程中，服务器发送 <code>SYN-ACK</code> 之后，收到客户端的 <code>ACK</code> 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 <code>SYN_RCVD</code> 状态。当收到 ACK 后，服务器才能转入 <code>ESTABLISHED</code> 状态.</p>
<p><code>SYN</code>攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送<code>SYN</code>包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的<code>SYN</code>包将长时间占用未连接队列，正常的<code>SYN</code>请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p>
<h2 id="如何预防DDOS"><a href="#如何预防DDOS" class="headerlink" title="如何预防DDOS"></a>如何预防DDOS</h2><p>阿里巴巴的安全团队在实战中发现，DDoS 防御产品的核心是检测技术和清洗技术。检测技术就是检测网站是否正在遭受 DDoS 攻击，而清洗技术就是清洗掉异常流量。而检测技术的核心在于对业务深刻的理解，才能快速精确判断出是否真的发生了 DDoS 攻击。清洗技术对检测来讲，不同的业务场景下要求的粒度不一样。</p>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h2><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>
<p>你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>
<h2 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h2><p>下图简单阐述了CSRF攻击的思<br><img src="https://images.morethink.cn/138ad4f05b47533bf46904dc165167cc.png" alt="img"></p>
<p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>
<ol>
<li>登录受信任网站A，并在本地生成Cookie。</li>
<li>在不登出A的情况下，访问危险网站B。</li>
</ol>
<p>看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p>
<ol>
<li>你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</li>
<li>你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</li>
<li>上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</li>
</ol>
<p>下面讲一讲java解决CSRF攻击的方式。</p>
<h2 id="模拟CSRF攻击"><a href="#模拟CSRF攻击" class="headerlink" title="模拟CSRF攻击"></a>模拟CSRF攻击</h2><h3 id="登录A网站"><a href="#登录A网站" class="headerlink" title="登录A网站"></a>登录A网站</h3><p>用户名和密码都是admin。</p>
<p><code>http://localhost:8081/login.html</code>:
<img src="https://images.morethink.cn/e298f8ef08869557b8fb60034f06bb80.png" alt="img"></p>
<h3 id="你有权限删除1号帖子"><a href="#你有权限删除1号帖子" class="headerlink" title="你有权限删除1号帖子"></a>你有权限删除1号帖子</h3><p><code>http://localhost:8081/deletePost.html</code>:
<img src="https://images.morethink.cn/897d358f2677d053bb9555ff69d112ac.png" alt="img"></p>
<h3 id="登录有CSRF攻击A网站的B网站"><a href="#登录有CSRF攻击A网站的B网站" class="headerlink" title="登录有CSRF攻击A网站的B网站"></a>登录有CSRF攻击A网站的B网站</h3><p><code>http://localhost:8082/deletePost.html</code>:</p>
<p><img src="https://images.morethink.cn/csrf-attack.gif" alt="img"></p>
<p>明显看到B网站是8082端口，A网站是8081端口，但是B网站的删除2号帖子功能依然实现。</p>
<h2 id="如何预防CSRF攻击"><a href="#如何预防CSRF攻击" class="headerlink" title="如何预防CSRF攻击"></a>如何预防CSRF攻击</h2><p>简单来说，CSRF 就是网站 A 对用户建立信任关系后，在网站 B 上利用这种信任关系，跨站点向网站 A 发起一些伪造的用户操作请求，以达到攻击的目的。</p>
<p>而之所以可以完成攻击是因为B向A发起攻击的时候会把A网站的cookie带给A网站，也就是说cookie已经不安全了。</p>
<h3 id="通过Synchronizer-Tokens"><a href="#通过Synchronizer-Tokens" class="headerlink" title="通过Synchronizer Tokens"></a>通过Synchronizer Tokens</h3><p>Synchronizer Tokens： 在表单里隐藏一个随机变化的 csrf_token csrf_token 提交到后台进行验证，如果验证通过则可以继续执行操作。这种情况有效的主要原因是网站 B 拿不到网站 A 表单里的 csrf_token</p>
<p>这种方式的使用条件是PHP和JSP等。因为cookie已经不安全了，因此把csrf_token值存储在session中，然后每次表单提交时都从session取出来放到form表单的隐藏域中，这样B网站不可以得到这个存储到session中的值。</p>
<p>下面是JSP的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;random_form&quot; value=&lt;%=random%&gt;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>

<p>但是我现在的情况是html，不是JSP，并不能动态的从session中取出csrf_token值。只能采用加密的方式了。</p>
<h3 id="Hash加密cookie中csrf-token值"><a href="#Hash加密cookie中csrf-token值" class="headerlink" title="Hash加密cookie中csrf_token值"></a>Hash加密cookie中csrf_token值</h3><p>这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了。</p>
<p>我采用的hash加密方法是JS实现Java的HashCode方法，得到hash值，这个比较简单。也可以采用其他的hash算法。</p>
<p>前端向后台传递hash之后的csrf_token值和cookie中的csrf_token值，后台拿到cookie中的csrf_token值后得到hashCode值然后与前端传过来的值进行比较，一样则通过。</p>
<h4 id="你有权限删除3号帖子"><a href="#你有权限删除3号帖子" class="headerlink" title="你有权限删除3号帖子"></a>你有权限删除3号帖子</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:8081/deletePost.html</span><br></pre></td></tr></table></figure>

<p><img src="https://images.morethink.cn/2ac5eab98780646c6c36dcdc98fa50c7.png" alt="img"></p>
<h4 id="B网站的他已经没有权限了"><a href="#B网站的他已经没有权限了" class="headerlink" title="B网站的他已经没有权限了"></a>B网站的他已经没有权限了</h4><p>我们通过UserFilter.java给攻击者返回的是403错误，表示服务器理解用户客户端的请求但拒绝处理。</p>
<p><code>http://localhost:8082/deletePost.html</code>:
<img src="https://images.morethink.cn/csrf-attack-fail-failure.gif" alt="img"></p>
<p>攻击者不能删除4号帖子。</p>
<p>前端代码：</p>
<p>deletePost.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>deletePost<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">deletePost</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> url = <span class="string">'/post/'</span> + <span class="built_in">document</span>.getElementById(<span class="string">"postId"</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> csrf_token = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/(?:(?:^|.*;\s*)csrf_token\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="string">"$1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'csrf_token='</span> + csrf_token);</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                type: <span class="string">"post"</span>,<span class="comment">//请求方式</span></span></span><br><span class="line"><span class="javascript">                url: url,  <span class="comment">//发送请求地址</span></span></span><br><span class="line"><span class="javascript">                timeout: <span class="number">30000</span>,<span class="comment">//超时时间：30秒</span></span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="javascript">                    <span class="string">"_method"</span>: <span class="string">"delete"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"csrf_token"</span>: hash(csrf_token) <span class="comment">// 对csrf_token进行hash加密</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                dataType: <span class="string">"json"</span>,<span class="comment">//设置返回数据的格式</span></span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (result.message == <span class="string">"success"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#result"</span>).text(<span class="string">"删除成功"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#result"</span>).text(<span class="string">"删除失败"</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//请求出错的处理</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#result"</span>).text(<span class="string">"请求出错"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// javascript的String到int(32位)的hash算法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hash = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (str.length == <span class="number">0</span>) <span class="keyword">return</span> hash;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span></span><br><span class="line">                char = str.charCodeAt(i);</span><br><span class="line">                hash = ((hash &lt;&lt; 5) - hash) + char;</span><br><span class="line"><span class="javascript">                hash = hash &amp; hash; <span class="comment">// Convert to 32bit integer</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> hash;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>删除帖子<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">帖子编号 ： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"postId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"deletePost();"</span>&gt;</span>deletePost<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后台代码：</p>
<p>UserInterceptor.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.morethink.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.morethink.util.JsonUtil;</span><br><span class="line"><span class="keyword">import</span> cn.morethink.util.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"POST"</span>) || method.equalsIgnoreCase(<span class="string">"DELETE"</span>)</span><br><span class="line">                || method.equalsIgnoreCase(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">            String csrf_token = request.getParameter(<span class="string">"csrf_token"</span>);</span><br><span class="line">            Cookie[] cookies = request.getCookies();</span><br><span class="line">            <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span> &amp;&amp; csrf_token != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"csrf_token"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Integer.valueOf(csrf_token) == cookie.getValue().hashCode()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result(<span class="string">"403"</span>, <span class="string">"你还想攻击我??????????"</span>, <span class="string">""</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(JsonUtil.toJson(result));</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ol>
<li>cookie必须要设置PATH才可以生效，否则在下一次请求的时候无法带给服务器。</li>
<li>Spring Boot 出现启动找不到主类的问题时可以mvn clean一下。</li>
<li>Filter设置response.sendError(403)在Spring Boot没有效果。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面一共提到了4种攻击方式，分别是XSS攻击（关键是脚本，利用恶意脚本发起攻击），SQL注入（关键是通过用SQL语句伪造参数发出攻击），DDOS攻击（关键是发出大量请求，最后令服务器崩溃），CSRF攻击（关键是借助本地cookie进行认证，伪造发送请求）。</p>
<p><strong>参考文档</strong>：</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/24249045" target="_blank" rel="noopener">XSS实战：我是如何拿下你的百度账号</a></li>
<li><a href="http://www.cnblogs.com/-new/p/7135814.html" target="_blank" rel="noopener">总结几种常见web攻击手段及其防御方式</a></li>
<li><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">浅谈CSRF攻击方式</a></li>
<li><a href="http://blog.csdn.net/zzhongcy/article/details/20133883" target="_blank" rel="noopener">jQueue 动态设置form表单的action属性的值和方法</a></li>
<li><a href="https://www.thinksaas.cn/group/topic/304242/" target="_blank" rel="noopener">javascript的String到int(32位)的hash算法</a></li>
</ol>
]]></content>
      <tags>
        <tag>web-security</tag>
      </tags>
  </entry>
  <entry>
    <title>项目遇到的一些基础性问题</title>
    <url>/2019/11/13/%E4%BA%AC%E4%B8%9C%E9%A1%B9%E7%9B%AE%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<blockquote>
<ol>
<li>index.html  首页</li>
<li>mycar.html  我的购物车</li>
<li>myorder.html  我的订单</li>
<li>login.html  登录</li>
<li>register.html  注册</li>
<li>goodsInfo.html  商品详情页</li>
</ol>
</blockquote>
<p><strong>重点强调了自己会写博客记录遇到的坑，避免再次犯错。</strong></p>
<h4 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建script标签</span></span><br><span class="line"><span class="keyword">var</span> script=<span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//数据请求回来会被触发的函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置script的src属性，设置请求地址</span></span><br><span class="line">script.src=<span class="string">"http://localhost:3000?callback=getData"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让script生效</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure>

<h4 id="关于箭头函数"><a href="#关于箭头函数" class="headerlink" title="关于箭头函数"></a>关于箭头函数</h4><p>我在写“我的订单”页面时，有一个特效，鼠标触摸到序号时会切换商品列表，这时用到了jquery的<code>hover()</code>事件，我用的是箭头函数，结果改变了<code>this</code>的指向，此时的<code>this</code>指向的是window，不再是该事件，所以总是达不到想要的效果</p>
<h4 id="获取元素下标"><a href="#获取元素下标" class="headerlink" title="获取元素下标"></a>获取元素下标</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).index();</span><br></pre></td></tr></table></figure>

<h4 id="封装楼层导航"><a href="#封装楼层导航" class="headerlink" title="封装楼层导航"></a>封装楼层导航</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 楼层导航</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> min_height = $(<span class="string">"#section-bottom"</span>).offset().top;</span><br><span class="line"><span class="keyword">let</span> $scroll = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 触发滚动事件</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">"scroll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scroll = $(<span class="keyword">this</span>).scrollTop();</span><br><span class="line">    <span class="comment">// 楼层导航的显示</span></span><br><span class="line">    <span class="keyword">if</span> ($scroll &gt;= min_height) &#123;</span><br><span class="line">        $(<span class="string">"#nav"</span>).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#nav"</span>).hide();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* click_ele：点击的元素</span></span><br><span class="line"><span class="comment">* to_ele：到达的元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click_ev</span>(<span class="params">click_ele, to_ele</span>) </span>&#123;</span><br><span class="line">    click_ele.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// $(document).scrollTop();</span></span><br><span class="line">        to_ele.velocity(<span class="string">"scroll"</span>, &#123;</span><br><span class="line">            <span class="string">'duration'</span>: <span class="number">500</span>,</span><br><span class="line">            <span class="string">'offset'</span>: <span class="number">-30</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="淘宝搜索商品关键字提示"><a href="#淘宝搜索商品关键字提示" class="headerlink" title="淘宝搜索商品关键字提示"></a>淘宝搜索商品关键字提示</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  淘宝商品搜索关键字接口</span></span><br><span class="line"><span class="comment">*  1. 请求方式：get</span></span><br><span class="line"><span class="comment">*  2. 请求地址：https://suggest.taobao.com/sug?code=utf-8&amp;q=' + sVal + '&amp;_ksTS=1515120676355_323&amp;callback=t&amp;area=c2c&amp;bucketid=15; </span></span><br><span class="line"><span class="comment">*  请求参数：q:搜索的关键字；callback：回调函数</span></span><br><span class="line"><span class="comment">* 4. 返回数据的格式：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> queryStr = $(<span class="string">"#searchTxt"</span>);</span><br><span class="line"><span class="keyword">let</span> $ul = $(<span class="string">"#search-list"</span>);</span><br><span class="line">queryStr.keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scriptDom = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    scriptDom.src = <span class="string">'https://suggest.taobao.com/sug?code=utf-8&amp;q='</span> + <span class="keyword">this</span>.value + <span class="string">'&amp;_ksTS=1515120676355_323&amp;callback=fn&amp;area=c2c&amp;bucketid=15'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(scriptDom);</span><br><span class="line">    scriptDom.remove();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// callback:回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(data);</span></span><br><span class="line">    <span class="keyword">let</span> htmlStr = <span class="string">""</span>;</span><br><span class="line">    data.result.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        htmlStr += <span class="string">`&lt;li&gt;&lt;a href=""&gt;<span class="subst">$&#123;item[<span class="number">0</span>]&#125;</span>&lt;/a&gt;&lt;/li&gt;`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    $ul.html(htmlStr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="闭包：要获取函数的局部变量，就要把嵌套的函数定义在变量的作用域链里，就是所谓的“闭包”。"><a href="#闭包：要获取函数的局部变量，就要把嵌套的函数定义在变量的作用域链里，就是所谓的“闭包”。" class="headerlink" title="闭包：要获取函数的局部变量，就要把嵌套的函数定义在变量的作用域链里，就是所谓的“闭包”。"></a>闭包：要获取函数的局部变量，就要把嵌套的函数定义在变量的作用域链里，就是所谓的<strong>“闭包”</strong>。</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = a();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这时b就拿到了a函数中 的a的值</span></span><br></pre></td></tr></table></figure>

<h4 id="全选和取消全选"><a href="#全选和取消全选" class="headerlink" title="全选和取消全选"></a>全选和取消全选</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">".selectAll"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"input[class='singleSelect']"</span>).prop(<span class="string">"checked"</span>, <span class="keyword">this</span>.checked);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="关于zoom-1（IE特有属性）"><a href="#关于zoom-1（IE特有属性）" class="headerlink" title="关于zoom:1（IE特有属性）"></a>关于zoom:1（IE特有属性）</h4><blockquote>
<p>是IE浏览器的专有属性，可以设置或检索对象的缩放比例</p>
<p>当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。</p>
<p>zoom:1能够比较神奇地解决ie下比较奇葩的bug，譬如外边距（margin）的重叠，譬如浮动的清除，譬如触发ie的 haslayout属性等等。</p>
</blockquote>
<h4 id="鼠标触碰到li时显示边框，但会抖动"><a href="#鼠标触碰到li时显示边框，但会抖动" class="headerlink" title="鼠标触碰到li时显示边框，但会抖动"></a>鼠标触碰到li时显示边框，但会抖动</h4><p>解决这个问题需要给li设置一个不显示的边框，提前占位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br></pre></td></tr></table></figure>

<h4 id="JS封装"><a href="#JS封装" class="headerlink" title="JS封装"></a>JS封装</h4><h5 id="1-轮播图封装"><a href="#1-轮播图封装" class="headerlink" title="1.轮播图封装"></a>1.轮播图封装</h5><ul>
<li><p><strong>滑入滑出</strong>（花多长时间，让某个元素出，某个元素进）</p>
<p>参数:</p>
<p>outDom：出去的dom</p>
<p>inDom:进来的dom</p>
<p>endLeft：终点</p>
<p>timeLong:时长</p>
<p>返回值：无</p>
</li>
<li><p><strong>淡入淡出</strong>（花多长时间，让某个元素出，某个元素进）</p>
<p>参数:</p>
<p>outDom：出去的dom</p>
<p>inDom:进来的dom</p>
<p>timeLong:时长</p>
<p>返回值：无</p>
</li>
</ul>
<h5 id="2-ajax封装"><a href="#2-ajax封装" class="headerlink" title="2. ajax封装"></a>2. ajax封装</h5><p>​    功能：与后端交互</p>
<p>​    参数：</p>
<p>​    请求方式</p>
<p>​    请求地址</p>
<p>​    请求参数（前端发给后端）</p>
<p>​    是否异步</p>
<p>​    回调函数</p>
<p>​    返回值：无</p>
<h5 id="3-显示隐藏的地区"><a href="#3-显示隐藏的地区" class="headerlink" title="3. 显示隐藏的地区"></a>3. 显示隐藏的地区</h5><h5 id="4-清空搜索框"><a href="#4-清空搜索框" class="headerlink" title="4. 清空搜索框"></a>4. 清空搜索框</h5><h5 id="5-增加、减少商品数量"><a href="#5-增加、减少商品数量" class="headerlink" title="5. 增加、减少商品数量"></a>5. 增加、减少商品数量</h5><p> <em>*  increment:增加按钮</em></p>
<p> <em>*  decrement：减少按钮</em></p>
<p> <em>*  numinput：数字输入框</em></p>
<p> <em>*  sumprice：商品总价（保留小数点后两位）</em></p>
<p> <em>*  singleprice：商品单价</em></p>
<p> <em>*  hasSelect：已选择商品的数量</em></p>
<p> <em>*  disabled：类名，减到1时减少按钮不能变灰(需要写css样式)</em></p>
<p> <em>*  secondSum: 第二个商品总价</em></p>
<h5 id="6-点击或触摸i标签，i标签改变形状，同时打开或隐藏某个列表"><a href="#6-点击或触摸i标签，i标签改变形状，同时打开或隐藏某个列表" class="headerlink" title="6. 点击或触摸i标签，i标签改变形状，同时打开或隐藏某个列表"></a>6. <em>点击或触摸i标签，i标签改变形状，同时打开或隐藏某个列表</em></h5><p> <em>*  clickEle：要点击的元素</em></p>
<p> <em>*  ev：事件（click、hover等）</em></p>
<p> <em>*  originClass：标签原来的类名</em></p>
<p> <em>*  nowClass：改变后的类名</em></p>
<p> <em>*  opeEle：要改变状态的元素（隐藏或显示）</em></p>
<hr>
<h3 id="美团app首页"><a href="#美团app首页" class="headerlink" title="美团app首页"></a>美团app首页</h3><blockquote>
<p>需要引入html5兼容性文件和自适应文件</p>
<p>rem计算</p>
</blockquote>
<h4 id="rem基准值计算"><a href="#rem基准值计算" class="headerlink" title="rem基准值计算"></a>rem基准值计算</h4><p>​     iPhone6的屏幕大小是375px，所以<code>rem = window.innerWidth  / 10</code>，这样的话rem基准值就是37.5（iphone6的视觉稿）</p>
<p>这里为什么要除以10呢，其实这个值是随便定义的，假如不除以10，根据我们算出来的基准值会偏大，这样在设置html的font-size时候会偏小，我们知道浏览器的font-size如果小于12px就显示不出效果了，在这里列举一下其他手机的</p>
<p>iphone3gs: 320px / 10 = 32px</p>
<p>iphone4/5: 320px  / 10 = 32px</p>
<p>iphone6: 375px  / 10 =37.5px</p>
<h4 id="使用flex布局实现块级元素在同一行并居中（弹性盒模型）"><a href="#使用flex布局实现块级元素在同一行并居中（弹性盒模型）" class="headerlink" title="使用flex布局实现块级元素在同一行并居中（弹性盒模型）"></a>使用flex布局实现块级元素在同一行并居中（弹性盒模型）</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-between</span>; <span class="comment">/**一左一右，为center时是水平居中**/</span></span><br><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;  <span class="comment">/**垂直居中**/</span></span><br></pre></td></tr></table></figure>

<h4 id="设置viewport配合进行缩放"><a href="#设置viewport配合进行缩放" class="headerlink" title="设置viewport配合进行缩放"></a>设置viewport配合进行缩放</h4><blockquote>
<p>通常在写移动端页面的时候，我们都会设置viewport，保证页面缩放没有问题</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="轮播图：下载swipper"><a href="#轮播图：下载swipper" class="headerlink" title="轮播图：下载swipper"></a>轮播图：下载swipper</h4><p><a href="https://www.swiper.com.cn/download/index.html" target="_blank" rel="noopener">swipper</a></p>
<h4 id="flex-1-li之间有距离，铺开"><a href="#flex-1-li之间有距离，铺开" class="headerlink" title="flex: 1;      li之间有距离，铺开"></a>flex: 1;      li之间有距离，铺开</h4>]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件</title>
    <url>/2019/11/10/vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<ul>
<li><h4 id="vue官网"><a href="#vue官网" class="headerlink" title="vue官网"></a><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue官网</a></h4></li>
<li><h4 id="template：模板（html和css都可以写）"><a href="#template：模板（html和css都可以写）" class="headerlink" title="template：模板（html和css都可以写）"></a><code>template</code>：模板（html和css都可以写）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h4><blockquote>
<p>vue对象就是vue组件，vue组件也就是vue对象</p>
<p>但在框架里为了进行区分（为了未来的单页面应用），把vue组件单列出来，针对vue组件有专门的写法和使用</p>
<p>封装组件==封装函数，只不过函数中没有html，而组件中有html</p>
</blockquote>
</li>
<li><h4 id="vue组件的基本使用步骤："><a href="#vue组件的基本使用步骤：" class="headerlink" title="vue组件的基本使用步骤："></a>vue组件的基本使用步骤：</h4><ol>
<li><p><font color="green"><strong>定义vue组件</strong></font></p>
<p>(1)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.extend(<span class="string">'组件名'</span>, 组件的代码);</span><br></pre></td></tr></table></figure>

<p>(2) 简写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 组件名 = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ol start="2">
<li><p><font color="green"><strong>注册vue组件（相当于声明函数）</strong></font></p>
<p>(1) 全局注册：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'标签名'</span>, 组件名);</span><br></pre></td></tr></table></figure>

<p>(2) 局部注册：(在new的vue对象中增加<code>components:{&#39;标签名&#39;, 组件名}</code>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 2. 注册组件  */</span></span><br><span class="line">	<span class="comment">// 局部注册</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'self'</span>: myvue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p><font color="green"><strong>使用组件（在html中定义如下标签后在vue中new）（相当于调用函数）</strong></font></p>
<p>（1） 在html中自定义标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!--自定义标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）在vue中new一个vue对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>  <font color="gree" size="4"><strong>注册实例：</strong></font></p>
<p>  <font color="blue"><strong>（1）全局注册：</strong></font></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">self</span>&gt;</span><span class="tag">&lt;/<span class="name">self</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">/* 1.定义vue组件  */</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> myVue = &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">"家具"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 模板  </span></span></span><br><span class="line">    template: `</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">/* 2. 注册组件  */</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 全局注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'self'</span>, myVue);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript"><span class="comment">/* 3. 使用组件 */</span></span></span><br><span class="line"><span class="xml">// (1).在HTML中定义<span class="tag">&lt;<span class="name">self</span>&gt;</span><span class="tag">&lt;/<span class="name">self</span>&gt;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// (2).创建vue对象 </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  <font color="blue"><strong>（2）局部注册：(在new的vue对象中写注册组件)</strong></font></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">self</span>&gt;</span><span class="tag">&lt;/<span class="name">self</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">/* 1.定义vue组件  */</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> myVue = &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">"家具"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 模板  </span></span></span><br><span class="line">    template: `</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript"><span class="comment">/* 3. 使用组件 */</span></span></span><br><span class="line"><span class="xml">// (1).在HTML中定义<span class="tag">&lt;<span class="name">self</span>&gt;</span><span class="tag">&lt;/<span class="name">self</span>&gt;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// (2).创建vue对象 </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">/* 2. 注册组件  */</span></span></span><br><span class="line"><span class="javascript">	<span class="comment">// 局部注册</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">'self'</span>: myvue</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h4 id="组件里使用v-for循环"><a href="#组件里使用v-for循环" class="headerlink" title="组件里使用v-for循环"></a>组件里使用<code>v-for</code>循环</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goodslist</span>&gt;</span><span class="tag">&lt;/<span class="name">goodslist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1. 定义组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> goodslist = &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            goodslist: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">"铅笔"</span>, <span class="attr">price</span>: <span class="number">1.5</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">"钢笔"</span>, <span class="attr">price</span>: <span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">"毛笔"</span>, <span class="attr">price</span>: <span class="number">20</span>&#125;</span></span><br><span class="line">                </span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 创建商品列表</span></span></span><br><span class="line">    template: `</span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;li v-<span class="keyword">for</span>=<span class="string">"goods in goodslist"</span>&gt;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>商品名称：&#123;&#123;goods.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>商品价格：&#123;&#123;goods.price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">// 2. 使用组件 &amp; 局部注册</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 局部注册</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line">        goodslist: goodslist</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2019/11/10/vue组件/v-for.png" alt="img"></p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="在组件中定义html标签的属性—props"><a href="#在组件中定义html标签的属性—props" class="headerlink" title="在组件中定义html标签的属性—props"></a>在组件中定义html标签的属性—<code>props</code></h4><blockquote>
<p>注意点：</p>
<ol>
<li><p>属性名不区分大小写，如果在组件内声明的属性名是驼峰命名法，那么在标签内要用<code>-</code>分割，为避免这一问题，可以在组件内全部用小写命名属性</p>
</li>
<li><p>prop类型限制：</p>
</li>
</ol>
<p>   [prop类型]: <a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E7%B1%BB%E5%9E%8B</a></p>
<ol start="3">
<li>prop的验证（类型，是否必填，默认值）</li>
</ol>
<p>   [prop验证]: <a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goodslist</span> <span class="attr">type</span>=<span class="string">"文具"</span>&gt;</span><span class="tag">&lt;/<span class="name">goodslist</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goodslist</span> <span class="attr">type</span>=<span class="string">"电子产品"</span>&gt;</span><span class="tag">&lt;/<span class="name">goodslist</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1. 定义组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> goodslist = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 声明该组件的自定义属性（相当于函数的形参）</span></span></span><br><span class="line"><span class="javascript">      props: [<span class="string">'type'</span>],</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">              goodslist: &#123;</span><br><span class="line"><span class="javascript">                  <span class="string">"文具"</span>: [</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">name</span>: <span class="string">"铅笔"</span>, <span class="attr">price</span>: <span class="number">1.5</span>&#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">name</span>: <span class="string">"钢笔"</span>, <span class="attr">price</span>: <span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">name</span>: <span class="string">"毛笔"</span>, <span class="attr">price</span>: <span class="number">20</span>&#125;</span></span><br><span class="line">                  ],</span><br><span class="line"><span class="javascript">                  <span class="string">"电子产品"</span>: [</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">name</span>: <span class="string">"手机"</span>, <span class="attr">price</span>: <span class="number">2900</span>&#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;<span class="attr">name</span>: <span class="string">"电脑"</span>, <span class="attr">price</span>: <span class="number">6000</span>&#125;,</span></span><br><span class="line">                  ]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">          currGoodsList() &#123;</span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="keyword">this</span>.goodslist[<span class="keyword">this</span>.type];</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: `</span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>所有&#123;&#123;type&#125;&#125;：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="javascript">              &lt;li v-<span class="keyword">for</span>=<span class="string">"goods in currGoodsList"</span> &gt;</span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">p</span>&gt;</span>商品名称：&#123;&#123;goods.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">p</span>&gt;</span>商品价格：&#123;&#123;goods.price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      `</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="comment">// 2. 使用组件 &amp; 局部注册</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line">      components: &#123;</span><br><span class="line">          goodslist: goodslist</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>  运行结果：</p>
<p>  <img src="/2019/11/10/vue组件/props.png" alt="img"></p>
<hr>
<ul>
<li><h4 id="给props传入动态值"><a href="#给props传入动态值" class="headerlink" title="给props传入动态值"></a>给props传入动态值</h4></li>
</ul>
<hr>
<ul>
<li><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><blockquote>
<p>父组件的数据通过props传入子组件</p>
<p>但如果子组件能给父组件传值，则为双向</p>
</blockquote>
<p>的</p>
</li>
<li><h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>props是外部传给组件的数据，而data则是组件内部的数据</p>
<p>解释：如果说封装函数就是在封装组件的话，那么props就是函数的形参，data相当于函数的局部变量</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><blockquote>
<p>$emit()函数用来触发事件</p>
</blockquote>
<p>注：事件名全部小写</p>
<ul>
<li><p>在自定义组件中使用<code>v-model</code></p>
<blockquote>
<p>此指令绑定在表单元素，完成双向数据绑定</p>
<p>v-model是个语法糖，使用的是value属性和input事件的结合</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><blockquote>
<p>插槽就是子组件中的提供给父组件使用的一个占位符，用<code>&lt;slot&gt;&lt;/slot&gt;</code>表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签</p>
</blockquote>
<p><font color="red"><strong>如果子组件没有使用插槽，父组件如果需要往子组件中填充模板或者html, 是没法做到的</strong></font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">person</span>&gt;</span>hhh<span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1. 定义组件 </span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> person = &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">// 2. 使用组件 &amp; 局部注册</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        person: person</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h5 id="具名插槽："><a href="#具名插槽：" class="headerlink" title="具名插槽："></a>具名插槽：</h5><blockquote>
<p>具名插槽其实就是给插槽取个名字</p>
<p>一个子组件可以放多个插槽，而且可以放在不同的地方，而父组件填充内容时，可以根据这个名字把内容填充到对应插槽中</p>
</blockquote>
<p><font color="red"><strong>注意 ：v-slot 只能添加在一个 <code>&lt;template&gt;</code>上(只有<a href="https://cn.vuejs.org/v2/guide/components-slots.html#独占默认插槽的缩写语法" target="_blank" rel="noopener">一种例外情况</a>)</strong></font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">person</span> &gt;</span></span><br><span class="line">            <span class="comment">&lt;!--现在 &lt;template&gt; 元素中的所有内容都将会被传入相应的插槽。</span></span><br><span class="line"><span class="comment">			任何没有被包裹在带有 v-slot 的&lt;template&gt;中的内容都会被视为默认插槽的内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span>我是默认的<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:head</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span>我是底部<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1. 定义组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> person = &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"head"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">// 2. 使用组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        person: person</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示结果：</p>
<p><img src="/2019/11/10/vue组件/%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD.png" alt="img"></p>
<p><font color="red"><strong>注意：</strong></font></p>
<ol>
<li><p><font color="red">父级的填充内容如果指定到子组件的没有对应名字插槽，那么该内容<strong>不会</strong>被填充到默认插槽中。</font></p>
</li>
<li><p><font color="red">如果子组件没有默认插槽，而父级的填充内容指定到默认插槽中，那么该内容就“<strong>不会</strong>”填充到子组件的任何一个插槽中。</font></p>
</li>
<li><p><font color="red">如果子组件有多个默认插槽，而父组件所有指定到默认插槽的填充内容，将“<strong>会</strong>” “<strong>全都</strong>”填充到子组件的每个默认插槽中。</font></p>
</li>
</ol>
</li>
</ul>
<hr>
<ul>
<li><h4 id="transition组件"><a href="#transition组件" class="headerlink" title="transition组件"></a>transition组件</h4></li>
<li><h4 id="使用第三方动画库-animate-css"><a href="#使用第三方动画库-animate-css" class="headerlink" title="使用第三方动画库(animate.css)"></a>使用第三方动画库(animate.css)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/animate.css@3.5.1"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h5><p>我们可以通过以下特性来自定义过渡类名：</p>
<ul>
<li><code>enter-class</code></li>
<li><code>enter-active-class</code></li>
<li><code>enter-to-class</code> (2.1.8+)</li>
<li><code>leave-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-to-class</code> (2.1.8+)</li>
</ul>
<p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a> 结合使用十分有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"show=!show"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"custom-classes-transition"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>我是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123; </span><br><span class="line"><span class="javascript">            show:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





























</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git多人协作使用手册说明</title>
    <url>/2019/11/03/git%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h4 id="一、管理员操作"><a href="#一、管理员操作" class="headerlink" title="一、管理员操作"></a>一、管理员操作</h4><blockquote>
<p>  管理员所做的事情，就是搭建版本控制工具的环境（包括：远程仓库，建立团队，人员及其权限）</p>
</blockquote>
<p><img src="/2019/11/03/git多人协作使用手册/wps1.jpg" alt="img"> </p>
<p>以下是管理操作的步骤（简版的），如果想看详细的，请到最后的第三点中（（三）附：管理员操作的详细步骤：）</p>
<ol>
<li><p>创建组织</p>
<blockquote>
<p>组织下面下面有仓库，也有团队，也有人员</p>
</blockquote>
</li>
</ol>
<p><img src="/2019/11/03/git多人协作使用手册/wps2.jpg" alt="img"> </p>
<ol start="2">
<li>给组织下创建团队</li>
</ol>
<p><img src="/2019/11/03/git多人协作使用手册/wps3.jpg" alt="img"> </p>
<ol start="3">
<li>给组织下创建仓库</li>
</ol>
<p><img src="/2019/11/03/git多人协作使用手册/wps4.jpg" alt="img"> </p>
<ol start="4">
<li>给组织创建人员</li>
</ol>
<p><img src="/2019/11/03/git多人协作使用手册/wps5.jpg" alt="img"> </p>
<ol start="5">
<li>团队和人员对应（把人员加入到团队里）</li>
</ol>
<p><img src="/2019/11/03/git多人协作使用手册/wps6.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps7.jpg" alt="img"> </p>
<ol start="6">
<li>把仓库和团队对应</li>
</ol>
<p><img src="/2019/11/03/git多人协作使用手册/wps8.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps9.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps11.jpg" alt="img"> </p>
<p>顺便设置团队权限</p>
<p><img src="/2019/11/03/git多人协作使用手册/wps13.jpg" alt="img"> </p>
<hr>
<h4 id="二、各成员的操作"><a href="#二、各成员的操作" class="headerlink" title="二、各成员的操作"></a>二、各成员的操作</h4><ol>
<li><p><font color="blue"><strong>建立连接（创建公钥）</strong></font></p>
<blockquote>
<p>每个人用自己的账号登录到github上（就能看到上面建立的仓库），把本地产生的公钥加到你自己的github账户里。</p>
</blockquote>
<p>具体操作：</p>
<ul>
<li><p><font color="green"><strong>(1) 在本地创建ssh key（公钥）</strong></font></p>
<p>在git bash命令行中输入： <code>ssh-keygen -t rsa -C  “[youremail@example.com](mailto:youremail@example.com)”</code></p>
<p>你需要把邮件地址换成你⾃⼰的邮件地址，然后⼀路回车，使⽤默认值即可.</p>
<p>在⽤户主目录下(/c/Users/Administrator/.ssh/目录下))，看看有没有.ssh目录，如果有，再看看这个目录下 有没有id_rsa和id_rsa.pub这两个⽂件，如果已经有了，可直接 跳到下⼀步。</p>
</li>
<li><p><font color="green"><strong>(2) 登陆GitHub，打开“Account settings”</strong>，</font>“SSH Keys”⾯： 然后，点“Add SSH Key”，填上任意Title，在Key⽂本框⾥粘贴id_rsa.pub⽂件的内容：</p>
<p><img src="/2019/11/03/git多人协作使用手册/wps14.jpg" alt="img"><img src="/2019/11/03/git多人协作使用手册/wps15.jpg" alt="img"> </p>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p><font color="blue"><strong>克隆仓库到本地（产生了项目目录和本地仓库）</strong></font></p>
<blockquote>
<p>在你需要克隆仓库的一个文件夹下右键打开git bash命令行</p>
</blockquote>
<p>命令：<code>git clone [仓库地址]</code></p>
<p><img src="/2019/11/03/git多人协作使用手册/wps16.jpg" alt="img"> </p>
<p>即可克隆仓库到该文件夹下，生成一个以组织中存储库命名的文件夹，也就是你的<strong>项目文件夹</strong>。</p>
<p><img src="/2019/11/03/git多人协作使用手册/wps17.jpg" alt="img"> </p>
</li>
<li><p><font color="blue"><strong>写代码，版本管理</strong></font></p>
<ul>
<li><p><font color="green"><strong>(1) 建立自己的分支</strong></font>，写代码：</p>
<p>在<strong>项目文件夹</strong>中右键打开git bash命令行，键入命令 <code>git checkout -b xueyan</code>（该命令一键创建分支并切换）</p>
<p>分开命令也可以写为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-attr">[分支名字]</span>   创建新分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Git</span> <span class="selector-tag">checkour</span> <span class="selector-attr">[分支名字]</span>   切换到分支</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/03/git多人协作使用手册/wps18.jpg" alt="img"> </p>
</li>
<li><p><font color="green"><strong>(2) 上传到本地版本库：</strong> </font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">add</span> </span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">commit</span></span><br></pre></td></tr></table></figure>

<p>此时是将你写好的代码文件上传过程，例如你写好的文件是index.html </p>
<p>具体命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span><span class="selector-class">.html</span>  加入缓存区</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">commit</span> <span class="selector-tag">-m</span> “<span class="selector-tag">index</span>”   提交到本地仓库，引号内是提交时你修改或者添加了什么东西的描述</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/03/git多人协作使用手册/wps19.jpg" alt="img"> </p>
</li>
<li><p><font color="green"><strong>(3) 推送到远端：<code>git push</code></strong></font></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">git push -u [git@github.com:myyShop/xianyu.git](mailto:git@github.com:myyShop/xianyu.git) xueyan  /*此时是推送到远端自己的分支中*/</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/03/git多人协作使用手册/wps20.jpg" alt="img"> </p>
</li>
<li><p><font color="green"><strong>(4) 在自己的分支开发好了后，合并到开发分支（假定是master分支，也可以用dev分支，这是稳定的代码）</strong></font></p>
<ul>
<li><p><font color="orange"><strong>① 切换到主分支</strong></font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>② 将远端主分支的代码拉下来，得到团队中其他人的稳定代码</strong></font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">pull</span> <span class="selector-attr">[git@github.com:myyShop/xianyu.git]</span> <span class="selector-tag">master</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/03/git多人协作使用手册/wps21.jpg" alt="img"> </p>
</li>
<li><p><font color="orange"><strong>③ 把自己开发的代码合并到开发分支（master分支）</strong></font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">merge</span> <span class="selector-tag">xueyan</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange">④ 把master分支的代码推送到远端</font></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">git push -u [git@github.com:myyShop/xianyu.git master</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/03/git多人协作使用手册/wps22.jpg" alt="img"> </p>
</li>
</ul>
</li>
<li><p><font color="green"><strong>(5) 或者可以直接将文件add ，commit， push到主分支</strong></font></p>
<p><img src="/2019/11/03/git多人协作使用手册/wps23.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps24.jpg" alt="img"> </p>
</li>
<li><p><font color="green"><strong>(6) 此时要上传的文件已经存在在远端的主分支中了</strong></font></p>
<p><img src="/2019/11/03/git多人协作使用手册/wps25.jpg" alt="img"> </p>
</li>
</ul>
</li>
</ol>
<hr>
<h4 id="三、附：管理员操作的详细步骤"><a href="#三、附：管理员操作的详细步骤" class="headerlink" title="三、附：管理员操作的详细步骤"></a>三、附：管理员操作的详细步骤</h4><ol>
<li><p><font color="blue"><strong>登录github</strong></font></p>
</li>
<li><p><font color="blue"><strong>创建一个组织</strong></font>：Accounts Settings =&gt; Organizations =&gt;new Organization</p>
<p>图解：</p>
<p><img src="/2019/11/03/git多人协作使用手册/wps27.jpg" alt="img"> <img src="/2019/11/03/git多人协作使用手册/wps29.jpg" alt="img"> <img src="/2019/11/03/git多人协作使用手册/wps31.jpg" alt="img"><img src="/2019/11/03/git多人协作使用手册/wps33.jpg" alt="img"> <img src="/2019/11/03/git多人协作使用手册/wps35.jpg" alt="img"> <img src="/2019/11/03/git多人协作使用手册/wps38.jpg" alt="img"></p>
</li>
<li><p><font color="blue"><strong>创建一个仓库</strong></font></p>
<p><img src="/2019/11/03/git多人协作使用手册/wps41.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps45.jpg" alt="img"> </p>
</li>
</ol>
<p><img src="/2019/11/03/git多人协作使用手册/wps46.jpg" alt="img"> </p>
<p>看到以上画面，说明仓库创建好了</p>
<ol start="4">
<li><p><font color="blue"><strong>创建人员（先创建team，再给team里增加人员）</strong></font></p>
<ul>
<li><p><font color="green"><strong>(1) 创建team</strong></font></p>
<blockquote>
<p>在新建的仓库里，进入Repository的Settings，然后在Collaborators&amp;team里就可以添加team了</p>
</blockquote>
<p>图解：</p>
<p><img src="/2019/11/03/git多人协作使用手册/wps50.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps52.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps54.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps56.jpg" alt="img"> </p>
<p>Team创建成功了</p>
</li>
<li><p><font color="green"><strong>(2) 给team里增加成员</strong></font></p>
</li>
</ul>
<p><img src="/2019/11/03/git多人协作使用手册/wps59.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps61.jpg" alt="img"> </p>
<p><img src="/2019/11/03/git多人协作使用手册/wps63.jpg" alt="img"> </p>
</li>
</ol>
<p>​    发送邀请（invite）后，需要对方同意（在对方的邮箱里收到的邮件里，点击”join”按钮）</p>
<p>​    对方同意后，刷新页面，看到当前组织里，增加了一个成员：</p>
<p><img src="/2019/11/03/git多人协作使用手册/wps65.jpg" alt="img"> </p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2019/11/03/vue/</url>
    <content><![CDATA[<ul>
<li><h4 id="vue的介绍"><a href="#vue的介绍" class="headerlink" title="vue的介绍"></a>vue的介绍</h4><blockquote>
<p>vue是个框架，比起jquery框架要更加有高度，因为jquery框架仅仅只是一个函数库</p>
<p>框架：别人写好的函数库，但是，使用时要按照别人规定的格式写</p>
<p>vue写代码时，跟以前的写法都不一样，由尤雨溪开发</p>
<p>vue是一套构建用户界面的框架，只关注视图层</p>
</blockquote>
</li>
</ul>
<p><img src="/2019/11/03/vue/vue%E4%B8%8Ehtml%E5%92%8Cjs%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="img"></p>
<ul>
<li><h4 id="vue的特点"><a href="#vue的特点" class="headerlink" title="vue的特点"></a>vue的特点</h4><ul>
<li>响应式</li>
<li><font color="red"><strong>数据驱动（使用了数据劫持和观察者模式）</strong></font></li>
<li><font color="red"><strong>组件化</strong></font></li>
<li>不支持IE8及其以下的版本</li>
<li>使用vue后，就不用再操作dom</li>
</ul>
</li>
<li><h4 id="vue框架的思路："><a href="#vue框架的思路：" class="headerlink" title="vue框架的思路："></a>vue框架的思路：</h4><ul>
<li>首先：<font color="green"><strong>一个页面包括：结构（HTML模板），表现（css样式），行为（js）</strong></font></li>
<li>其次：原生JS中的做法：写好HTML的模板和css样式，用js产生数据（逻辑），通过dom的方式控制数据显示在HTML中的那个位置，包括如何显示（DOM的方式改变样式）</li>
<li>vue框架：<ul>
<li>vue中，写好HTML模板， 并声明式地告知vuejs库，数据显示在何处</li>
<li>然后，在vue对象中处理数据，不用做DOM操作（vuejs库负责）</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="vue官网"><a href="#vue官网" class="headerlink" title="vue官网"></a><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue官网</a></h4></li>
<li><h4 id="vue库里有一个构造函数vue，用来创建vue对象"><a href="#vue库里有一个构造函数vue，用来创建vue对象" class="headerlink" title="vue库里有一个构造函数vue，用来创建vue对象"></a>vue库里有一个构造函数vue，用来创建vue对象</h4></li>
<li><h4 id="Vue-js-的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进-DOM-的系统"><a href="#Vue-js-的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进-DOM-的系统" class="headerlink" title="Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统"></a>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</h4><blockquote>
<p>声明式渲染：只需要告诉计算机，要把哪个数据显示在HTML中</p>
</blockquote>
</li>
<li><h4 id="实例化vue对象时，会明确出来："><a href="#实例化vue对象时，会明确出来：" class="headerlink" title="实例化vue对象时，会明确出来："></a>实例化vue对象时，会明确出来：</h4><ul>
<li>数据：data属性</li>
<li>方法：methods</li>
</ul>
</li>
<li><h4 id="使用vue的写法："><a href="#使用vue的写法：" class="headerlink" title="使用vue的写法："></a>使用vue的写法：</h4><ul>
<li><p>使用vue时，要在两个地方写：</p>
<ul>
<li>HTML：模板，</li>
<li>js中的vue对象：数据（要显示在模板里的直接数据（data属性），包括业务逻辑的处理（结果也是数据）)</li>
</ul>
</li>
<li><p>vuejs的数据如何呈现在页面上是vue库的事情，我们只需要告诉vue库，数据应该显示在页面的何处，然后在vue对象中处理数据</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>写代码时常用快捷键</title>
    <url>/2019/11/02/%E5%86%99%E4%BB%A3%E7%A0%81%E6%97%B6%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copyright: true</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>gitignore的过滤规则</title>
    <url>/2019/11/02/gitignore%E7%9A%84%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h4 id="一、-gitignore文件的作用"><a href="#一、-gitignore文件的作用" class="headerlink" title="一、.gitignore文件的作用"></a>一、<code>.gitignore</code>文件的作用</h4><p>如果希望一次性把所有的文件进行add。那么可以使用命名： <code>git add .</code></p>
<p>但是，有些文件不需要放入版本库，如何解决，使用 .gitignore</p>
<p>在使用git的时候，项目目录下的.gitignore文件的作用是告诉git哪些文件不需要添加到版本管理中。 </p>
<blockquote>
<p>版本管理工具，管理源代码的版本，即开发目录下程序员写的代码，而不是发布目录下的</p>
<p>哪些不需要管理版本：.git文件夹， node_modules</p>
</blockquote>
<h4 id="二、以下列出常见的规则："><a href="#二、以下列出常见的规则：" class="headerlink" title="二、以下列出常见的规则："></a>二、以下列出常见的规则：</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">.git/                   /* 过滤掉整个.git文件夹 */</span><br><span class="line"></span><br><span class="line">node_modules/          /* 过滤掉整个node_modules文件夹 */</span><br><span class="line"></span><br><span class="line">*<span class="selector-class">.css</span>                 <span class="comment">/* 过滤所有.css后缀的文件； */</span></span><br><span class="line"></span><br><span class="line">css/common.css :    /* 过滤掉具体的文件 */</span><br></pre></td></tr></table></figure>

<h4 id="三、如何产生-gitignore文件"><a href="#三、如何产生-gitignore文件" class="headerlink" title="三、如何产生 .gitignore文件"></a>三、如何产生 .gitignore文件</h4><p>使用命令： <code>touch  .gitignore</code>，在本地项目根目录下产生一个.gitignore文件，打开该文件，编辑要过滤的文件夹命令，如<code>.git/</code></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git常见命令</title>
    <url>/2019/11/02/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="一、查看、添加、提交、删除、找回，重置修改文件"><a href="#一、查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="一、查看、添加、提交、删除、找回，重置修改文件"></a>一、查看、添加、提交、删除、找回，重置修改文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git help &lt;command&gt; <span class="comment"># 显示command的help</span></span><br><span class="line"></span><br><span class="line">git show          <span class="comment"># 显示某次提交的内容 git show $id</span></span><br><span class="line"></span><br><span class="line">git co -- &lt;file&gt; <span class="comment"># 抛弃工作区修改</span></span><br><span class="line"></span><br><span class="line">git co .        <span class="comment"># 抛弃工作区修改</span></span><br><span class="line"></span><br><span class="line">git add &lt;file&gt; <span class="comment"># 将工作文件修改提交到本地暂存区</span></span><br><span class="line"></span><br><span class="line">git add .     <span class="comment"># 将所有修改过的工作文件提交暂存区</span></span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; <span class="comment"># 从版本库中删除文件</span></span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; --cached    <span class="comment"># 从版本库中删除文件，但不删除文件</span></span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt;         <span class="comment"># 从暂存区恢复到工作文件</span></span><br><span class="line"></span><br><span class="line">git reset -- .          <span class="comment"># 从暂存区恢复到工作文件</span></span><br><span class="line"></span><br><span class="line">git reset --hard       <span class="comment"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt; git ci . git ci -a    <span class="comment"># 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am "some comments"</span></span><br><span class="line"></span><br><span class="line">git ci --amend      <span class="comment"># 修改最后一次提交记录</span></span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt;   <span class="comment"># 恢复某次提交的状态，恢复动作本身也创建次提交对象</span></span><br><span class="line"></span><br><span class="line">git revert HEAD   <span class="comment"># 恢复最后一次提交的状态</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="二、查看文件diff"><a href="#二、查看文件diff" class="headerlink" title="二、查看文件diff"></a>二、查看文件diff</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git diff &lt;file&gt; <span class="comment"># 比较当前文件和暂存区文件差异 git diff</span></span><br><span class="line"></span><br><span class="line">git diff &lt;id1&gt;&lt;id1&gt;&lt;id2&gt; <span class="comment"># 比较两次提交之间的差异</span></span><br><span class="line"></span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class="comment"># 在两个分支之间比较</span></span><br><span class="line"></span><br><span class="line">git diff --staged <span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line"></span><br><span class="line">git diff --cached <span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line"></span><br><span class="line">git diff --stat <span class="comment"># 仅仅比较统计信息</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="三、查看提交记录"><a href="#三、查看提交记录" class="headerlink" title="三、查看提交记录"></a>三、查看提交记录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git log git log &lt;file&gt; <span class="comment"># 查看该文件每次提交记录</span></span><br><span class="line"></span><br><span class="line">git log -p &lt;file&gt; <span class="comment"># 查看每次详细修改内容的diff</span></span><br><span class="line"></span><br><span class="line">git log -p <span class="number">-2</span> <span class="comment"># 查看最近两次详细修改内容的diff</span></span><br><span class="line"></span><br><span class="line">git log --stat <span class="comment">#查看提交统计信息</span></span><br></pre></td></tr></table></figure>

<p><strong>tig</strong>：Mac上可以使用tig代替diff和log，<code>brew install tig</code></p>
<hr>
<h4 id="四、Git-本地分支管理"><a href="#四、Git-本地分支管理" class="headerlink" title="四、Git 本地分支管理"></a>四、Git 本地分支管理</h4><ul>
<li><h5 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">br</span> <span class="selector-tag">-r</span> # 查看远程分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">br</span> &lt;<span class="selector-tag">new_branch</span>&gt; # 创建新的分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">br</span> <span class="selector-tag">-v</span> # 查看各个分支最后提交信息</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">br</span> <span class="selector-tag">--merged</span> # 查看已经被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">br</span> <span class="selector-tag">--no-merged</span> # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">co</span> &lt;<span class="selector-tag">branch</span>&gt; # 切换到某个分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">co</span> <span class="selector-tag">-b</span> &lt;<span class="selector-tag">new_branch</span>&gt; # 创建新的分支，并且切换过去</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">co</span> <span class="selector-tag">-b</span> &lt;<span class="selector-tag">new_branch</span>&gt; &lt;<span class="selector-tag">branch</span>&gt; # 基于<span class="selector-tag">branch</span>创建新的<span class="selector-tag">new_branch</span></span><br><span class="line"></span><br><span class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line"></span><br><span class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">br</span> <span class="selector-tag">-d</span> &lt;<span class="selector-tag">branch</span>&gt; # 删除某个分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">br</span> <span class="selector-tag">-D</span> &lt;<span class="selector-tag">branch</span>&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">merge</span> &lt;<span class="selector-tag">branch</span>&gt; # 将<span class="selector-tag">branch</span>分支合并到当前分支</span><br><span class="line"></span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">rebase</span> <span class="selector-tag">master</span> &lt;<span class="selector-tag">branch</span>&gt; # 将<span class="selector-tag">master</span> <span class="selector-tag">rebase</span>到<span class="selector-tag">branch</span>，相当于： <span class="selector-tag">git</span> <span class="selector-tag">co</span> &lt;<span class="selector-tag">branch</span>&gt; &amp;&amp; <span class="selector-tag">git</span> <span class="selector-tag">rebase</span> <span class="selector-tag">master</span> &amp;&amp; <span class="selector-tag">git</span> <span class="selector-tag">co</span> <span class="selector-tag">master</span> &amp;&amp; <span class="selector-tag">git</span> <span class="selector-tag">merge</span> &lt;<span class="selector-tag">branch</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="五、Git补丁管理-方便在多台机器上开发同步时用"><a href="#五、Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="五、Git补丁管理(方便在多台机器上开发同步时用)"></a>五、Git补丁管理(方便在多台机器上开发同步时用)</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">git diff &gt; ../sync.patch # 生成补丁</span><br><span class="line"></span><br><span class="line">git apply ../sync.patch # 打补丁</span><br><span class="line"></span><br><span class="line">git apply --check ../sync.patch #测试补丁能否成功</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="六、Git暂存管理"><a href="#六、Git暂存管理" class="headerlink" title="六、Git暂存管理"></a>六、Git暂存管理</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">stash</span> # 暂存</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">stash</span> <span class="selector-tag">list</span> # 列所有<span class="selector-tag">stash</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">stash</span> <span class="selector-tag">apply</span> # 恢复暂存的内容</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">stash</span> <span class="selector-tag">drop</span> # 删除暂存区</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="七、Git远程分支管理"><a href="#七、Git远程分支管理" class="headerlink" title="七、Git远程分支管理"></a>七、Git远程分支管理</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">pull</span> # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">pull</span> <span class="selector-tag">--no-ff</span> # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">fetch</span> <span class="selector-tag">origin</span> # 抓取远程仓库更新</span><br><span class="line"></span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line"></span><br><span class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> # <span class="selector-tag">push</span>所有分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> <span class="selector-tag">master</span> # 将本地主分支推到远程主分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">-u</span> <span class="selector-tag">origin</span> <span class="selector-tag">master</span> # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> &lt;<span class="selector-tag">local_branch</span>&gt; # 创建远程分支， <span class="selector-tag">origin</span>是远程仓库名</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> &lt;<span class="selector-tag">local_branch</span>&gt;:&lt;<span class="selector-tag">remote_branch</span>&gt; # 创建远程分支</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> :&lt;<span class="selector-tag">remote_branch</span>&gt; #先删除本地分支(<span class="selector-tag">git</span> <span class="selector-tag">br</span> <span class="selector-tag">-d</span> &lt;<span class="selector-tag">branch</span>&gt;)，然后再<span class="selector-tag">push</span>删除远程分支</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="八、Git远程仓库管理"><a href="#八、Git远程仓库管理" class="headerlink" title="八、Git远程仓库管理"></a>八、Git远程仓库管理</h4><p><a href="http://blog.jobbole.com/6492/" target="_blank" rel="noopener"><em>GitHub</em></a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">remote</span> <span class="selector-tag">-v</span> # 查看远程服务器地址和仓库名称</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">remote</span> <span class="selector-tag">show</span> <span class="selector-tag">origin</span> # 查看远程服务器仓库状态</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">remote</span> <span class="selector-tag">add</span> <span class="selector-tag">origin</span> <span class="selector-tag">git</span>@ github:robbin/robbin_site.git # 添加远程仓库地址</span><br><span class="line"></span><br><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h5></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">clone</span> <span class="selector-tag">--bare</span> <span class="selector-tag">robbin_site</span> <span class="selector-tag">robbin_site</span><span class="selector-class">.git</span> # 用带版本的项目创建纯版本仓库</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">scp</span> <span class="selector-tag">-r</span> <span class="selector-tag">my_project</span><span class="selector-class">.git</span> <span class="selector-tag">git</span>@ git.csdn.net:~ # 将纯仓库上传到服务器上</span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span><br><span class="line"></span><br><span class="line">git push -u origin master # 客户端首次提交</span><br><span class="line"></span><br><span class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line"></span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br><span class="line"></span><br><span class="line">也可以命令设置跟踪远程库和本地库</span><br><span class="line"></span><br><span class="line">git branch --set-upstream master origin/master</span><br><span class="line"></span><br><span class="line">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git分支</title>
    <url>/2019/11/02/git%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<h4 id="一、clone-Repository"><a href="#一、clone-Repository" class="headerlink" title="一、clone Repository"></a>一、clone Repository</h4><p>clone Github 上的Repository，如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/siskinc/siskinc.github.io</span></span><br></pre></td></tr></table></figure>

<h4 id="二、管理分支"><a href="#二、管理分支" class="headerlink" title="二、管理分支"></a>二、管理分支</h4><ul>
<li><h4 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1. 查看分支"></a>1. <font color="green">查看分支</font></h4><ul>
<li><h5 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title=" 查看本地分支"></a><font color="blue"> 查看本地分支</font></h5><p>使用 git branch命令，如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<p>显示<code>* master</code>, <code>*</code>标识的是你当前所在的分支。</p>
<ul>
<li><h5 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a><font color="blue">查看远程分支</font></h5><p>命令如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><h5 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a><font color="blue">查看所有分支</font></h5><p>命令如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><h4 id="2-本地创建新的分支"><a href="#2-本地创建新的分支" class="headerlink" title="2. 本地创建新的分支"></a>2. <font color="green">本地创建新的分支</font></h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：（分支名为save）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-tag">save</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="3-切换到新的分支"><a href="#3-切换到新的分支" class="headerlink" title="3.切换到新的分支"></a>3.<font color="green">切换到新的分支</font></h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ git checkout save</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="4-创建-切换分支"><a href="#4-创建-切换分支" class="headerlink" title="4.创建+切换分支"></a>4.<font color="green">创建+切换分支</font></h4><p>创建分支的同时切换到该分支上，命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">-b</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p><code>git checkout -b [branch name]</code>的效果相当于以下两步操作：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-attr">[branch name]</span></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="5-把save分支的内容合并到当前分支（如：master分支）里，注：合并之前需要执行git-pull命令把更新了的仓库都克隆到本地"><a href="#5-把save分支的内容合并到当前分支（如：master分支）里，注：合并之前需要执行git-pull命令把更新了的仓库都克隆到本地" class="headerlink" title="5.把save分支的内容合并到当前分支（如：master分支）里，注：合并之前需要执行git pull命令把更新了的仓库都克隆到本地"></a>5.<font color="green">把save分支的内容合并到当前分支（如：master分支）里</font>，<font color="red">注：合并之前需要执行<code>git pull</code>命令把更新了的仓库都克隆到本地</font></h4><ol>
<li><strong>首先确保当前分支是master分支（用命令切换：<code>git checkout master</code>）</strong></li>
<li><strong>命令合并 <code>git merge dev</code></strong></li>
</ol>
</li>
<li><h4 id="6-将新分支推送到github"><a href="#6-将新分支推送到github" class="headerlink" title="6. 将新分支推送到github"></a>6. <font color="green">将新分支推送到github</font></h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> <span class="selector-attr">[branch name]</span></span><br><span class="line"><span class="comment">/* 或  */</span></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">-u</span> 项目地址名</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> <span class="selector-tag">save</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="6-删除本地分支"><a href="#6-删除本地分支" class="headerlink" title="6. 删除本地分支"></a>6. <font color="green">删除本地分支</font></h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-tag">-d</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：(注意当前分支一定不能是要删除的分支（save）)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-tag">-d</span> <span class="selector-tag">save</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="7-删除github远程分支"><a href="#7-删除github远程分支" class="headerlink" title="7. 删除github远程分支"></a>7. <font color="green">删除github远程分支</font></h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> :<span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>分支名前的冒号代表删除。<br>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">origin</span> <span class="selector-pseudo">:save</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="三、操作步骤"><a href="#三、操作步骤" class="headerlink" title="三、操作步骤"></a>三、操作步骤</h4><ol>
<li><p>clone Github 上的Repository，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">clone</span> 仓库地址名</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地创建+切换到新的分支:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">-b</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地项目里写一个.html文件，(如index.html) 然后上传到本地版本库：(注意：要在分支里进行)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span><span class="selector-class">.html</span></span><br><span class="line">git commit -m '第一个版本'</span><br></pre></td></tr></table></figure>
</li>
<li><p>将新分支推送到github：(注意：要在分支里进行)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">-u</span> 仓库地址名</span><br></pre></td></tr></table></figure>
</li>
<li><p>把分支的内容合并到当前分支（如：master分支）里：</p>
<p>① 首先确保当前分支是master分支（用命令切换：<code>git checkout master</code>）</p>
<p>② 使用<code>git pull</code>命令将远程仓库里的最新项目克隆到本地项目（很重要！！！）</p>
<p>③ 使用命令合并 <code>git merge 分支名</code></p>
</li>
<li><p>把合并之后的master分支上传到远程仓库里</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">push</span> <span class="selector-tag">-u</span> 仓库地址名 <span class="selector-tag">master</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h4 id="四、为什么要使用分支"><a href="#四、为什么要使用分支" class="headerlink" title="四、为什么要使用分支"></a>四、为什么要使用分支</h4><p>​        在开发项目的过程中使用版本控制工具，建立版本库（仓库），需要分为开发库，测试库，发布库。因为，开发人员需要不断前进完成功能，测试人员在后面紧跟测试，售后人员需要稳定版本上线。</p>
<p>举例说明：</p>
<p>如果只有一个版本库，会存在什么问题：</p>
<ul>
<li>场景1：程序员在下班时想把自己的代码，提交到版本库，但是，此代码并没有写完（开发人员自己还没有测试），如果这个时候，测试人员下载最新版本进行测试时，那么就会莫名其妙（以为，程序员提交了的功能有问题）。因为，他们是共享一个库的。开发人员只要上传了代码，测试人员立即就可以得到。如果不上传代码，那么代码就有可能会丢失。</li>
<li>场景2：程序员A修改了自己的代码，还需要等待程序员B的代码，才能一起联调功能，而此时，程序员A上传了自己的代码，测试人员得到代码后，也会莫名其妙（以为，程序员提交了一个有问题的代码）</li>
<li>由于没有明确的稳定版本（stable版本），导致上QA（测试库），上生产（发布库），只能采用增量更新，代码管理非常混乱，而且，测试人员的代码和开发人员的代码耦合度很高。</li>
</ul>
<p>解决问题：</p>
<ul>
<li><p>分支管理策略：采用适当的分支管理策略来保证开发库、测试库、发布库的隔离。有了各自的库，开发人员随时可以放心的提交自己没有写完的代码（提交的开发库，甚至自己可以有独立的开发库）而不用担心测试人员不小心拿到了还没有写完的代码。等到，开发人员都写完后（开发人员认为功能没有问题了），再把代码放到测试库里，供测试人员进行测试，这样一来，对于测试库来说，每个版本都是可以进行测试的版本；同理，测试人员测试完成认为可以上线时，才生成发布库，这样一来，发布库的每个版本都是可以发布的。即，开发库的版本数量是大于测试部版本数，测试库的版本数大于发布库的版本数，而发布库的版本就是对外开放的版本（即，用户使用的版本）。</p>
</li>
<li><p>适当引入每日编译、持续集成、Code Review（代码评审）等敏捷开发的最佳实践</p>
</li>
<li><p>采用自动化脚本完成上QA库、上发布库的部署工作，避免人工失误</p>
</li>
</ul>
<p><font color="orange"><strong>在项目开发中，经常使用的三种版本管理策略是：不稳定主干策略、稳定主干策略、敏捷发布策略。</strong></font></p>
<ul>
<li><p><strong>不稳定主干策略</strong>：使用用主干作为新功能开发主线，分支用作发布。</p>
<ul>
<li>使用用主干作为新功能开发主线，分支用作发布。</li>
<li>被广泛的应用于开源项目。</li>
<li>比较适合诸如传统软件产品的开发模式，比如微软的office等。</li>
<li>bug修改需要在各个分支中合并。</li>
<li>新代码在主干上开发，因此如果主干不能达到稳定的标准，就不可以进行发布。</li>
</ul>
</li>
<li><p>这种策略的好处是没有分支合并的工作量，因此比较简单。</p>
</li>
<li><p><strong>稳定主干策略</strong>：</p>
<ul>
<li>使用主干作为稳定版的发布。</li>
<li>bug的修改和新功能的增加，全部在分支上进行。</li>
<li>不同的修改或新功能开发以分支隔离。</li>
<li>分支上的开发和测试完毕以后才合并到主干。</li>
<li>主干上的每一次发布都做一个标签而不是分支。</li>
<li>每次发布的内容调整起来比较容易。</li>
</ul>
</li>
<li><p>缺点是分支合并所增加的成本。</p>
</li>
<li><p><strong>敏捷发布策略</strong>：</p>
<ul>
<li>敏捷开发模式的项目中广泛采用，敏捷开发的项目具有固定的发布周期。</li>
<li>为每个task建立分支。</li>
<li>为每个发布建立分支，每个周期内的task分支需要合并到发布分支发布。</li>
<li>在完成发布后，发布分支的功能合并到主干和尚在进行的任务分支中。</li>
<li>一种稳定主干策略的变体。</li>
<li>团队成员要求较高。</li>
</ul>
</li>
<li><p>建议方案：</p>
<p>此方案已稳定主干策略为主结合了一些敏捷发布策略的思路，具体实施方案如下：</p>
<ul>
<li>主干时刻处于稳定状态，随时可以发布。设SCM人员对主干代码进行管理，普通开发人员只读。</li>
<li>SCM为开发任务建立开发分支。常规的可以以小组为单位建立分支，较大的任务可以建立专门的分支。</li>
<li>在发布日，从主干复制一个测试分支，需要在本发布日发布的各开发分支向此测试分支合并。</li>
<li>对测试分支代码进行测试，出现bug在测试分支上更改，无误后发布。</li>
<li>测试分支代码发布后，合并入主干，并在主干上进行标记。</li>
<li>对紧急修复（Hotfix）的情况，可以从主干复制出测试分支，在测试分支上进行紧急修改，并在测试后发布，发布后同样将代码合并会主干，做标记。</li>
<li>Hotfix仅限于可以很快解决的小问题，如果更改时间过长，则需采用常规方法完成。</li>
<li>如果在测试分支测试过程中需要hotfix工作，则在复制一个新的测试分支进行hotfix，测试后发布。然后同时合并入原测试分支和主干，并在主干上做标记。此过程未在上图中画出。</li>
<li>测试分支发布后，开发分支可以删除；测试分支合并入主干后，测试分支可以定期删除。</li>
</ul>
</li>
</ul>
<p>方案的优缺点：</p>
<ul>
<li><p>方案优点</p>
<ul>
<li>解决了没有实施分支策略时，代码不能经常签入的问题。</li>
<li>主干代码始终处于稳定的状态随时可以发布，降低了风险。</li>
<li>可以基于一个完整的测试分支进行测试及发布，而不是以口口相传的方式增量更新。</li>
</ul>
</li>
<li><p>方案缺点：</p>
<ul>
<li>建立分支、合并分支增加了工作量。考虑实际情况，以及版本控制工具的辅助，增加的工作量应该可以接受。</li>
<li>如果某些开发分支工期跨越多个发布周期，修改过于剧烈，合并分支时可能工作量较大。可以考虑分解任务，避免过大的任务出现。</li>
<li>在同一时间最好只有一个测试分支，因此建立测试分支的权限需要限制，除hotfix场景外应当避免。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="五、分支策略"><a href="#五、分支策略" class="headerlink" title="五、分支策略"></a>五、分支策略</h4><p>​        分⽀策略 在实际开发中，我们应该按照⼏个基本原则进⾏分⽀管理： ⾸先，master分⽀应该是⾮常稳定的，也就是仅⽤来发布新版本，平时不能在上⾯干活； 那在哪干活呢？干活都在dev分⽀上，也就是说，dev分⽀是不稳定的，到某个时候，⽐如 1.0版本发布时，再把dev分⽀合并到master上，在master分⽀发布1.0版本； 你和你的⼩伙伴们每个⼈都在dev分⽀上干活，每个⼈可以都有⾃⼰的开发分⽀，时不时地往dev分 ⽀上合并就可以了。 所以，团队合作的分⽀看起来就像这样：</p>
<p><img src="/2019/11/02/git分支/1.png" alt="img"> </p>
<p>每个开发人员有自己的分支，完成后，放到dev分支。每次修改也可以临时建立一个分支，修改完成后，合并即可。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>sass安装和使用说明</title>
    <url>/2019/11/01/sass%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h4 id="一、sass的理解"><a href="#一、sass的理解" class="headerlink" title="一、sass的理解"></a>一、sass的理解</h4><blockquote>
<p>sass就是让程序员写css时，可以按照编程语言的思路写。即有了sass，写css就会简单得多。Sass是扩展了css3</p>
<p>Sass里有：变量，条件判断，循环，函数，混合，继承</p>
</blockquote>
<h4 id="二、Sass的安装"><a href="#二、Sass的安装" class="headerlink" title="二、Sass的安装"></a>二、Sass的安装</h4><ol>
<li>安装ruby语言，因为sass基于ruby，但是程序员不需要学习ruby。</li>
</ol>
<p>​      测试：<font color="green"><strong>在命令行输入 <code>gem  -v</code></strong> </font>   如果提示版本号，就说明没有问题，否则，配置环境变量。</p>
<ol start="2">
<li><p>在windows环境下：</p>
<ul>
<li><p>安装sass：<font color="green"><strong>在命令行输入：<code>gem install sass</code></strong></font></p>
<p>如果不能安装，则参见”sass安装包及来源远程服务器的配置.rar”.</p>
</li>
</ul>
<p>  [github：]: <a href="https://github.com/ErioY/sass_install-rar" target="_blank" rel="noopener">https://github.com/ErioY/sass_install-rar</a></p>
</li>
</ol>
<hr>
<h4 id="三、Sass的基本使用"><a href="#三、Sass的基本使用" class="headerlink" title="三、Sass的基本使用"></a>三、Sass的基本使用</h4><ol>
<li><h5 id="编译sass文件：-写好的sass代码，使用sass命令编译成css，就可以使用了。"><a href="#编译sass文件：-写好的sass代码，使用sass命令编译成css，就可以使用了。" class="headerlink" title="编译sass文件： 写好的sass代码，使用sass命令编译成css，就可以使用了。"></a>编译sass文件： 写好的sass代码，使用sass命令编译成css，就可以使用了。</h5><p>步骤如下：</p>
<ul>
<li><p>(1) 在项目根目录下创建demo01.scs（名称任意）</p>
</li>
<li><p>(2) 在项目根目录创建文件夹css</p>
</li>
<li><p>(3) 在demo01.scss文件里写上sass代码</p>
<p><img src="/2019/11/01/sass安装和使用说明/wps1.jpg" alt="img"> </p>
</li>
<li><p>(4) 使用sass命令编译：在命令行输入  <code>sass demo01.scss:css\index.css</code></p>
</li>
<li><p>(5) 那么，就会在项目目录下产生一个css文件。</p>
</li>
</ul>
</li>
</ol>
<p>​     <img src="/2019/11/01/sass安装和使用说明/wps2.jpg" alt="img"></p>
<h5 id="2、监听："><a href="#2、监听：" class="headerlink" title="2、监听："></a>2、监听：</h5><p>​    <font color="green"><strong>在命令行输入：<code>sass --watch .:css</code></strong></font></p>
<p>​     这句命令的意思是：监听当前目录（. 表示当前目录）下的所有sass文件，如果任何一个sass文件有改动，都会进行sass编译，产生css文件。</p>
<p><img src="/2019/11/01/sass安装和使用说明/wps3.jpg" alt="img"> </p>
<hr>
<h4 id="四、sass的语法"><a href="#四、sass的语法" class="headerlink" title="四、sass的语法"></a>四、sass的语法</h4><ol>
<li><p><font color="orange"><strong>sass 的变量</strong></font>：sass中定义变量，要求以 <code>$</code> 开头，赋值用冒号，如：<code>$baseFontSize:12px;</code>  表示定义了一个变量，名字<code>$baseFontSize</code>，赋值为12;</p>
<ul>
<li><p>(1) <font color="blue">sass定义的变量使用在属性值里：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>:<span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$baseFontSize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>(2) <font color="blue">sass变量作为类名，或者属性名，要用 <code>#{}</code> 把变量名括起来：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$direction</span>:bottom;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>-#&#123;<span class="variable">$direction</span>&#125;:<span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$baseFontSize</span>+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><font color="orange"><strong>sass 嵌套</strong></font></p>
<ul>
<li><p>(1) <font color="blue">选择器嵌套：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ul</span>&#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>(2) <font color="blue">属性嵌套：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性名嵌套</span></span><br><span class="line"><span class="selector-id">#box4</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:&#123;</span><br><span class="line">        top:<span class="number">1px</span> solid pink;</span><br><span class="line">        <span class="attribute">bottom</span>:<span class="number">2px</span> solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><font color="orange"> <strong>Sass 混合（<code>@mixin</code> <code>@include</code>）</strong></font></p>
<ul>
<li><p>(1) <font color="blue">无参混合（可以用继承替代）：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> redBox &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box5</span>&#123;</span><br><span class="line">    @<span class="keyword">include</span> redBox;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>(2) <font color="blue">带参混合：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> blueBox(<span class="variable">$w</span>:<span class="number">300px</span>,<span class="variable">$h</span>:<span class="number">250px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$h</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box7</span>&#123;</span><br><span class="line">    @<span class="keyword">include</span> blueBox(<span class="variable">$w</span>:<span class="number">310px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><font color="orange"><strong>继承（<code>@extend</code>）</strong></font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="selector-id">#box8</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box9</span>&#123;</span><br><span class="line">    @<span class="keyword">extend</span> <span class="number">#b</span>ox8;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>Sass里有数据类型和运算符，可以进行算术运算，比较运算，逻辑运算</strong></font></p>
<ul>
<li>(1)  <font color="blue">数据类型：</font><ul>
<li>数字类型： 12，12px；</li>
<li>字符串： 带双引号和不带双引号的都算，如：“hello”, hello</li>
<li>颜色：red,blue  #ff9966</li>
<li>布尔类型：true，false</li>
<li>列表类型：</li>
<li>…………………………………………</li>
</ul>
</li>
<li>(2)  <font color="blue">运算符：</font><ul>
<li>算术运算符： +  -   *  /  %</li>
<li>比较运算符： &gt;  &lt;  &gt;=  &lt;=  !=  ==</li>
<li>逻辑运算符：and  or   not</li>
</ul>
</li>
</ul>
</li>
<li><p><font color="orange"><strong>流程控制</strong></font></p>
<ul>
<li><p>(1)  <font color="blue"><code>@if</code>：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$theme</span>: dark;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    @<span class="keyword">if</span> <span class="variable">$theme</span>==<span class="string">"light"</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    &#125; @<span class="keyword">else</span> if <span class="variable">$theme</span>==<span class="string">"dark"</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: gray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>(2)  <font color="blue"><code>@for</code>：</font></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$column</span>:<span class="number">9</span>;</span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 0  to <span class="variable">$column</span> &#123;</span><br><span class="line">    <span class="selector-class">.col-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="variable">$i</span> * <span class="number">150px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>(3)  <font color="blue"><code>@each</code></font></p>
</li>
<li><p>(4)  <font color="blue"><code>@while</code></font></p>
</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制工具git</title>
    <url>/2019/11/01/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7git/</url>
    <content><![CDATA[<h4 id="一、版本控制工具的作用"><a href="#一、版本控制工具的作用" class="headerlink" title="一、版本控制工具的作用"></a>一、版本控制工具的作用</h4><ul>
<li><p>场景一：一个团队开发一个项目，指定张三疯写了一个公共的函数库 tools.js，应该分发给每个成员。李思峰在使用时，发现tools.js里的 函数 <code>fnA</code>有问题，李思峰会怎么办？改自己机子上的tools.js。接着怎么办? 发给张三疯，张三疯在分发给每个人（就害怕，李思峰忘了）</p>
</li>
<li><p>场景二：李思峰和李武峰都发现函数<code>fnA</code>有问题（但是问题又不一样），都会改，改了后怎么办？发给张三疯，以谁的为准?</p>
</li>
<li><p>场景三：前一天写的代码没有问题，第二天，增加功能时，改了前一天的代码，发现改坏了，想回到前一天的代码，没法回去了？</p>
<p><strong>…………………………………………</strong></p>
<p>版本控制工具能够有效地解决以上问题</p>
<blockquote>
<p>版本控制工具解决了多人协作开发中的文件版本问题，方便回退，对比不同版本的区别，整个项目里程碑的版本等等</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="二、版本控制工具经历的阶段"><a href="#二、版本控制工具经历的阶段" class="headerlink" title="二、版本控制工具经历的阶段"></a>二、版本控制工具经历的阶段</h4><ol>
<li><font color="orange"><strong>cvs阶段：集中式的版本控制工具</strong></font></li>
</ol>
<p><img src="/2019/11/01/版本控制工具git/wps1.jpg" alt="img"> </p>
<p>​    cvs的做法：每次上传时，会把所有文件（不管改了没改）上传，即在每一个版本里，都是项目的所有文件。这样会造成大量硬盘空间的浪费，而且效率低</p>
<p><font color="red">为了解决cvs的问题，有了svn</font></p>
<ol start="2">
<li><p><font color="orange"><strong>svn阶段</strong></font></p>
<blockquote>
<p>svn的特点是：每次上传的都是改过的，或者新加的</p>
<p>这样效率高，也节约了服务器的空间</p>
<p>现在（2019年）依然有很多公司在使用svn</p>
</blockquote>
</li>
</ol>
<p><img src="/2019/11/01/版本控制工具git/wps2.jpg" alt="img"> </p>
<ol start="3">
<li><p><font color="orange"><strong>Git阶段</strong></font></p>
<blockquote>
<p>Git是分布式版本管理工具，不管是cvs还是svn都是集中式的管理，有什么问题？集中式管理的问题？一旦服务器出问题了，版本管理就没法进行</p>
<p>分布式的管理是：每个程序员对版本的管理都在自己的本地（就是自己的硬盘），这样对于版本的管理，就不再受服务器的影响</p>
</blockquote>
</li>
</ol>
<ul>
<li>git的特点：<ul>
<li>(1) git对于不同版本内容的上传，不是以文件为单位。而是以代码行为单位，这样更加节约了服务器的空间</li>
<li>(2) git没有全局版本号</li>
<li>(3) git回退时，非常快</li>
</ul>
</li>
</ul>
<hr>
<h4 id="三、git使用："><a href="#三、git使用：" class="headerlink" title="三、git使用："></a>三、git使用：</h4><ol>
<li><p>安装</p>
</li>
<li><p>初始化<code>user.name</code>,<code>user.email</code></p>
<ul>
<li>(1) 进入git bash</li>
<li>在命令行，输入以下内容（把your Name 改成你自己的用户名）：<code>git config  --global user.name  &quot;Your Name&quot;</code></li>
<li>在命令行，输入以下内容（把<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a> 改成你自己的邮箱）：<code>git config  --global user.email  &quot;email@example.com&quot;</code></li>
</ul>
</li>
<li><p>建立远程仓库</p>
<ul>
<li><p>在github.com网站上创建账户</p>
<ul>
<li><p>进入github官网（<strong>[</strong><a href="https://github.com/**](https://github.com/)**）" target="_blank" rel="noopener">https://github.com/**](https://github.com/)**）</a></p>
</li>
<li><p>注册账号</p>
<p><img src="/2019/11/01/版本控制工具git/1.jpg" alt="img"></p>
</li>
<li><p>登录（Sign in）</p>
<p><img src="/2019/11/01/版本控制工具git/2.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>建立远程仓库</p>
<ul>
<li><p>在页面中找 “new repository”，名字叫mytaobao：<br><img src="/2019/11/01/版本控制工具git/wps3.jpg" alt="img"></p>
<p>注意：勾选Initialize this repository with a README，这样GitHub会⾃动为我们创建⼀个 README.md⽂件。创建完毕后，可以看到README.md⽂件：<img src="/2019/11/01/版本控制工具git/wps4.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>把远程仓库克隆到本地</p>
<ul>
<li><p>（1）先建立本地和远程的连接（使用ssh）</p>
<ul>
<li><p>i. 在本地创建ssh key（公钥）。</p>
<p>在git bash里输入： ssh-keygen -t rsa -C <a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>你需要把邮件地址换成你⾃⼰的邮件地址，然后⼀路回车，使⽤默认值即可.</p>
<p>在⽤户主目录下(/c/Users/Administrator/.ssh/id_rsa))，看看有没有.ssh目录，如果有，再看看这个目录下 有没有id_rsa和id_rsa.pub这两个⽂件，如果已经有了，可直接 跳到下⼀步。</p>
</li>
<li><p>ii. 在远程创建ssh key：</p>
<p>登陆GitHub，打开“Account settings”，“SSH Keys”⾯： 然后，点“Add SSH Key”，填上任意Title，在Key⽂本框⾥粘贴id_rsa.pub⽂件的内容：</p>
<p><img src="/2019/11/01/版本控制工具git/wps6.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><img src="/2019/11/01/版本控制工具git/wps5.png" alt="img"> </p>
<p><img src="/2019/11/01/版本控制工具git/wps7.png" alt="img"><img src="/2019/11/01/版本控制工具git/wps8.png" alt="img"><img src="/2019/11/01/版本控制工具git/wps9.jpg" alt="img"> </p>
<p><img src="/2019/11/01/版本控制工具git/wps10.jpg" alt="img"> </p>
<p><img src="/2019/11/01/版本控制工具git/wps11.png" alt="img"><img src="/2019/11/01/版本控制工具git/wps12.jpg" alt="img"> </p>
<p>​            点击“add SSH Key”</p>
<ul>
<li>（2）再克隆远程仓库到本地</li>
</ul>
<p>​     远程仓库地址：<code>git clone [git@github.com:tianwater/mytaobao.git](mailto:git@github.com:tianwater/mytaobao.git)</code></p>
<p>在你的当前文件夹下就会看到 mytaobao文件夹。</p>
<p>在此文件里有 .git 文件夹，这个文件夹就是本地版本库</p>
<hr>
<h5 id="现在可以在项目中使用git进行版本管理了"><a href="#现在可以在项目中使用git进行版本管理了" class="headerlink" title="现在可以在项目中使用git进行版本管理了"></a>现在可以在项目中使用git进行版本管理了</h5><ol>
<li><p>把开发的代码放在本地版本库</p>
<ul>
<li><p>（1）Git add</p>
<p>假设在项目下有个index.html文件。在 git Bash，输入：git   add   index.html</p>
</li>
<li><p>（2） Git commit(提交)</p>
<p>在git Bash里输入： git commit -m “这是新建的index.html”。其中”这是新建的index.html”只是说明或者说解释。</p>
</li>
<li><p>理解：    add和commit；</p>
<p>Add:添加；相当于打了标记（实际上是存储在了暂存区stage里），告诉git，下次提交时把该文件进行提交。</p>
<p>Commit：提交。把打过标记的（即用add进行添加的文件），一次性进行提交。即可以一次性把暂存区里的文件全部进行提交，提交了master分支（主分支）。提交完成后，暂存区里就没有文件了。</p>
</li>
</ul>
</li>
</ol>
<p><img src="/2019/11/01/版本控制工具git/wps13.jpg" alt="img"> </p>
<ol start="2">
<li><p>恢复（跳转）到某个版本的文件</p>
<ul>
<li>1）、查看所有的版本的命令：<code>git  log</code></li>
<li>2）、要恢复到上一个版本：<code>git reset  --hard   HEAD^</code></li>
<li>3）、恢复到指定版本：<code>git  reset  --hard  版本序列号</code>（可以用版本号的前七位就行）</li>
</ul>
</li>
<li><p>把本地版本库的代码放在远程库：git push -u <a href="mailto:git@github.com:tianwater/bigMi.git" target="_blank" rel="noopener">git@github.com:tianwater/mytaobao.git</a> master</p>
</li>
</ol>
<hr>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>以后，每天做的git相关工作</p>
<p>1）、<code>git add  文件名</code></p>
<p>2）、<code>git commit –m “版本描述”</code></p>
<p>3）、<code>git push -u origin master</code></p>
<p><img src="/2019/11/01/版本控制工具git/wps14.jpg" alt="img"> </p>
<hr>
<h5 id="补充：git和gulp应用于现有的项目"><a href="#补充：git和gulp应用于现有的项目" class="headerlink" title="补充：git和gulp应用于现有的项目"></a>补充：git和gulp应用于现有的项目</h5><ol>
<li>远程建立仓库（如：taobao1809），git clone到本地，并自动创建项目文件夹(taobao1809)</li>
<li>在项目文件夹中(taobao1809)，npm init，并本地安装gulp和gulp插件</li>
<li>把现有的代码（html,css,图片文件等等）拷贝到项目目录(taobao1809)下</li>
<li>编辑.gitignore文件</li>
<li>把当前项目文件夹下的所有内容（不包括node _modules文件夹等等）add到暂存区，并且commit到版本库</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp压缩工具</title>
    <url>/2019/10/27/gulp%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="gulp的理解"><a href="#gulp的理解" class="headerlink" title="gulp的理解"></a>gulp的理解</h4><ul>
<li><p>概念理解：gulp跟js没有关系，跟编写程序的功能也没有关系。跟做项目有关系，是工程化（把项目叫作工程）有关的一个工具，这个工具能干什么？</p>
</li>
<li><p>作用：</p>
<p>（1）能够完成代码的压缩</p>
<p>（2）合并，复制，监听，ES6的代码转换，启动服务器等等。</p>
</li>
</ul>
<h4 id="Gulp的使用步骤："><a href="#Gulp的使用步骤：" class="headerlink" title="Gulp的使用步骤："></a>Gulp的使用步骤：</h4><h5 id="1-搭建操作系统的环境："><a href="#1-搭建操作系统的环境：" class="headerlink" title="1. 搭建操作系统的环境："></a><strong>1. 搭建操作系统的环境</strong>：</h5><p>（1）安装nodeJS（gulp是基于nodeJS的，所以要安装nodeJS）</p>
<p>​        测试：在命令行输入：<code>node -v</code> ，能够显示版本号(version)，就说明没有问题， 如果提示:不是内部或者外部命令，则配置环境变量</p>
<p>（2）测试npm：在命令行输入：<code>npm -v</code></p>
<p>​    <font color="green"><strong>注</strong>：Npm(nodeJS Package Manager)：nodeJS的包管理工具</font></p>
<p>​    安装node的另外一个目的，是为了使用npm。npm在安装node时，已经同时安装过了</p>
<p>​    我们在开发项目时，会使用第三方的js代码，比如：jQuery等等。如果一个项目中使用的第三方js代码非常多，意味着，我们需要在不同的网站下载不同的js代码（js库），非常麻烦，而且，如果js代码之间互相有依赖，那么还需要把依赖的js下载下来。非常麻烦。</p>
<p>​     Npm把所有第三方js库收集在一起，放在npm的服务器上，这样，程序员每次下载时，统一从npm下载。而且，npm还可以管理js之间的依赖关系。</p>
<p>​    一个包就是一个js库。所以，nodeJS Package Manager就是nodeJS专门管理js库的一个工具。</p>
<p>（3）安装全局的gulp：命令行输入：<code>npm install gulp -g</code></p>
<blockquote>
<p>全局安装gulp的意思是：给整个操作系统安装gulp。跟安装qq是同样的道理，只不过，平时安装qq是用可视化的方式，而安装gulp用的是命令行的方式</p>
<p>Install：安装的意思，可以简写为i。</p>
<p>-g:表示global，全局。</p>
</blockquote>
<p>​        测试：在命令行输入:<code>gulp -v</code></p>
<h5 id="2-搭建项目环境（本地安装gulp）："><a href="#2-搭建项目环境（本地安装gulp）：" class="headerlink" title="2. 搭建项目环境（本地安装gulp）："></a><strong>2. 搭建项目环境（本地安装gulp）</strong>：</h5><p>（1）建立项目文件夹：</p>
<blockquote>
<p> 从盘符到项目文件夹中间，任何一级都不要有中文，项目名也不要用中文，项目名不要用“gulp”。</p>
<p>如： d:\我的\prj  这不行；  </p>
<p>​          d:\my\项目 这也不行；</p>
<p>​          d:\my\gulp  这也不行</p>
</blockquote>
<p>（2）打开命令行，并且把命令行的路径切换到项目目录下</p>
<blockquote>
<p> 快速的方式：</p>
<p>​     在windows操作系统中，进入我的电脑，进入我的项目目录，在地址栏输入cmd，就行了。</p>
<p>​     假如，我的项目在d:\gulpprj。</p>
<p>​     在windows操作系统中，进入我的电脑，进入我的项目目录，如下：</p>
</blockquote>
<p>​    </p>
<p><img src="/2019/10/27/gulp压缩工具/wps17.jpg" alt="img"> </p>
<blockquote>
<p>在地址栏输入cmd，</p>
</blockquote>
<p><img src="/2019/10/27/gulp压缩工具/wps18.jpg" alt="img"> </p>
<blockquote>
<p>回车，</p>
</blockquote>
<p><img src="/2019/10/27/gulp压缩工具/wps19.jpg" alt="img"> </p>
<p>（3）生成<code>package.json</code>文件</p>
<p>​     在命令行里（把命令行的当前目录切换到项目目录下），运行 <code>npm init</code>。</p>
<p>​    假如，项目目录是 d:\gulpprj 。那么如下图所示：</p>
<p><img src="/2019/10/27/gulp压缩工具/wps20.jpg" alt="img"> </p>
<p>​    然后，一路回车。</p>
<p><img src="/2019/10/27/gulp压缩工具/wps21.jpg" alt="img"> 此时，在项目目录下就会有一个文件:<code>package.json</code></p>
<p><img src="/2019/10/27/gulp压缩工具/wps22.jpg" alt="img"> </p>
<p><code>Package.json</code>的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"gulpprj"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）本地安装gulp</p>
<p>​    即，在项目目录下安装gulp。</p>
<p>​    在命令行里（把命令行的当前目录切换到项目目录下），</p>
<p>​    运行：<code>npm  install  gulp --save-dev</code></p>
<p>​    安装成功，如下画面：</p>
<p><img src="/2019/10/27/gulp压缩工具/wps23.jpg" alt="img"> </p>
<p>表示，安装了gulp的4.0.2版本，一共安装了314个包。</p>
<p>安装成功后，在项目目录下，就会有一个 “node_modules”文件夹</p>
<h5 id="3-在项目中使用gulp："><a href="#3-在项目中使用gulp：" class="headerlink" title="3. 在项目中使用gulp："></a>3. 在项目中使用gulp：</h5><p>（1）在项目目录下建立文件 “gulpfile.js”（此文件名不能乱写），记住：这个文件一定是放在项目根目录下。不要放在项目的其它子文件里，文件名就是“gulpfile.js”，不要乱起。</p>
<p>（2）在gulpfile.js里实现功能：</p>
<p>① 复制文件：</p>
<p>const gulp = require(“gulp”);</p>
<p>// require(“gulp”); 相当于在html的 <script src="gulp.js"></script></p>
<p>// require(“gulp”); 是用js文件引入的js文件，这是模块化的做法。</p>
<p>//写一个复制文件的任务</p>
<p>gulp.task(“copy-html”,async ()=&gt;{</p>
<p>​    //以下表示，把当前目录下的index.html文件拷贝至当前目录下的dist目录下。</p>
<p>​    gulp.src(“index.html”)</p>
<p>​    .pipe(gulp.dest(“dist”));</p>
<p>});</p>
<p><img src="/2019/10/27/gulp压缩工具/wps24.jpg" alt="img"> </p>
<p>② 增加监听文件：（随时监视某个文件是否改变，如果改变则执行相应的任务）</p>
<p>使用watch：gulp.task(“watchall”, async function() {</p>
<p>// 监听Index.html文件的变化。如果index.html文件变化了，则执行后面的回调函数</p>
<p>gulp.watch(“”, );</p>
<p>})</p>
<p>③ 压缩js文件：</p>
<p>Gulp本身只能完成复制文件，监听文件等简单功能，如果要完成更多的功能，gulp提供很多接口，可以使用插件</p>
<p>压缩js文件，就需要 gulp-uglify 插件。</p>
<p>安装 gulp-uglify 插件： npm install gulp-uglify –save-dev</p>
<p>④ 合并js</p>
<p>使用gulp-concat 插件，把若干个小js文件合并成一个大的js文件，可以减少http的请求（提高项目的性能）。</p>
<p>安装：    npm install gulp-concat –save-dev</p>
<p>⑤ 重命名</p>
<p>使用gulp-rename 插件</p>
<p>安装：    npm install gulp-rename –save-dev</p>
<p>⑥ 压缩css</p>
<p>Gulp-minify-css </p>
<p>安装：    npm install gulp-minify-css  –save-dev</p>
<p>⑦ 编译sass</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>jsonp</title>
    <url>/2019/10/27/jsonp/</url>
    <content><![CDATA[<h5 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h5><blockquote>
<p>跨域就是跨域名访问，即A网站的网页从B网站的服务器获取数据</p>
</blockquote>
<p>跨域的需求：</p>
<ul>
<li>气象数据（从气象台获取数据）</li>
<li>地图数据（从高德地图、百度地图等获取）</li>
</ul>
<h5 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h5><blockquote>
<p>同源：来自同一个服务器，具体到：同样的协议，同样的域名，同样的端口号，如：<a href="http://www.163.com:80（默认端口号是80）" target="_blank" rel="noopener">http://www.163.com:80（默认端口号是80）</a></p>
<p>浏览器因为同源策略，会限制不能跨域，这是浏览器的安全机制</p>
</blockquote>
<p>总结：跨域需求有，但是浏览器又不允许跨域，如何跨域？</p>
<p>常见的跨域有：<code>xhr2</code>、<code>iframe</code>、<code>jsonp</code></p>
<h5 id="jsonp-json-with-padding"><a href="#jsonp-json-with-padding" class="headerlink" title="jsonp(json with padding)"></a>jsonp(json with padding)</h5><blockquote>
<p>jsonp的核心是利用HTML标签的src属性（src属性天生就能跨域）</p>
</blockquote>
<h5 id="面试题：jsonp和json的区别：两者没有一点联系，只是名字有点像"><a href="#面试题：jsonp和json的区别：两者没有一点联系，只是名字有点像" class="headerlink" title="面试题：jsonp和json的区别：两者没有一点联系，只是名字有点像"></a><font color=" red">面试题：jsonp和json的区别：两者没有一点联系，只是名字有点像</font></h5><ul>
<li><blockquote>
<p><code>json</code>：描述数据的一种格式</p>
<p><code>jsonp</code>：跨域访问的技巧</p>
</blockquote>
</li>
</ul>
<h5 id="面试题：jsonp是不是属于ajax？"><a href="#面试题：jsonp是不是属于ajax？" class="headerlink" title="面试题：jsonp是不是属于ajax？"></a><font color=" red">面试题：jsonp是不是属于ajax？</font></h5><ul>
<li><p>问这个题的原因：</p>
<ul>
<li><p>jsonp和ajax都是从后端获取数据的</p>
</li>
<li><p>很多框架（如jquery）会把jsonp和ajax放在一起，所以，主要考察是否懂原生js</p>
<p>jquery的ajax：</p>
</li>
</ul>
</li>
<li><p>jsonp不是ajax，因为jsonp中并没有使用ajax的核心对象是XMLHttpRequest，jsonp并不是一门新技术，而是一种技巧</p>
</li>
<li><p>jsonp还有一个特点：只能用<code>get</code>方式</p>
</li>
</ul>
<hr>
<h5 id="跨域访问例子"><a href="#跨域访问例子" class="headerlink" title="跨域访问例子"></a>跨域访问例子</h5><h5 id="（1）访问指定服务器的数据"><a href="#（1）访问指定服务器的数据" class="headerlink" title="（1）访问指定服务器的数据"></a>（1）访问指定服务器的数据</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"hi:"</span>+str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击按钮时显示指定服务器的数据，服务器ip地址：192.168.43.149（注意：需要连同一个局域网，对方需要打开Apache）</span></span><br><span class="line">$(<span class="string">"#btn01"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//动态创建script标签</span></span><br><span class="line">    <span class="keyword">let</span> scriptDom = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    <span class="comment">// 跨域访问其他电脑的文件</span></span><br><span class="line">    scriptDom.src = <span class="string">'http://192.168.43.149/191027.txt/test.php?callback=fn1'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.append(scriptDom);</span><br><span class="line">    <span class="comment">// 点击完毕后删除标签，以防冗余</span></span><br><span class="line">    scriptDom.remove();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="（2）获取淘宝搜索关键字"><a href="#（2）获取淘宝搜索关键字" class="headerlink" title="（2）获取淘宝搜索关键字"></a>（2）获取淘宝搜索关键字</h5><h5 id="1-接口文档：（4个）"><a href="#1-接口文档：（4个）" class="headerlink" title="1. 接口文档：（4个）"></a>1. 接口文档：（4个）</h5><ul>
<li><p>请求方式：<code>get</code></p>
</li>
<li><p>请求地址：</p>
</li>
<li><p>请求参数：</p>
<ul>
<li><code>q</code>：搜索的关键字</li>
<li><code>callback</code>：回调函数</li>
</ul>
</li>
<li><p>返回数据的格式：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用jquery</span></span><br><span class="line"><span class="comment">// 获取搜索文本框</span></span><br><span class="line"><span class="keyword">let</span> queryStr = $(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">let</span> $ul =</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="回调地狱：层层回调"><a href="#回调地狱：层层回调" class="headerlink" title="回调地狱：层层回调"></a>回调地狱：层层回调</h5><p>使用Promise写法：</p>
<blockquote>
<p><code>Promise</code>是ES6中新增的一个原生（js）的对象，和Date，Array是一样的</p>
<p><code>Promise</code>对象是一个异步的对象，解决的是层层回调的问题</p>
</blockquote>
<ul>
<li><p>用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// resolve: 是一个函数，是异步操作成功时，调用的函数</span></span><br><span class="line">    <span class="comment">// reject：是一个函数，是异步操作失败时，调用的函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法：<code>then()</code></p>
<blockquote>
<p><code>then()</code>方法有两个参数：<code>resolve</code> 和 <code>reject</code> 的实参</p>
<p><code>then()</code>方法的返回值是它里面回调函数里返回的promise对象</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn1开始"</span>);</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"fn1的异步操作也执行完毕了！"</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn1结束"</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn2开始"</span>);</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"fn2的异步操作也执行完毕了！"</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn2结束"</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn3开始"</span>);</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">// 里面放异步操作代码</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"fn3的异步操作也执行完毕了！"</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn3结束"</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn4开始"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn4结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// then()里面的实参传到resolve，先执行fn1，然后执行fn2，以此类推</span></span><br><span class="line">fn1().then(fn2).then(fn3).then(fn4);</span><br></pre></td></tr></table></figure>

<ul>
<li>用<code>promise</code>封装ajax</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>事件防抖</title>
    <url>/2019/10/20/%E4%BA%8B%E4%BB%B6%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>win10常用键盘快捷键</title>
    <url>/2019/10/20/win10%E5%B8%B8%E7%94%A8%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>• Win + A：打开操作中心；</p>
<h5 id="•-Win-B：将焦点转移到任务栏通知区域，之后你可以通过左右方向键选择项目，按回车打开；"><a href="#•-Win-B：将焦点转移到任务栏通知区域，之后你可以通过左右方向键选择项目，按回车打开；" class="headerlink" title="• Win + B：将焦点转移到任务栏通知区域，之后你可以通过左右方向键选择项目，按回车打开；"></a>• Win + B：将焦点转移到任务栏通知区域，之后你可以通过左右方向键选择项目，按回车打开；</h5><p>• Win + Shift + C：打开Cortana微软小娜，并开始聆听……</p>
<h5 id="•-Win-D：显示桌面，重复按下可还原窗口；"><a href="#•-Win-D：显示桌面，重复按下可还原窗口；" class="headerlink" title="• Win + D：显示桌面，重复按下可还原窗口；"></a>• Win + D：显示桌面，重复按下可还原窗口；</h5><h5 id="•-Win-E：打开资源管理器窗口；"><a href="#•-Win-E：打开资源管理器窗口；" class="headerlink" title="• Win + E：打开资源管理器窗口；"></a>• Win + E：打开资源管理器窗口；</h5><p>• Win + Ctrl + F：打开查找计算机窗口；</p>
<p>• Win + G：打开游戏录制工具；</p>
<p>• Win + Alt + R：开始录制游戏；</p>
<p>• Win + Alt + G：录制游戏最近30秒；</p>
<p>• Win + Alt + PrintScreen：对游戏进行截屏；</p>
<p>• Win + Alt + T：显示或隐藏录制时间计时器；</p>
<p>• Win + H：为当前应用打开共享菜单；</p>
<p>• Win + I：打开设置应用；</p>
<p>• Win + K：打开连接弹窗；</p>
<p>• Win + L：锁定电脑；</p>
<p>• Win + M：最小化所有窗口，Win + Shift + H用于取消最小化所有窗口；</p>
<p>• Win + O：打开或关闭屏幕旋转锁定（针对平板类设备）；</p>
<p>• Win + P：打开投影，可用于复制、扩展显示屏幕；</p>
<p>• Win + Q：打开Cortana；</p>
<p>• Win + R：打开运行；</p>
<p>• Win + S：打开Cortana；</p>
<p>• Win + T：将焦点切换到任务栏图标，并在图标之间进行切换；</p>
<p>• Win + U：打开轻松使用设置中心；</p>
<p>• Win + W：打开Windows Ink</p>
<p>• Win + X：打开开始按钮右键菜单；</p>
<p>• Win + Z：对于老款Modern应用，打开底部菜单；</p>
<p>• Win + 数字键：打开或切换到任务栏上对应位置的应用或程序；</p>
<p>• Win + Alt + 数字键：打开任务栏上对应位置应用或程序的跳转列表；</p>
<p>• Win + 加号：打开放大镜并放大屏幕内容；</p>
<p>• Win + 减号：打开放大镜并缩小屏幕内容；</p>
<p>• Win + Esc：在放大镜打开的情况下，退出放大镜；</p>
<p>• Win + F1：打开帮助和支持，在Win10下会打开浏览器，提示获取帮助方法；</p>
<p>• Win + Pause：打开系统属性；</p>
<p>• Win + Print Screen：截屏并保存到用户图片文件夹下；</p>
<p>• Win + Home：相当于拖动活动窗口摇晃，即Aero Shake，除了当前窗口，将其他窗口最小化；</p>
<p>• Win+上/下：使应用窗口在最大化，正常状态以及最小化之间进行切换；</p>
<p>• Win+左/右：使应用窗口在占据左/右半边屏幕以及正常状态之间进行切换；</p>
<p>• Win+左/右 &gt; Win+上/下：使应用窗口占据屏幕四个角落1/4的屏幕区域；</p>
<p>• Win+空格：切换输入法 ；</p>
<p>• Win+逗号：启动Aero Peek，窥探桌面 ；</p>
<p>• Win+Tab：显示所有已打开的应用和桌面；</p>
<p>• Win+Ctrl+D：新建桌面；</p>
<p>• Win+Ctrl+F4：关闭正在使用的桌面；</p>
<p>• Win+Ctrl+左/右：在已打开的桌面之间进行切换；</p>
<p>• Win+ Shift +左/右：将应用窗口移动到左边或右边的显示器中；</p>
<p>• Win+ Shift +上：在垂直方向最大化窗口。</p>
<p>​    Shift+Alt+Enter: 切换全屏编辑　　</p>
<p>　　Ctrl+B,T / Ctrl+K,K: 切换书签开关</p>
<p>　　Ctrl+B,N / Ctrl+K,N: 移动到下一书签</p>
<p>　　Ctrl+B,P: 移动到上一书签</p>
<p>　　Ctrl+B,C: 清除全部标签　　</p>
<p>　　Ctrl+I: 渐进式搜索</p>
<p>　　Ctrl+Shift+I: 反向渐进式搜索</p>
<p>　　Ctrl+F: 查找</p>
<p>　　Ctrl+Shift+F: 在文件中查找</p>
<p>　　F3: 查找下一个</p>
<p>　　Shift+F3: 查找上一个</p>
<p>　　Ctrl+H: 替换</p>
<p>　　Ctrl+Shift+H: 在文件中替换</p>
<p>　　Alt+F12: 查找符号(列出所有查找结果)　　</p>
<p>　　Ctrl+Shift+V: 剪贴板循环　　</p>
<p>　　Ctrl+左右箭头键: 一次可以移动一个单词</p>
<p>　　Ctrl+上下箭头键: 滚动代码屏幕，但不移动光标位置。</p>
<p>　　Ctrl+Shift+L: 删除当前行</p>
<p>　　Ctrl+M,M: 隐藏或展开当前嵌套的折叠状态</p>
<p>　　Ctrl+M,L: 将所有过程设置为相同的隐藏或展开状态</p>
<p>　　Ctrl+M,P: 停止大纲显示</p>
<p>　　Ctrl+E,S: 查看空白</p>
<p>　　Ctrl+E,W: 自动换行</p>
<p>　　Ctrl+G: 转到指定行</p>
<p>　　Shift+Alt+箭头键: 选择矩形文本</p>
<p>　　Alt+鼠标左按钮: 选择矩形文本　　</p>
<p>　　Ctrl+Shift+U: 全部变为大写</p>
<p>　　Ctrl+U: 全部变为小写</p>
<p>代码快捷键　　</p>
<p>　　Ctrl+J / Ctrl+K,L: 列出成员</p>
<p>　　Ctrl+Shift+空格键 / Ctrl+K,P: 参数信息</p>
<p>　　Ctrl+K,I: 快速信息　　</p>
<p>　　Ctrl+E,C / Ctrl+K,C: 注释选定内容</p>
<p>　　Ctrl+E,U / Ctrl+K,U: 取消选定注释内容　　</p>
<p>　　Ctrl+K,M: 生成方法存根</p>
<p>　　Ctrl+K,X: 插入代码段</p>
<p>　　Ctrl+K,S: 插入外侧代码　　</p>
<p>　　F12: 转到所调用过程或变量的定义　　</p>
<p>　<strong>窗口快捷键</strong>　　</p>
<p>　　Ctrl+W,W: 浏览器窗口</p>
<p>　　Ctrl+W,S: 解决方案管理器</p>
<p>　　Ctrl+W,C: 类视图</p>
<p>　　Ctrl+W,E: 错误列表</p>
<p>　　Ctrl+W,O: 输出视图</p>
<p>　　Ctrl+W,P: 属性窗口</p>
<p>　　Ctrl+W,T: 任务列表</p>
<p>　　Ctrl+W,X: 工具箱</p>
<p>　　Ctrl+W,B: 书签窗口</p>
<p>　　Ctrl+W,U: 文档大纲　　</p>
<p>　　Ctrl+D,B: 断点窗口</p>
<p>　　Ctrl+D,I: 即时窗口　　</p>
<p>　　Ctrl+Tab: 活动窗体切换　　</p>
<p>　　Ctrl+Shift+N: 新建项目</p>
<p>　　Ctrl+Shift+O: 打开项目</p>
<p>　　Ctrl+Shift+S: 全部保存</p>
<p>　　Shift+Alt+C: 新建类</p>
<p>​        Ctrl+Shift+A: 新建项  </p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>js面向对象</title>
    <url>/2019/10/19/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ul>
<li><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4></li>
</ul>
<hr>
<ul>
<li><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><blockquote>
<p>插上去就能使用的东西</p>
<p>用面向对象封装的一个类，其实就是一个插件</p>
<p>任何地方需要改插件时，只需要new就行了</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li><h4 id="圆周运动"><a href="#圆周运动" class="headerlink" title="圆周运动"></a>圆周运动</h4><blockquote>
<p>首先明确中心点和半径</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li><h4 id="抛物线运动"><a href="#抛物线运动" class="headerlink" title="抛物线运动"></a>抛物线运动</h4><blockquote>
<p>经过坐标原点的右开口的抛物线公式：y^2 = 2px</p>
<p>经过坐标原点的下开口的抛物线公式：x^2 = 2py</p>
</blockquote>
<h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><ul>
<li><p>定义起点和终点</p>
</li>
<li><p>用对应公式计算p的值，此时起点不一定是原点，需要将起点移到原点处，即移动终点，起点也跟着移动</p>
</li>
<li><p>开启定时器</p>
</li>
<li><p>数据处理：</p>
<ol>
<li><p>计算数据：使横坐标x(或纵坐标y)累加，用对应公式计算</p>
<p>纵坐标y(或横坐标x)的值</p>
</li>
<li><p>边界处理：当超出起点坐标和终点坐标(x2 - x1)之差时，关闭定时器</p>
</li>
</ol>
</li>
<li><p>外观处理：给做抛物线的物体赋<code>left</code>和<code>top</code>值：</p>
<p><code>left</code>的值为改变后的x值加上起始点的横坐标值</p>
<p><code>top</code>的值为改变后的y值加上起始点的纵坐标值</p>
</li>
</ul>
<p><font size="4" color="gree">eg: 购物车的抛物线</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>购物车的抛物线<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#ball</span> &#123;</span></span><br><span class="line">                position: absolute;</span><br><span class="line">                left: 0px;</span><br><span class="line">                top: 0px; </span><br><span class="line">                width: 20px;</span><br><span class="line">                height: 20px;</span><br><span class="line">                background-color: green;</span><br><span class="line">                opacity: 0;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#startBox</span> &#123;</span></span><br><span class="line">                position: absolute;</span><br><span class="line">                left: 0px;</span><br><span class="line">                top: 0px; </span><br><span class="line">                width: 10px;</span><br><span class="line">                height: 10px;</span><br><span class="line">                background-color: red;</span><br><span class="line">                border-radius: 50%; </span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#endBox</span>&#123;</span></span><br><span class="line">                position: absolute;</span><br><span class="line">                bottom: 10px;</span><br><span class="line">                right: 10px;</span><br><span class="line">                width: 50px;</span><br><span class="line">                height: 50px;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-id">#000</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#sum</span> &#123;</span></span><br><span class="line">                position: absolute;</span><br><span class="line">                bottom: 64px;</span><br><span class="line">                right: 10px;</span><br><span class="line">                width: 50px;</span><br><span class="line">                height: 10px;</span><br><span class="line">                text-align: center;</span><br><span class="line">                line-height: 10px;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"  加入购物车 "</span> <span class="attr">id</span>=<span class="string">"btnGo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"startBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sum"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"endBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// x^2 = 2py; //经过坐标中心的下开口的抛物线公式  </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// y^2 = 2px; //经过坐标中心点的右开口的抛物线公式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">pao</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#ball"</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义起点和终点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> x1 = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> y1 = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> x2 = $(<span class="string">"#endBox"</span>).offset().left + $(<span class="string">"#endBox"</span>).outerWidth() / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> y2 = $(<span class="string">"#endBox"</span>).offset().top + $(<span class="string">"#endBox"</span>).outerHeight() / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 计算 p的值，需要将起点移到原点处，即移动终点，起点也跟着移动</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> xEnd = x2-x1;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> yEnd = y2-y1;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> p =  yEnd * yEnd / (<span class="number">2</span> * xEnd); <span class="comment">// 计算p值;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> x = <span class="number">0</span>; <span class="comment">// 横坐标</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> myTimer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 一、数据处理</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1、计算数据</span></span></span><br><span class="line">            x++;</span><br><span class="line"><span class="javascript">            y = <span class="built_in">Math</span>.sqrt(<span class="number">2</span> * p * x); <span class="comment">// 计算纵坐标</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2、边界处理</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (x &gt;= x2-x1) &#123;</span></span><br><span class="line">                clearInterval(myTimer);</span><br><span class="line"><span class="javascript">                $(<span class="string">"#sum"</span>).html(++sum);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#ball"</span>).css(<span class="string">"opacity"</span>, <span class="number">0</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 二、外观处理</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#ball"</span>).css(&#123;</span></span><br><span class="line">                left:x+x1,</span><br><span class="line">                top:y+y1</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;,5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btnGo"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            pao();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN-鸢尾花数据集</title>
    <url>/2019/10/12/KNN-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<ul>
<li><h4 id="题目名称"><a href="#题目名称" class="headerlink" title="题目名称"></a>题目名称</h4><p>repo: <a href="mailto:git@140.143.193.41" target="_blank" rel="noopener">git@140.143.193.41</a>:/home/git/blog.git</p>
<p>knn算法 —— 鸢尾花分类</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>​       一个样本与数据集中的k个样本最相似，如果这k个样本中的大多数属于某一个类别，则该样本也属于这个类别</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h4><h5 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1. 读取文件"></a>1. 读取文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'Iris_Data.csv'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    reader = csv.DictReader(file)</span><br><span class="line">    data = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br></pre></td></tr></table></figure>

<h5 id="2-打乱数据集顺序并把数据集分为训练集和测试集"><a href="#2-打乱数据集顺序并把数据集分为训练集和测试集" class="headerlink" title="2. 打乱数据集顺序并把数据集分为训练集和测试集"></a>2. 打乱数据集顺序并把数据集分为训练集和测试集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.shuffle(data)  <span class="comment"># 打乱数据集顺序</span></span><br><span class="line">test_data = data[<span class="number">0</span>:<span class="number">30</span>]  <span class="comment"># 测试集取前30个</span></span><br><span class="line">train_data = data[<span class="number">30</span>:]  <span class="comment"># 训练集取后120个</span></span><br></pre></td></tr></table></figure>

<h5 id="3-计算测试集中每组数据与数据集中所有数据的距离"><a href="#3-计算测试集中每组数据与数据集中所有数据的距离" class="headerlink" title="3. 计算测试集中每组数据与数据集中所有数据的距离"></a>3. 计算测试集中每组数据与数据集中所有数据的距离</h5><p>&emsp;&emsp;计算距离的方法是欧式距离：<img src="/2019/10/12/KNN-鸢尾花数据集/%E5%85%AC%E5%BC%8F.png" alt="公式"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(one, two)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    list = [<span class="string">"sepal_length"</span>, <span class="string">"sepal_width"</span>, <span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>]</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> list:</span><br><span class="line">        res += (float(one[key]) - float(two[key])) ** <span class="number">2</span>  <span class="comment"># 训练集每一行数据的特征值分别与测试集计算距离并累加</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(res)</span><br></pre></td></tr></table></figure>

<h5 id="4-按距离大小升序排序并取前-K个距离最近的数据"><a href="#4-按距离大小升序排序并取前-K个距离最近的数据" class="headerlink" title="4. 按距离大小升序排序并取前 K个距离最近的数据"></a>4. 按距离大小升序排序并取前 K个距离最近的数据</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = sorted(res, key=<span class="keyword">lambda</span> item: item[<span class="string">'distance'</span>])</span><br><span class="line">kSum = res[<span class="number">0</span>:K]</span><br></pre></td></tr></table></figure>

<h5 id="5-遍历前-K个数据，将他们的距离累加"><a href="#5-遍历前-K个数据，将他们的距离累加" class="headerlink" title="5. 遍历前 K个数据，将他们的距离累加"></a>5. 遍历前 K个数据，将他们的距离累加</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> kSum:</span><br><span class="line">    weight_sum += i[<span class="string">'distance'</span>]</span><br></pre></td></tr></table></figure>

<h5 id="6-定义一个种类和权重的字典，遍历前-K个数据，计算每一个数据距离所占权重，存到该字典中"><a href="#6-定义一个种类和权重的字典，遍历前-K个数据，计算每一个数据距离所占权重，存到该字典中" class="headerlink" title="6. 定义一个种类和权重的字典，遍历前 K个数据，计算每一个数据距离所占权重，存到该字典中"></a>6. 定义一个种类和权重的字典，遍历前 K个数据，计算每一个数据距离所占权重，存到该字典中</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = &#123;</span><br><span class="line">    <span class="string">'Iris-setosa'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'Iris-versicolor'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'Iris-virginica'</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> kSum:</span><br><span class="line">    result[i[<span class="string">'train_species'</span>]] += <span class="number">1</span> - i[<span class="string">'distance'</span>] / weight_sum</span><br></pre></td></tr></table></figure>

<h5 id="7-判断哪个种类占的权重大，即将这个测试集归为此类"><a href="#7-判断哪个种类占的权重大，即将这个测试集归为此类" class="headerlink" title="7. 判断哪个种类占的权重大，即将这个测试集归为此类"></a>7. 判断哪个种类占的权重大，即将这个测试集归为此类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> result[<span class="string">'Iris-setosa'</span>] &gt; result[<span class="string">'Iris-versicolor'</span>] <span class="keyword">and</span> result[<span class="string">'Iris-setosa'</span>] &gt; result[<span class="string">'Iris-virginica'</span>]:</span><br><span class="line">    predict = <span class="string">'Iris-setosa'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result[<span class="string">'Iris-versicolor'</span>] &gt; result[<span class="string">'Iris-setosa'</span>] <span class="keyword">and</span> result[<span class="string">'Iris-versicolor'</span>] &gt; result[<span class="string">'Iris-virginica'</span>]:</span><br><span class="line">	predict = <span class="string">'Iris-versicolor'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result[<span class="string">'Iris-virginica'</span>] &gt; result[<span class="string">'Iris-setosa'</span>] <span class="keyword">and</span> result[<span class="string">'Iris-virginica'</span>] &gt; result[<span class="string">'Iris-versicolor'</span>]:</span><br><span class="line">	predict = <span class="string">'Iris-virginica'</span></span><br></pre></td></tr></table></figure>

<h5 id="8-判断真实种类和预测是否一致，若一致则准确个数累加"><a href="#8-判断真实种类和预测是否一致，若一致则准确个数累加" class="headerlink" title="8. 判断真实种类和预测是否一致，若一致则准确个数累加"></a>8. 判断真实种类和预测是否一致，若一致则准确个数累加</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> species == predict:</span><br><span class="line">    sum += <span class="number">1</span>  <span class="comment"># 准确个数累加</span></span><br></pre></td></tr></table></figure>

<h5 id="9-计算准确率，保留小数点后两位小数"><a href="#9-计算准确率，保留小数点后两位小数" class="headerlink" title="9. 计算准确率，保留小数点后两位小数"></a>9. 计算准确率，保留小数点后两位小数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_len = len(test_data)</span><br><span class="line">print(<span class="string">"准确率：&#123;:.2f&#125;%"</span>.format(<span class="number">100</span> * sum / test_len))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="调试截图"><a href="#调试截图" class="headerlink" title="调试截图"></a>调试截图</h4><h5 id="1-训练集："><a href="#1-训练集：" class="headerlink" title="1. 训练集："></a>1. 训练集：</h5><p><img src="/2019/10/12/KNN-鸢尾花数据集/train_data.png" alt="train_data"></p>
<h5 id="2-测试集："><a href="#2-测试集：" class="headerlink" title="2. 测试集："></a>2. 测试集：</h5><p><img src="/2019/10/12/KNN-鸢尾花数据集/test_data.png" alt="test_data"></p>
<h5 id="3-准确项："><a href="#3-准确项：" class="headerlink" title="3.  准确项："></a>3.  准确项：</h5><blockquote>
<p>该行测试集数据的真实种类为：<code>Iris-virginica</code></p>
<p>计算的权重大小为：<code>Iris-virginica</code> &gt; <code>Iris-versicolor</code> &gt; <code>Iris-setosa</code>，所以预测这行测试集数据的种类是<code>Iris-virginica</code></p>
<p>预测结果和真实种类相同</p>
</blockquote>
<p><img src="/2019/10/12/KNN-鸢尾花数据集/%E5%87%86%E7%A1%AE%E9%A1%B9.png" alt="准确项"></p>
<h5 id="4-误差项："><a href="#4-误差项：" class="headerlink" title="4. 误差项："></a>4. 误差项：</h5><blockquote>
<p>该行测试集数据的真实种类为：<code>Iris-versicolor</code></p>
<p>但计算的权重大小为：<code>Iris-virginica</code> &gt; <code>Iris-versicolor</code> &gt; <code>Iris-setosa</code>，所以预测这行测试集数据的种类是<code>Iris-virginica</code></p>
<p>预测结果和真实种类不同，出现误差</p>
</blockquote>
<p><img src="/2019/10/12/KNN-鸢尾花数据集/%E8%AF%AF%E5%B7%AE%E9%A1%B9.png" alt="误差项"></p>
<h5 id="5-调试结果"><a href="#5-调试结果" class="headerlink" title="5. 调试结果"></a>5. 调试结果</h5><blockquote>
<p>K的取值为5的时候</p>
<p>预测的准确个数sum为 28</p>
<p>测试集长度test_len为 30</p>
<p>所以准确率为 (sum / test_len) * 100% = (28 / 30)  * 100% = 93.33%</p>
</blockquote>
<p><img src="/2019/10/12/KNN-鸢尾花数据集/result_1.png" alt="result_1"></p>
<blockquote>
<p>准确率：</p>
</blockquote>
<p><img src="/2019/10/12/KNN-鸢尾花数据集/result_2.png" alt="result_2"></p>
</li>
</ul>
<ul>
<li><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><blockquote>
<p>输入 K的值为6时的准确率为96.67%</p>
</blockquote>
<p><img src="/2019/10/12/KNN-鸢尾花数据集/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果"></p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h4><ul>
<li><h5 id="K值选取"><a href="#K值选取" class="headerlink" title="K值选取"></a>K值选取</h5></li>
</ul>
<p>​       knn算法是最简单易懂的机器学习算法， 但是在设置K值时需要注意，K值设置过小会降低分类精度；若设置过大，且测试样本属于训练集中包含数据较少的类，则会增加噪声，降低分类效果。在鸢尾花分类中，我选择了手动输入K值来观察准确率的变化。</p>
<ul>
<li><h5 id="训练集和测试集选择"><a href="#训练集和测试集选择" class="headerlink" title="训练集和测试集选择"></a>训练集和测试集选择</h5><p>鸢尾花的数据集一共有150组数据，因此我选择了训练集：测试集 = 4:1的比例来进行切片操作，即训练集为后120组数据，测试集为前30组数据，在划分前，先打乱了数据集的顺序，因为原数据集是按种类排序的。</p>
</li>
<li><h5 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h5><p>主要操作是放在循环里进行的，即遍历测试集，计算一组测试集数据和训练集的所有数据的距离，然后算出每个种类的权重，根据权重的高低来分类，将一组测试集数据分类为权重高的类别。</p>
</li>
<li><h5 id="准确率计算"><a href="#准确率计算" class="headerlink" title="准确率计算"></a>准确率计算</h5><p>如果一组测试集数据预测的种类和真实的种类相同，就将准确的个数累加，通过准确个数 / 测试集的总长度就可以算出准确率，有误差，但误差不大。</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="附：源代码"><a href="#附：源代码" class="headerlink" title="附：源代码"></a>附：源代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Iris_Data.csv'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    reader = csv.DictReader(file)</span><br><span class="line">    data = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数据集分为训练集和测试集</span></span><br><span class="line">random.shuffle(data)  <span class="comment"># 打乱数据集顺序</span></span><br><span class="line">test_data = data[<span class="number">0</span>:<span class="number">30</span>]  <span class="comment"># 测试集取前30个</span></span><br><span class="line">train_data = data[<span class="number">30</span>:]  <span class="comment"># 训练集取后120个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 欧式距离法计算距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(one, two)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    list = [<span class="string">"sepal_length"</span>, <span class="string">"sepal_width"</span>, <span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>]</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> list:</span><br><span class="line">        res += (float(one[key]) - float(two[key])) ** <span class="number">2</span>  <span class="comment"># 训练集每一行数据的特征值分别与测试集计算距离并累加</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要操作</span></span><br><span class="line">sum = <span class="number">0</span>  <span class="comment"># 准确个数</span></span><br><span class="line"><span class="comment"># s = input("请输入K的取值：")</span></span><br><span class="line"><span class="comment"># K = int(s)</span></span><br><span class="line">K = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_data:</span><br><span class="line">    species = i[<span class="string">'species'</span>]  <span class="comment"># 真实种类</span></span><br><span class="line">    predict = <span class="string">""</span></span><br><span class="line">    res = [  <span class="comment"># 遍历训练集的每一行，得出训练集每一行种类和一行测试集的距离</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"train_species"</span>: trainData_perLine[<span class="string">'species'</span>],</span><br><span class="line">            <span class="string">"distance"</span>: distance(i, trainData_perLine)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> trainData_perLine <span class="keyword">in</span> train_data</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将列表依据距离进行升序</span></span><br><span class="line">    res = sorted(res, key=<span class="keyword">lambda</span> item: item[<span class="string">'distance'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取前 K个距离最近的数据</span></span><br><span class="line">    kSum = res[<span class="number">0</span>:K]</span><br><span class="line">    weight_sum = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历前 K个数据，将他们的距离累加</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> kSum:</span><br><span class="line">        weight_sum += i[<span class="string">'distance'</span>]</span><br><span class="line">    <span class="comment"># 鸢尾花种类和权重</span></span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">'Iris-setosa'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'Iris-versicolor'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'Iris-virginica'</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 遍历前 K个数据，计算每一个数据距离所占权重，存到 result中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> kSum:</span><br><span class="line">        result[i[<span class="string">'train_species'</span>]] += <span class="number">1</span> - i[<span class="string">'distance'</span>] / weight_sum</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断哪个种类占的权重大，即将这个测试集归为此类</span></span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">'Iris-setosa'</span>] &gt; result[<span class="string">'Iris-versicolor'</span>] <span class="keyword">and</span> result[<span class="string">'Iris-setosa'</span>] &gt; result[<span class="string">'Iris-virginica'</span>]:</span><br><span class="line">        predict = <span class="string">'Iris-setosa'</span></span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">'Iris-versicolor'</span>] &gt; result[<span class="string">'Iris-setosa'</span>] <span class="keyword">and</span> result[<span class="string">'Iris-versicolor'</span>] &gt; result[<span class="string">'Iris-virginica'</span>]:</span><br><span class="line">        predict = <span class="string">'Iris-versicolor'</span></span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">'Iris-virginica'</span>] &gt; result[<span class="string">'Iris-setosa'</span>] <span class="keyword">and</span> result[<span class="string">'Iris-virginica'</span>] &gt; result[<span class="string">'Iris-versicolor'</span>]:</span><br><span class="line">        predict = <span class="string">'Iris-virginica'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断真实种类和预测是否一致</span></span><br><span class="line">    <span class="keyword">if</span> species == predict:</span><br><span class="line">        sum += <span class="number">1</span>  <span class="comment"># 准确个数累加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率，保留小数点后两位小数</span></span><br><span class="line">test_len = len(test_data)</span><br><span class="line">print(<span class="string">"准确率：&#123;:.2f&#125;%"</span>.format(<span class="number">100</span> * sum / test_len))</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>knn算法</title>
    <url>/2019/10/05/KNN-%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<ul>
<li><h4 id="题目名称"><a href="#题目名称" class="headerlink" title="题目名称"></a>题目名称</h4><p>knn算法 —— 电影分类</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>​       一个样本与数据集中的k个样本最相似，如果这k个样本中的大多数属于某一个类别，则该样本也属于这个类别</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><h5 id="1-用字典dict构建电影分类数据集-训练集-和测试集"><a href="#1-用字典dict构建电影分类数据集-训练集-和测试集" class="headerlink" title="1. 用字典dict构建电影分类数据集(训练集)和测试集"></a>1. 用字典<code>dict</code>构建电影分类数据集(训练集)和测试集</h5><p>&emsp;&emsp;&emsp;训练集：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">搞笑镜头</th>
<th align="center">拥抱镜头</th>
<th align="center">打斗镜头</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">亲密旅行</td>
<td align="center">42</td>
<td align="center">2</td>
<td align="center">9</td>
<td align="center">喜剧片</td>
</tr>
<tr>
<td align="center">新喜剧之王</td>
<td align="center">21</td>
<td align="center">17</td>
<td align="center">5</td>
<td align="center">喜剧片</td>
</tr>
<tr>
<td align="center">唐人街探案2</td>
<td align="center">54</td>
<td align="center">9</td>
<td align="center">11</td>
<td align="center">喜剧片</td>
</tr>
<tr>
<td align="center">羞羞的铁拳</td>
<td align="center">39</td>
<td align="center">0</td>
<td align="center">31</td>
<td align="center">喜剧片</td>
</tr>
<tr>
<td align="center">复仇者联盟4</td>
<td align="center">5</td>
<td align="center">2</td>
<td align="center">57</td>
<td align="center">动作片</td>
</tr>
<tr>
<td align="center">蜘蛛侠：英雄远征</td>
<td align="center">3</td>
<td align="center">2</td>
<td align="center">65</td>
<td align="center">动作片</td>
</tr>
<tr>
<td align="center">速度与激情8</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">55</td>
<td align="center">动作片</td>
</tr>
<tr>
<td align="center">战狼2</td>
<td align="center">6</td>
<td align="center">4</td>
<td align="center">21</td>
<td align="center">动作片</td>
</tr>
<tr>
<td align="center">无问西东</td>
<td align="center">7</td>
<td align="center">46</td>
<td align="center">4</td>
<td align="center">爱情片</td>
</tr>
<tr>
<td align="center">后来的我们</td>
<td align="center">9</td>
<td align="center">39</td>
<td align="center">8</td>
<td align="center">爱情片</td>
</tr>
<tr>
<td align="center">悲伤逆流成河</td>
<td align="center">9</td>
<td align="center">38</td>
<td align="center">2</td>
<td align="center">爱情片</td>
</tr>
<tr>
<td align="center">超时空同居</td>
<td align="center">8</td>
<td align="center">34</td>
<td align="center">17</td>
<td align="center">爱情片</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;&emsp;测试集：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">搞笑镜头</th>
<th align="center">拥抱镜头</th>
<th align="center">打斗镜头</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">美人鱼</td>
<td align="center">33</td>
<td align="center">4</td>
<td align="center">25</td>
<td align="center"></td>
</tr>
</tbody></table>
<h5 id="2-计算测试集与数据集中所有数据的距离"><a href="#2-计算测试集与数据集中所有数据的距离" class="headerlink" title="2. 计算测试集与数据集中所有数据的距离"></a>2. 计算测试集与数据集中所有数据的距离</h5><p>&emsp;&emsp;&emsp;计算距离的方法是欧式距离：<img src="/2019/10/05/KNN-电影分类/%E5%85%AC%E5%BC%8F.png" alt="img"></p>
<h5 id="3-取每段距离的小数点后两位并将电影名称和对应的距离添加到空数组中"><a href="#3-取每段距离的小数点后两位并将电影名称和对应的距离添加到空数组中" class="headerlink" title="3. 取每段距离的小数点后两位并将电影名称和对应的距离添加到空数组中"></a>3. 取每段距离的小数点后两位并将电影名称和对应的距离添加到空数组中</h5><h5 id="4-按距离大小升序排序并取前5项"><a href="#4-按距离大小升序排序并取前5项" class="headerlink" title="4. 按距离大小升序排序并取前5项"></a>4. 按距离大小升序排序并取前5项</h5><h5 id="5-取出训练集的列表，确定前5个样本所在类别出现的频率"><a href="#5-取出训练集的列表，确定前5个样本所在类别出现的频率" class="headerlink" title="5. 取出训练集的列表，确定前5个样本所在类别出现的频率"></a>5. 取出训练集的列表，确定前5个样本所在类别出现的频率</h5><h5 id="6-对所得结果按照出现的次数用sorted-函数进行排序，得到一个升序的新数组，取出现次数最多的类型，因此要将新数组倒序，取第一个值"><a href="#6-对所得结果按照出现的次数用sorted-函数进行排序，得到一个升序的新数组，取出现次数最多的类型，因此要将新数组倒序，取第一个值" class="headerlink" title="6. 对所得结果按照出现的次数用sorted()函数进行排序，得到一个升序的新数组，取出现次数最多的类型，因此要将新数组倒序，取第一个值"></a>6. 对所得结果按照出现的次数用sorted()函数进行排序，得到一个升序的新数组，取出现次数最多的类型，因此要将新数组倒序，取第一个值</h5><h5 id="7-输出排序后的结果和出现频率最高的类别"><a href="#7-输出排序后的结果和出现频率最高的类别" class="headerlink" title="7. 输出排序后的结果和出现频率最高的类别"></a>7. 输出排序后的结果和出现频率最高的类别</h5></li>
</ul>
<hr>
<ul>
<li><h4 id="算法流程图"><a href="#算法流程图" class="headerlink" title="算法流程图"></a>算法流程图</h4><p><img src="/2019/10/05/KNN-电影分类/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="1570370584971"></p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="/2019/10/05/KNN-电影分类/%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE.png" alt="1570367130133"></p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h4><p>​       knn算法是最简单易懂的机器学习算法， 但是在设置K值时需要注意， k值设置过小会降低分类精度；若设置过大，且测试样本属于训练集中包含数据较少的类，则会增加噪声，降低分类效果。在电影分类这里我设置了k的值是5。在训练集和测试集中，使用的特征值是搞笑镜头、打斗镜头、拥抱镜头的数量，所有的镜头数量都是虚构的。</p>
<p>​        knn算法的计算复杂度较高，测试集需要和训练集的每个数据进行距离计算，时间复杂度为O(n)， 所以knn适合数据较少的数据集。</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="附：源代码"><a href="#附：源代码" class="headerlink" title="附：源代码"></a>附：源代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 训练集</span></span><br><span class="line">train_data = &#123;<span class="string">"亲密旅行"</span>: [<span class="number">45</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="string">"喜剧片"</span>],</span><br><span class="line">              <span class="string">"新喜剧之王"</span>: [<span class="number">21</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="string">"喜剧片"</span>],</span><br><span class="line">              <span class="string">"唐人街探案2"</span>: [<span class="number">54</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="string">"喜剧片"</span>],</span><br><span class="line">              <span class="string">"羞羞的铁拳"</span>: [<span class="number">39</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="string">"喜剧片"</span>],</span><br><span class="line">              <span class="string">"复仇者联盟4"</span>: [<span class="number">5</span>, <span class="number">2</span>, <span class="number">57</span>, <span class="string">"动作片"</span>],</span><br><span class="line">              <span class="string">"蜘蛛侠：英雄远征"</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">65</span>, <span class="string">"动作片"</span>],</span><br><span class="line">              <span class="string">"速度与激情8"</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="string">"动作片"</span>],</span><br><span class="line">              <span class="string">"战狼2"</span>: [<span class="number">6</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="string">"动作片"</span>],</span><br><span class="line">              <span class="string">"无问西东"</span>: [<span class="number">7</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="string">"爱情片"</span>],</span><br><span class="line">              <span class="string">"后来的我们"</span>: [<span class="number">9</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="string">"爱情片"</span>],</span><br><span class="line">              <span class="string">"悲伤逆流成河"</span>: [<span class="number">9</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="string">"爱情片"</span>],</span><br><span class="line">              <span class="string">"超时空同居"</span>: [<span class="number">8</span>, <span class="number">34</span>, <span class="number">17</span>, <span class="string">"爱情片"</span>]&#125;</span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">test_data = [<span class="number">23</span>, <span class="number">3</span>, <span class="number">17</span>]</span><br><span class="line">KNN = []</span><br><span class="line"><span class="comment"># 遍历计算测试集与数据集中所有数据的距离</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> train_data.items():</span><br><span class="line">    <span class="comment"># 求距离</span></span><br><span class="line">    d = math.sqrt((test_data[<span class="number">0</span>] - value[<span class="number">0</span>]) ** <span class="number">2</span> + (test_data[<span class="number">1</span>] - value[<span class="number">1</span>]) ** <span class="number">2</span> + (test_data[<span class="number">2</span>] - value[<span class="number">2</span>]) ** <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 取小数点后两位</span></span><br><span class="line">    KNN.append([key, round(d, <span class="number">2</span>)])</span><br><span class="line"><span class="comment"># 按距离大小升序并取前 5 项</span></span><br><span class="line">KNN.sort(key=<span class="keyword">lambda</span> dis: dis[<span class="number">1</span>])</span><br><span class="line">KNN = KNN[:  <span class="number">5</span>]</span><br><span class="line"><span class="comment"># print(KNN)</span></span><br><span class="line"><span class="comment"># 类别</span></span><br><span class="line">labels = &#123;</span><br><span class="line">    <span class="string">"喜剧片"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"动作片"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"爱情片"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 确定前 5 个样本所在类别出现的频率</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> KNN:</span><br><span class="line">    <span class="comment"># 取出训练集的列表</span></span><br><span class="line">    label = train_data[i[<span class="number">0</span>]]</span><br><span class="line">    <span class="comment"># 确定出现的次数</span></span><br><span class="line">    labels[label[<span class="number">3</span>]] += <span class="number">1</span></span><br><span class="line"><span class="comment"># 对所得结果按照出现的次数倒序</span></span><br><span class="line">labels = sorted(labels.items(), key=<span class="keyword">lambda</span> l: l[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 输出排序后的结果和出现频率最高的类别</span></span><br><span class="line">print(labels, labels[<span class="number">0</span>][<span class="number">0</span>], sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <tags>
        <tag>python机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax-3-Ajax的优缺点和跨域问题</title>
    <url>/2019/10/02/Ajax-3-Ajax%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<center><font size="5">Ajax的优缺点和跨域问题</font></center>
- #### Ajax的优缺点：

<ul>
<li><p>优点：</p>
<ul>
<li>无刷新更新数据：Ajax最大的优点就是能在不刷新整个页面的情况下维持与服务器通信</li>
<li>异步与服务器通信：使用异步的方式与服务器通信，不打断用户的操作</li>
<li>前端与后端负载均衡：将一些后端的工作移到前端，减少服务器与带宽的负担</li>
<li>基于规范被广泛支持：不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。</li>
<li>界面与应用分离：Ajax使得界面与应用分离，也就是数据与呈现分离</li>
</ul>
</li>
<li><p>缺点：下面所阐述的ajax的缺陷都是它先天所产生的（部分已经解决了或者有解决方法）</p>
<ul>
<li>Ajax干掉了Back与History功能，破坏了浏览器机制：动态更新页面时，用户无法回到前一页的页面状态，因为浏览器仅能记忆历史纪录中的静态页面</li>
<li>安全问题：AJAX技术会给IT企业带来安全威胁，Ajax技术如同对企业数据建立了一个直接通道。使开发者不经意间暴露比以前更多的数据和服务器逻辑</li>
<li>对搜索引擎支持较弱</li>
<li>破坏程序的异常处理机制</li>
<li>违背URL与资源定位的初衷</li>
<li>不能很好地支持移动设备（但是有很多框架解决了这些问题）</li>
<li>客户端肥大，太多客户端代码造成开发上的成本上升</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="什么是跨域以及产生原因"><a href="#什么是跨域以及产生原因" class="headerlink" title="什么是跨域以及产生原因"></a>什么是跨域以及产生原因</h4><blockquote>
<p>跨域是指 a 页面想获取 b 页面资源，如果a、b页面的协议、域名、端口、子域名不同，或是a页面为ip地址，b页面为域名地址，所进行的访问行动都是跨域的，而浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源。典型的例子如<code>iframe</code>窗口和<code>window.open</code>方法打开的窗口，它们与父窗口无法通信</p>
</blockquote>
</li>
</ul>
<ol>
<li><table>
<thead>
<tr>
<th>Uri</th>
<th>说明</th>
<th>是否跨域</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a>       <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td>
<td>不同域名</td>
<td>是</td>
</tr>
<tr>
<td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a>        <a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td>
<td>同域名下不同文件</td>
<td>否</td>
</tr>
<tr>
<td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a>     <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td>
<td>同域名下不同端口</td>
<td>是</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a>      <a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td>
<td>同域名 不同协议</td>
<td>是</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a>       <a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td>
<td>域名和域名对应ip</td>
<td>是</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a>      <a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td>
<td>主域名相同 子域名不同</td>
<td>是（cookie不可访问）</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a>      <a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td>
<td>同一域名，不同二级域名（同上）</td>
<td>是</td>
</tr>
</tbody></table>
</li>
</ol>
<hr>
<ul>
<li><h4 id="跨域多个解决方案"><a href="#跨域多个解决方案" class="headerlink" title="跨域多个解决方案"></a>跨域多个解决方案</h4><ul>
<li><p><font color="blue">【策略一】Jsonp：需要目标服务器配合一个<code>callback</code>函数</font></p>
<ul>
<li><p>JSONP(JSON with Padding)是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问。</p>
<p>JSONP顾名思义，就是把JSON填充到一个盒子里，它的基本思想是，网页通过添加一个script元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>
</li>
<li><p>PHP代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $arr = array(&apos;a&apos; =&gt; 1,&apos;b&apos; =&gt; 2,&apos;c&apos; =&gt; 3,&apos;d&apos; =&gt; 4,&apos;e&apos; =&gt; 5);</span><br><span class="line">    $result = json_encode($arr);	// 服务端返回JSON数据</span><br><span class="line">    $callback = $_GET[&apos;callback&apos;];</span><br><span class="line">  echo $callback.&quot;($result)&quot;;	   // 动态执行回调函数</span><br></pre></td></tr></table></figure>
</li>
<li><p>js方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsonpCallback</span>(<span class="params">result</span>) </span>&#123; </span><br><span class="line">      <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">      <span class="keyword">var</span> JSONP = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);  </span><br><span class="line">      JSONP.type = <span class="string">"text/javascript"</span>;  </span><br><span class="line">      JSONP.src = <span class="string">"abc.php?callback=jsonpCallback"</span>;  </span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(JSONP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>jq方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;  </span><br><span class="line">    url:<span class="string">"abc.php"</span>,</span><br><span class="line">    dataType:<span class="string">'jsonp'</span>,</span><br><span class="line">    jsonp:<span class="string">'callback'</span>, </span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：JQ的方法可以用来跨域，如上面的代码也可以直接换成$.get方法来实现</font></p>
</li>
</ul>
</li>
<li><p><font color="blue">【策略二】通过修改<code>document.domain</code>来跨子域：将子域和主域的<code>document.domain</code>设为同一个主域.</font></p>
<p><font color="purple"><strong>前提条件：这两个域名必须属于同一个基础域名！而且所用的协议，端口都要一致，否则无法利用<code>document.domain</code>进行跨域</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">document</span>.domain = <span class="string">"abc.net"</span>;  <span class="comment">// 在一个页面里将主域设为abc.net</span></span><br><span class="line">  <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);    <span class="comment">// 创建iframe标签</span></span><br><span class="line">  ifr.src = <span class="string">'http://blogs.abc.net/b.html'</span>;      <span class="comment">// 并在里面打开需要通信的另一个页面</span></span><br><span class="line">  ifr.style.display = <span class="string">'none'</span>;         <span class="comment">// 隐藏标签</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(ifr);    <span class="comment">// 插入页面</span></span><br><span class="line">  ifr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;        <span class="comment">// iframe加载完成后</span></span><br><span class="line">      <span class="keyword">var</span> x = ifr.contentDocument; <span class="comment">// 获取iframe的document</span></span><br><span class="line">    alert(x.getElementsByTagName(<span class="string">"h1"</span>)[<span class="number">0</span>].innerHTML);    <span class="comment">// 操作其中的b.html</span></span><br><span class="line">      ifr.onload = <span class="literal">null</span>;    <span class="comment">// 取消事件函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：如果想获取iframe里的window或者document，可以使用 <code>iframe.contentWindow</code>、<code>iframe.contentDocument</code></font></p>
</li>
<li><p><font color="blue">【策略三】使用<code>window.name</code>来进行跨域：window.name+iframe 需要目标服务器响应<code>window.name</code>,window对象有个<code>name</code>属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个<code>window.name</code>的，每个页面对<code>window.name</code>都有读写的权限，<code>window.name</code>是持久存在一个窗口载入过的所有页面中的!</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">window</span>.name = data; <span class="comment">// 接着，子窗口跳回一个与主窗口同域的网址。</span></span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">'http://parent.url.com/xxx.html'</span>;</span><br><span class="line">  <span class="comment">// 然后，主窗口就可以读取子窗口的window.name了</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>).contentWindow.name;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="red">注意：<code>window.name</code>容量很大，非常长的字符串也可以使用；但由于必须监听子窗口<code>window.name</code>属性的变化，会影响网页性能</font></p>
<ul>
<li><font color="blue">【策略四】跨文档消息传输<code>window.postMessage</code>：HTML5引入一个全新的API —– 跨文档消息传输Cross Document Messaging来解决这个问题。</font></li>
</ul>
<p>使用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ol>
<li><p><code>otherWindow</code> ： 对接收信息页面的window的引用。可以是页面中iframe的<code>contentWindow</code>属性或<code>window.open</code>的返回值；一般可以通过name或下标从<code>window.frames</code>取到的值。</p>
<ol start="2">
<li><code>message</code>: 具体的信息内容，string类型。</li>
</ol>
</li>
<li><p><code>targetOrigin</code> ： 接受消息的窗口的源(origin)，即”<code>协议+域名+端口</code>“。也可以设为”<code>*</code>“，表示不限制域名，向所有窗口发送。</p>
<ol start="4">
<li><code>message</code>事件的事件对象event，提供一下三个属性 ： <ul>
<li><code>event.source</code>—– 发送消息的窗口</li>
<li><code>event.origin</code> —– 消息发向的网站</li>
<li><code>event.data</code> —– 消息内容</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// a.com/index.html页面中的代码</span></span><br><span class="line">  &lt;iframe id = <span class="string">"ifr"</span> src = <span class="string">"b.com/index.html"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span>  </span><br><span class="line">  &lt;script type = <span class="string">"text/javascript"</span>&gt;  </span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">      <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);  </span><br><span class="line">      <span class="keyword">var</span> targetOrigin = <span class="string">'http://b.com'</span>; <span class="comment">//写成'http://b.com/c/proxy.html'效果一样；写成'http://c.com'就不会执行postMessage了  </span></span><br><span class="line">      ifr.contentWindow.postMessage(<span class="string">'I was there!'</span>, targetOrigin);  </span><br><span class="line">  &#125;;  </span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ b.com/i</span>ndex.html页面中的代码</span><br><span class="line">  &lt;script type = <span class="string">"text/javascript"</span>&gt; </span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (event.origin == <span class="string">'http://a.com'</span>) &#123; <span class="comment">// 通过origin属性判断消息来源地址</span></span><br><span class="line">          alert(event.data);    <span class="comment">// 弹出"I was there!"  </span></span><br><span class="line">        alert(event.source);  <span class="comment">// 对a.com、index.html中window对象的引用；由于同源策略，event.source不可以访问window对象  </span></span><br><span class="line">      &#125;  </span><br><span class="line">&#125;, <span class="literal">false</span>);  </span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ul>
<li><font color="blue">【策略五】通过<strong>CORS</strong>解决AJAX跨域：CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。</font></li>
</ul>
<hr>
<ul>
<li><h4 id="CORS详解"><a href="#CORS详解" class="headerlink" title="CORS详解"></a>CORS详解</h4><ul>
<li><p>定义：CORS其实出现时间不短了，它在维基百科上的定义是：跨域资源共享（CORS）是一种网络浏览器的技术规范，它为Web服务器定义了一种方式，允许网页从不同的域访问其资源。而这种访问是被同源策略所禁止的。CORS系统定义了一种浏览器和服务器交互的方式来确定是否允许跨域请求。 它是一个妥协，有更大的灵活性，但比起简单地允许所有这些的要求来说更加安全。而W3C的官方文档目前还是工作草案，但是正在朝着W3C推荐的方向前进。 简言之，CORS就是为了让AJAX可以实现可控的跨域访问而生的。</p>
</li>
<li><p>以往要实现跨域访问，可以通过JSONP、Flash或者服务器中转的方式来实现，但是现在我们有了CORS。CORS与JSONP相比，更为先进、方便和可靠。</p>
</li>
<li><p>CORS只需要向响应头header中注入Access-Control-Allow-Origin，这样浏览器检测到header中的Access-Control-Allow-Origin，则就可以跨域操作了。</p>
</li>
<li><p><font color="red"><strong>JSONP和CORS的区别</strong></font></p>
<ul>
<li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</li>
<li>使用CORS，开发者可以使用普通的<code>XMLHttpRequest</code>发起请求和获得数据，比起JSONP有更好的错误处理。</li>
<li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。</li>
</ul>
</li>
<li><p>设置<code>Access-Control-Allow-Origin</code>：在被请求的Response header中加入 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$ret = array(  </span><br><span class="line"><span class="string">'name'</span> =&gt; isset($_POST[<span class="string">'name'</span>])? $_POST[<span class="string">'name'</span>] : <span class="string">''</span>,  </span><br><span class="line"><span class="string">'gender'</span> =&gt; isset($_POST[<span class="string">'gender'</span>])? $_POST[<span class="string">'gender'</span>] : <span class="string">''</span>  </span><br><span class="line">);  </span><br><span class="line">header(<span class="string">'content-type:application:json;charset=utf8'</span>);  </span><br><span class="line">header(<span class="string">'Access-Control-Allow-Origin:*'</span>);      <span class="comment">// 指定允许其他域名访问</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Methods:POST'</span>);  <span class="comment">// 响应类型为POST，还有GET</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers:x-requested-with,content-type'</span>);  <span class="comment">// 响应头设置</span></span><br><span class="line">echo json_encode($ret);   <span class="comment">// 输出, 类似console.log()</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>就可以实现ajax POST跨域访问了。它在客户端的代码和AJAX没有什么区别，只不过处理地址变成了外域的地址。</p>
</li>
<li><p><code>Access-Control-Allow-Origin:*</code> ： 表示允许任何域名跨域访问 如果需要指定某域名才允许跨域访问，只需把<code>Access-Control-Allow-Origin:*</code>改为<code>Access-Control-Allow-Origin:允许的域名</code>，例如：<code>header(&#39;Access-Control-Allow-Origin:http://www.client.com&#39;);</code></p>
<p>如果需要设置多个域名允许访问，这里需要用PHP处理一下，例如允许 <a href="http://www.client.com" target="_blank" rel="noopener">www.client.com</a> 与 <a href="http://www.client2.com" target="_blank" rel="noopener">www.client2.com</a> 可以跨域访问，服务器端处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$ret = array(  </span><br><span class="line"><span class="string">'name'</span> =&gt; isset($_POST[<span class="string">'name'</span>])? $_POST[<span class="string">'name'</span>] : <span class="string">''</span>,  </span><br><span class="line"><span class="string">'gender'</span> =&gt; isset($_POST[<span class="string">'gender'</span>])? $_POST[<span class="string">'gender'</span>] : <span class="string">''</span>  </span><br><span class="line">);    </span><br><span class="line">header(<span class="string">'content-type:application:json;charset=utf8'</span>);  </span><br><span class="line">$origin = isset($_SERVER[<span class="string">'HTTP_ORIGIN'</span>]) ? $_SERVER[<span class="string">'HTTP_ORIGIN'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">$allow_origin = array(  </span><br><span class="line">    <span class="string">'http://www.client.com'</span>,  </span><br><span class="line">    <span class="string">'http://www.client2.com'</span>  </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">if</span>(in_array($origin, $allow_origin))&#123;  </span><br><span class="line">    header(<span class="string">'Access-Control-Allow-Origin:'</span>.$origin); <span class="comment">// 字符串拼接  </span></span><br><span class="line">    header(<span class="string">'Access-Control-Allow-Methods:POST'</span>);  </span><br><span class="line">    header(<span class="string">'Access-Control-Allow-Headers:x-requested-with,content-type'</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">echo json_encode($ret);  </span><br><span class="line">??&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：以上总结了js跨域的几种方法，他们各有千秋。其实最主要的区别除了实现方式不一样，主要是浏览器的兼容问题而已。</p>
<ul>
<li>JSONP的优点是：它不像<code>XMLHttpRequest</code>对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要<code>XMLHttpRequest</code>或ActiveX的支持；并且在请求完毕后可以通过调用<code>callback</code>的方式回传结果。<br>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</li>
<li>CORS优点：使用CORS，开发者可以使用普通的<code>XMLHttpRequest</code>发起请求和获得数据，比起JSONP有更好的错误处理。<br>CORS缺点：古老的浏览器不支持，不过大部分现代浏览器都支持</li>
<li><code>document.domain+iframe</code>：只适用于主域相同的跨域问题处理</li>
<li><code>postMessage</code>优点：是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持<code>window.postMessage</code>方法。如果是现代浏览器，首选。<br><code>postMessage</code>缺点： ie8以前不支持</li>
<li><code>window.name</code>主要是应用当frame的页面跳到其他地址时，其<code>window.name</code>值保持不变的原理。兼容性好。需要照顾落后的浏览器时，首选。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. ajax实现瀑布流。</font></p>
<p>要求：列数固定，宽度相等，但是每个子项高度不固定，刷新页面时展示30个数据，当滚动条下拉到底时每次再展示10个数据，每次添加新数据时按照列高最低的列添加问题</p>
<p>(注意：获取的图片大小可能不同，但是布局里要求图片的宽相同，图片还不能变形，另外由于图片加载时间问题，如果通过循环计算每列的高会由于图片没有加载的问题出错，因此可以把图的宽高放在数据内容，通过直接赋值的方式解决，还可以用递归做懒加载，让每个图片加载完后再加载下一张图当滚动条滚动到最短的列的最下边出现在可视范围内时，既是我们要用ajax动态加载数据的时候，同样由于加载时间的问题，滚动条事件可能会发生很多次，因此还要设置一个开关，在上一次加载完成之前不能再次调用方法)</p>
]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax-2-jQuery的ajax的属性和用法</title>
    <url>/2019/10/02/Ajax-2-jQuery%E7%9A%84ajax%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<center><font size="5">jquery的ajax的属性和用法</font></center>
- #### Jquery的ajax

<blockquote>
<p>用js写AJAX主要问题就是浏览器兼容问题，并且状态和错误处理写起来很麻烦。用jQuery处理AJAX，不但不需要考虑浏览器问题，代码也能大大简化。</p>
</blockquote>
<ul>
<li><p>jQuery在全局对象jQuery（也就是$）绑定了ajax()函数，可以处理AJAX请求。<code>ajax(url, settings)</code>函数需要接收一个URL和一个可选的settings对象。</p>
</li>
<li><p><font color="orange"><strong><code>$.ajax()</code>：执行一个异步的HTTP（Ajax）的请求</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"abc.txt"</span>, </span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"#div1"</span>).html(result);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面列出了常见的名称/值：</p>
<ul>
<li><p><code>url</code>：规定发送请求的 URL。默认是当前页面。</p>
</li>
<li><p><code>cache</code>：布尔值，表示浏览器是否缓存被请求页面。默认是 true。</p>
</li>
<li><p><code>async</code>：是否异步执行AJAX请求，默认为true，千万不要指定为false；</p>
</li>
<li><p><code>method</code>：发送的Method，缺省为’GET’，可指定为’POST’等；</p>
</li>
<li><p><code>contentType</code>：发送POST请求的格式，默认值为’<code>application/x-www-form-urlencoded; charset=UTF-8</code>‘，也可以指定为text/plain、application/json；</p>
</li>
<li><p><code>data</code>：发送的数据，可以是字符串、数组或object。如果是GET请求，data将被转换成query附加到URL上，如果是POST请求，根据contentType把data序列化成合适的格式；</p>
</li>
<li><p><code>dataType</code>：接收的数据格式，可以指定为’html’、’xml’、’json’、’text’等，缺省情况下根据响应的Content-Type猜测。</p>
<p>如一个JSON格式的例子：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxLog</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> txt = $(<span class="string">'#test-response-text'</span>);</span><br><span class="line">    txt.val(txt.val() + <span class="string">'\n'</span> + s);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'#test-response-text'</span>).val(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">var</span> jqxhr = $.ajax(<span class="string">'data.txt'</span>, &#123;</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    success : <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        ajaxLog(<span class="string">"成功, 收到的数据: "</span>  + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">    &#125;,</span><br><span class="line">    error : <span class="function"><span class="keyword">function</span> (<span class="params">xhr, status</span>) </span>&#123;</span><br><span class="line">        ajaxLog(<span class="string">"失败: "</span> + xhr.status + <span class="string">", 原因: "</span> + status);</span><br><span class="line">    &#125;,</span><br><span class="line">    complete : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ajaxLog(<span class="string">'请求完成: 无论成功或失败都会调用'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>beforeSend(xhr)</code>：发送请求前运行的函数</li>
</ul>
</li>
<li><p><code>complete(xhr, status)</code>：请求完成时运行的函数（在请求成功或失败之后均调用，即在 <code>success</code>和 <code>error</code>函数之后）</p>
<ul>
<li><code>success(result, status, xhr)</code>：当请求成功时运行的函数</li>
</ul>
</li>
<li><p><code>error(xhr, status, error)</code>：如果请求失败要运行的函数</p>
<ul>
<li><code>timeout</code>：设置本地的请求超时时间（以毫秒计）</li>
<li><code>jsonp</code>：在一个 jsonp 中重写回调函数的字符串。来替代在”<code>callback=?</code>“这种GET或POST请求中URL参数里的”callback”部分，比如<code>{jsonp:&#39;onJsonPLoad&#39;}</code>会导致将”<code>onJsonPLoad=?</code>“传给服务器。（query实现跨域方法）</li>
<li><code>jsonpCallback</code>：在一个 jsonp 中规定回调函数的名称，也就是替换”callback=?”中的问号</li>
</ul>
</li>
</ul>
<ul>
<li><p>对常用的AJAX操作，jQuery提供了一些辅助方法。</p>
<p><font color="orange"><strong><code>$(&quot;#id&quot;).load()</code>：从服务器载入数据并且将返回的 HTML 代码并插入至匹配的元素中</strong></font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).load(<span class="string">"abc.txt"</span>);  <span class="comment">// 加载abc.txt文件的数据到#div1里</span></span><br><span class="line">$(<span class="string">"#div1"</span>).load(<span class="string">"history.html #div0"</span>);  <span class="comment">// 加载history.html文件的#div0的内容到#div1里</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>GET请求最常见，jQuery提供了<code>get()</code>方法，可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jqxhr = $.<span class="keyword">get</span>('data.txt', &#123;</span><br><span class="line">      name: <span class="string">'Bob Lee'</span>,</span><br><span class="line">      check: <span class="number">1</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>第二个参数如果是object，jQuery自动把它变成query string然后加到URL后面，实际的URL是：<code>data.txt?name=Bob%20Lee&amp;check=1</code>。这样我们就不用关心如何用URL编码并构造一个query string了</p>
</li>
<li><p><code>post()</code>和<code>get()</code>类似，但是传入的第二个参数默认被序列化为<code>application/x-www-form-urlencoded</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jqxhr = $.post(<span class="string">'data.txt'</span>, &#123;</span><br><span class="line">      name: <span class="string">'Bob Lee'</span>,</span><br><span class="line">      check: <span class="number">1</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>实际构造的数据<code>name=Bob%20Lee&amp;check=1</code>作为POST的body被发送。</p>
</li>
<li><p>由于JSON用得越来越普遍，所以jQuery也提供了<font color="orange"><strong><code>getJSON()</code>方法来快速通过GET获取一个JSON对象</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jqxhr = $.getJSON(<span class="string">'data.txt'</span>, &#123;</span><br><span class="line">    name: <span class="string">'Bob Lee'</span>,</span><br><span class="line">    check: <span class="number">1</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// data已经被解析为JSON对象了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1.  利用ajax做一个分页效果，数据如下：<br>[{“id”:”1”,”name”:”苹果1”,”price”:”6.00”},{“id”:”2”,”name”:”苹果2”,”price”:”5.00”},{“id”:”3”,”name”:”苹果3”,”price”:”7.00”},{“id”:”4”,”name”:”苹果4”,”price”:”6.00”},{“id”:”5”,”name”:”苹果5”,”price”:”6.00”},{“id”:”6”,”name”:”苹果6”,”price”:”6.00”},{“id”:”7”,”name”:”苹果7”,”price”:”6.00”},{“id”:”8”,”name”:”苹果8”,”price”:”6.00”},{“id”:”9”,”name”:”苹果9”,”price”:”6.00”},{“id”:”10”,”name”:”苹果10”,”price”:”6.00”},{“id”:”11”,”name”:”苹果11”,”price”:”6.00”},{“id”:”12”,”name”:”苹果12”,”price”:”6.00”},{“id”:”13”,”name”:”苹果13”,”price”:”6.00”}]</font></p>
]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax-1-Ajax原理和封装</title>
    <url>/2019/10/02/Ajax-1-Ajax%E5%8E%9F%E7%90%86%E5%92%8C%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<center><font size="5">Ajax原理和封装</font></center>

<ul>
<li><h4 id="Ajax基础"><a href="#Ajax基础" class="headerlink" title="Ajax基础"></a>Ajax基础</h4><blockquote>
<p>AJAX全称为”Asynchronous JavaScript and XML”（异步JavaScript和XML），就是无刷新数据读取的技术，一种创建交互式网页应用的网页开发技术。</p>
<p>它可以节省用户操作，时间，提高用户体验，减少数据请求</p>
<p>开始大家不知道Ajax有什么用，第一个应用的是谷歌地图上，之后ajax就开始被各个地方滥用……一般用在：用户注册和在线聊天室等</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li><h4 id="Ajax代码解析"><a href="#Ajax代码解析" class="headerlink" title="Ajax代码解析"></a>Ajax代码解析</h4><ul>
<li><p>一个Ajax的流程：步骤和打电话类似</p>
<ul>
<li>买个手机并申请个号码（创建Ajax对象）</li>
<li>向需要拨打的号码拨号（与服务器连接）</li>
<li>向对方说话（发送请求）</li>
<li>听对方话说（接收返回值）</li>
</ul>
</li>
<li><p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、创建Ajax对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、连接服务器</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、发送请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、接收服务器的返回</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  <span class="comment">// 完成</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123; <span class="comment">// 成功且无错误</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'成功： '</span> + xhr.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>连接服务器：<code>open    (提交方式, 文件路径, 异步传输)</code></strong></font></p>
<p>参数一：提交方法 —— GET/POST：GET多用于获取数据；POST多用于上传数据</p>
<p>参数二：文件路径 —— 你的文件地址和名称，如果需要阻止缓存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'abc.txt?'</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 每次提交时间戳不同/或者用随机数</span></span><br></pre></td></tr></table></figure>

<p>参数三：同步和异步 —— false/true（事件一件一件进行就是同步，多件事一起进行就是异步）：同步会阻塞后续代码，异步不会</p>
</li>
<li><p><font color="orange"><strong>发送请求：<code>send()</code></strong> </font>—— 在表单里数据传输是在<code>form</code>的属性里决定<code>get</code>和<code>post</code>，在ajax里则是<code>open</code>方法，而提交数据的get的方法可以直接连接在url后面，可以利用url里的和编码传输（防止中文出现乱码），用<code>encodeURI()</code>（解码方法<code>decodeURI()</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.open(method, url + <span class="string">"?"</span> + data, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>但 post 提交时，数据放在<code>send()</code>方法里作为参数传递（<code>send(&quot;数据&quot;)</code>），并要设置请求头（数据编码类型），<code>form</code>里不设置是因为有默认值，但ajax里没有：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.setRequestHeader(<span class="string">"content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure>

<p>post 没有缓冲问题和中文问题，因为 post 是提交数据的，在设置头的时候设置过了</p>
</li>
<li><p><font color="orange"><strong>接收返回：<code>onreadystatechange</code>事件</strong></font>：与服务器发生数据传输ajax对象的<code>readyState</code>属性值改变时；<code>readyState</code>属性：请求状态</p>
<ul>
<li><code>0</code> ： （初始化）还没有调用<code>open()</code>方法</li>
<li><code>1</code> ： （载入）已调用<code>send()</code>方法，正在发送请求</li>
<li><code>2</code> ： （载入完成）<code>send()</code>方法完成，已收到全部相应内容</li>
<li><code>3</code> ： （解析）正在解析相应内容</li>
<li><code>4</code> ： （完成）相应内容解析完成，可以在客户端调用了</li>
</ul>
<p>ajax的<code>responseText</code>属性：返回的数据（无论什么数据都是字符串）；</p>
<p>ajax的<code>status</code>属性：是否成功（200成功且无错误，404请求页面找不到）: (状态码)</p>
<ul>
<li>1字头： 消息类，请求收到，继续处理</li>
<li>2字头： 成功类型，操作成功收到，分析、接受</li>
<li>3字头： 重定向，请求发生了页面跳转（包括缓存），完成此请求必须进一步处理</li>
<li>4字头： 请求错误，请求包含一个错误语法或不能完成</li>
<li>5字头： 服务器错误，服务器执行一个完全有效请求失败</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="Ajax的封装和使用"><a href="#Ajax的封装和使用" class="headerlink" title="Ajax的封装和使用"></a>Ajax的封装和使用</h4><ul>
<li><p>ajax能且仅能从服务器上读取文件信息，不能在本地打开，做练习1，将ajax封装使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    myApp.ajax(<span class="string">'abc.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">        alert(str);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：请求并显示静态txt文件，保存的txt文件也必须是utf-8编码，否则不是乱码就是出错</font></p>
</li>
<li><p><font color="orange"><strong>动态数据</strong></font>：在服务器上读到的数据全部是以文本（string）的方式，因此无法拿到数组或者json，只能拿到字符串，用eval方法有诸多问题，已经淘汰，因此可以用JSON的方法来解决</p>
</li>
<li><p>ajax的用途就是通过一个接口（既数据的地址）获取数据，根据数据的类型进行处理并展示到页面中</p>
</li>
<li><p>最终封装的ajax方法，参数应该有提交方式（可选），提交地址，数据（可选），调用成功的函数和调用失败的函数（可选），并将所有参数写成一个对象（其中默认提交方式是get，默认数据为空字符串）</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 封装一个ajax函数，要求参数：通信地址；成功的回调函数(参数为成功时获得的数据)；失败的回调函数</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, option</span>) </span>&#123;   <span class="comment">// option为对象</span></span><br><span class="line">    <span class="keyword">var</span> json = option.json === <span class="literal">undefined</span> ? <span class="literal">false</span> : option.json; <span class="comment">// 字符串转换成数组</span></span><br><span class="line">    <span class="comment">// 局部刷新</span></span><br><span class="line">    <span class="keyword">var</span> cache = option.cache == <span class="literal">undefined</span> ? <span class="literal">true</span> : option.cache; <span class="comment">// 默认缓存</span></span><br><span class="line">    <span class="keyword">var</span> method = option.method || <span class="string">"get"</span>;    <span class="comment">// 提交方式，默认为 get</span></span><br><span class="line">    <span class="keyword">var</span> data = option.data || <span class="string">""</span>; </span><br><span class="line">    <span class="keyword">var</span> sucFn = option.sucFn || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;    <span class="comment">// 数据获取成功时的函数</span></span><br><span class="line">    <span class="keyword">var</span> faiFn = option.faiFn || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;   <span class="comment">// 数据获取失败时的函数</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">"get"</span>) &#123;</span><br><span class="line">        xhr.open(method, (cache ? url + <span class="string">"?"</span> + data + <span class="built_in">Date</span>.now() : url + <span class="string">"?"</span> + data), <span class="literal">true</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr.open(method, (cache ? url + <span class="string">"?"</span> + <span class="built_in">Date</span>.now(): url), <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">"content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        xhr.send(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  <span class="comment">// 完成</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123; <span class="comment">// 成功且无错误</span></span><br><span class="line">                sucFn(json ? <span class="built_in">JSON</span>.parse(xhr.responseText) : xhr.responseText); <span class="comment">// 将字符串转换成数组或json</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                faiFn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 3个按钮和一个div，点击第一个按钮把文件1.txt内容放在div里，点击第二个按钮时把文件2.txt内容放在div里，点击第三个按钮时把文件3.txt内容放在div里</font></p>
<p><font size="4">3. 每隔1秒重新读取数据的新闻页</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"ajax.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 每隔1秒重新读取数据的新闻页，实时更新新闻</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> str = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        ajax(<span class="string">"data.txt"</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">"sucFn"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (str != data) &#123;  <span class="comment">// 数据更新时</span></span></span><br><span class="line">                    str = data;</span><br><span class="line"><span class="javascript">                    createLi();  <span class="comment">// 创建 li</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="string">"cache"</span>: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 li</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">createLi</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        oUl.innerHTML = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(str);  <span class="comment">// 将字符串转换成数组</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></span><br><span class="line">            oUl.appendChild(oLi);</span><br><span class="line">            oLi.innerHTML = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setInterval(getDate, 1000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery-4-动画和Velocity动画库</title>
    <url>/2019/09/28/jQuery-4-%E5%8A%A8%E7%94%BB%E5%92%8CVelocity%E5%8A%A8%E7%94%BB%E5%BA%93/</url>
    <content><![CDATA[<ul>
<li><h4 id="Velocity-js介绍："><a href="#Velocity-js介绍：" class="headerlink" title="Velocity.js介绍："></a>Velocity.js介绍：</h4><ul>
<li>在Web上可以使用CSS实现动画，但是css的动画样式表内容膨胀，丧失对动画时间的控制，且无法灵活地实现基于物理运动模型的动画设计。也可以使用JS来实现，并且JS还有一些CSS无法替代的优势。</li>
<li>但是CSS动画在Web中扮演重要的角色，可以独自的实现动画或是同JS协作实现。特别的，CSS在一些简单基本的动画交互上表现的特别好，比如<code>hover</code>和<code>focus</code>等（客观的看待CSS动画和JS动画，他们各有优点）</li>
<li>然而，对于几乎所有事情，JS都是不错的选择，因为他的能力太强大了。jQuery设计的动画非常糟糕，比如动画出现抖动、不平滑，这不是JS的错！jQuery是由许多原生JS写的函数组成的库，原本不是以动画引擎为目标设计的，而是为了使烦人的DOM操作变得方便高效。</li>
<li>Velocity动画库就是专为动画而设计，简单易用，功能强大。它模仿了jQuery的语法，可以同jQuery协作，也能独立地使用，且容易学习。</li>
<li>为了提高你所有动画的性能，只需要简单地将目前jQuery的<code>animate()</code>函数调用换成<code>velocity()</code>，这样的一个小改变，也能使你的网站有一个显著的性能提升。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="Velocity-js的方法的使用："><a href="#Velocity-js的方法的使用：" class="headerlink" title="Velocity.js的方法的使用："></a>Velocity.js的方法的使用：</h4><ul>
<li><p>要使用Velocity首先要引入它，如果想与JQ配合使用注意要先引入JQ再引入Velocity</p>
</li>
<li><p>Velocity 接收一个或更多的参数，</p>
<ul>
<li><p>只有第一个参数是是强制要求的，它可以是一个命令（如”<code>scroll</code>“），或者是由CSS属性值组成的对象（这些值是动画的目标值）；</p>
</li>
<li><p><font color="green">第二个参数是由动画附加选项组成的对象，比如过渡时长，张弛度，延时还有回调函数</font>：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(&#123; </span><br><span class="line">    left: <span class="string">"500px"</span> </span><br><span class="line">&#125;, &#123; </span><br><span class="line">    delay: <span class="number">1000</span>, </span><br><span class="line">    duration: <span class="number">500</span>,</span><br><span class="line">    easing: [ <span class="number">1000</span>, <span class="number">40</span> ], <span class="comment">// 1000是张驰度（提高整体动画的速度，可以更早到达终点，然后在终点附近来回反弹），40是摩擦系数（越小更快停下来）</span></span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>其中重要的属性都有默认值</strong>：</p>
<pre><code>&quot;`easing`&quot;的默认值是 swing；</code></pre><p>​    “<code>duration</code>“的默认值是 400ms;</p>
<p>​    其他的属性则是可选的</p>
</li>
<li><p><font color="red">你只能为一个CSS属性设置一个值，</font>所以 “<code>padding:&#39;10px 15px&#39;</code>“是不合法的。应该写成： <code>{paddingLeft:&quot;10px&quot;,paddingTop:&quot;15px&quot;,….}</code>。这样不仅表达清晰，而且意味着你可以特别指定每一个css分属性的值（注意变成了驼峰命名了）</p>
</li>
<li><p><font color="green"><strong>运动曲线<code>easing</code>（缓动）的取值</strong></font>：</p>
<ul>
<li>“<code>ease-in-out</code>“  ： 先加速再减速；</li>
<li>“<code>ease-in</code>“  ： 加速到恒定速度直到动画结束；</li>
<li>“<code>ease-out</code>“ ： 动画以恒定速度开始动画结束前减速</li>
</ul>
<p>Velocity还提供弹性动画功能（spring），以一个张弛度（默认500）和一个摩擦系数（默认20）作为他的参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(&#123; </span><br><span class="line">    width: <span class="string">"100px"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    easing:[ <span class="number">500</span>, <span class="number">20</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">较高的张弛度将提高整体速度和动画的反弹力度，较小的摩擦系数将提高动画结束时的速度。</font></p>
</li>
<li><p>第二个参数其他常用名称：</p>
<ul>
<li><code>begin</code>：为<code>begin</code>设置的函数会在动画开始前触发</li>
<li><code>complete</code>：为<code>complete</code>设置的函数会在动画完成时调用；</li>
<li><code>loop</code>：值为一个整数<code>n</code>或<code>true</code>，动画循环n次或无限循环；</li>
<li><code>delay</code>：动画开始之前等待时间。</li>
</ul>
</li>
<li><p>给参数传值的时候，如果CSS属性值没有给定确切的单位，那么时间默认：ms，长度默认：px，角度默认：deg。</p>
<p>为了表达清晰最好还是显示注明单位，如果有一个值不仅仅由数字表示，那么必须加引号。如：<code>duration:500</code>或<code>duration:&quot;500ms&quot;</code>都是合法的。</p>
<p>另外也允许传入简单的表达式作为CSS的属性值，但这些表达式只限于：<code>+=</code>， <code>-=</code>， <code>*=</code> ， <code>/=</code>，表示目标值在其本来的值的基础上加多少，减多少，乘多少，除多少，任何其他的表达式是不允许的。在Velocity动画引擎里使用这些快速功能保证了动画的逻辑可读性，使代码简洁清晰（消除了值的手工计算），而且向Velocity引擎提供更多有关于你动画意图的信息将有助于提高动画的性能。</p>
</li>
<li><p><font color="orange"><strong>楼层监听就是一种流行常见的js效果，并且无法使用css制作，你只需在目标元素上调用<code>velocity()</code>方法并传入”scroll”命令和过渡时间</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(<span class="string">"scroll"</span>, <span class="number">1000</span>); <span class="comment">// 浏览器用1000毫秒滚动到选定的元素</span></span><br><span class="line"></span><br><span class="line">$element.velocity(<span class="string">"scroll"</span>, &#123; </span><br><span class="line">    duration: <span class="number">1000</span>, <span class="comment">// 动画执行时间，也就是第一行代码中的第二个参数</span></span><br><span class="line">    offset: <span class="string">"-100px"</span> </span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// 滚动后元素上边缘距窗口上边缘的距离：offset（向上为负，向下为正）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>返回命令，在jQuery中，要使元素恢复成动画运行之前的状态，你要手动的设置，而在Velocity里只是一个运行”<code>reverse</code>“命令</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(&#123; </span><br><span class="line">    width: <span class="string">"100px"</span> </span><br><span class="line">&#125;, <span class="number">400</span>);  </span><br><span class="line"></span><br><span class="line">$element.velocity(<span class="string">"reverse"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>velocity的链式调用即在同一个元素上一个动画完成之后马上进入另一个动画，这样一个一个的执行下去：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(&#123; </span><br><span class="line">    width: <span class="string">"500px"</span>, </span><br><span class="line">    height: <span class="string">"300px"</span></span><br><span class="line">&#125;).velocity(&#123; </span><br><span class="line">    opacity: <span class="number">0</span> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这允许你不需要任何手动的计算,就能使那些复杂的、有时间限制的多级动画如当初计划的一样,一个接一个的执行。</p>
</li>
<li><p><font color="orange"><strong>velocity 允许制作基于颜色变换的动画</strong></font>，比如: <code>color</code>,<code>backgroundColor</code>,<code>borderColor</code>还有<code>outlineColor</code>.所有这些颜色的值只允许是16进制的字符串（黑色：#000000 , 脸谱蓝：#3b5998（for Facebook blue））.也许你想使用rgb格式的颜色设置,甚至指定颜色透明度（值介于0到1），只需简单地在CSS颜色名后面加上 “Red”，”Green”,”Blue” 或者”Alpha”即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(&#123; </span><br><span class="line">    borderColor: <span class="string">"#ffff00"</span>, </span><br><span class="line">    backgroundColorAlpha: <span class="number">0.6</span>,<span class="comment">//背景颜色透明度变到60% </span></span><br><span class="line">    colorBlue: <span class="number">200</span> <span class="comment">//rgb 方式 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置一些CSS3变换，允许你做一些2D或3D的动画，比如平移，扩大，旋转。</p>
<p>注意不会影响元素在网页中的位置，也不会影响周围 的元素在页面中的位置。 </p>
<p>Velocity支持下面的变换：</p>
<ul>
<li><code>translateX</code>: 从左向右沿x轴移动元素；</li>
<li><code>translateY</code>: 从上到下沿y轴移动元素；</li>
<li><code>rotateZ</code>: 关于z轴旋转元素；</li>
<li><code>rotateX</code>: 关于x轴旋转元素（看起来由里向外）；</li>
<li><code>rotateY</code>: 关于y轴旋转元素（由左到右）；</li>
<li><code>scaleX</code>: 成倍数改变元素宽度；</li>
<li><code>scaleY</code>: 成倍数改变元素高度</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(&#123; </span><br><span class="line">    rotateZ: <span class="string">"180deg"</span>, <span class="attr">scaleX</span>: <span class="number">2.0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>stop</code>结束当前动画，类似jq的<code>stop</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$element.velocity(<span class="string">"stop"</span>) <span class="comment">//结束当前动画（开始执行后续动画）</span></span><br><span class="line">$element.velocity(<span class="string">"stop"</span>,<span class="literal">true</span>)  <span class="comment">//结束当前和之后的动画</span></span><br><span class="line">$element.velocity(<span class="string">"finish"</span>); <span class="comment">//结束当前动画，并达到动画终点，类似jq的stop(true,true)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个velocity动画序列，并使用<code>$.Velocity.RunSequence</code>(变量)来执行动画序列，优点是可以反复使用，见例子 预定义动画和自定义动画：预定义动画是<code>velocity.ui</code>已经定义好的一些动画，而自定义动画则是我们自己定义一个动画</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 用动画库做一个固定定位的返回顶部按钮，要求下拉距离超过200px后才能显示出来，否则隐藏，点击时过渡到页面顶部</font></p>
<p><font size="4">2. 用动画库做一个旋转加缩放的方块的动画效果，要求时间4秒，旋转720deg，缩放从100%变成200%，颜色从红色到蓝色的循环动画</font></p>
<p><font size="4">3. 用动画库做一个导航下划线滑动特效</font></p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery-3-工具方法和高级方法</title>
    <url>/2019/09/28/jQuery-3-%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E5%92%8C%E9%AB%98%E7%BA%A7%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><h4 id="工具方法："><a href="#工具方法：" class="headerlink" title="工具方法："></a>工具方法：</h4><ul>
<li><p>JQ的方法（<code>$().css()</code>等）只能给JQ对象用；而工具方法（<code>$.type()</code>等）不仅可以给JQ用，也可以给原生JS用</p>
</li>
<li><p>工具方法目的是完善原生js方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.type(a); <span class="comment">// 可以判断比type方法更多的类型</span></span><br><span class="line"></span><br><span class="line">$.trim(str);   <span class="comment">// 去掉字符串前后空格(原生ES5中增加了trim()方法)</span></span><br><span class="line"></span><br><span class="line">$.inArray(<span class="string">'b'</span>,arr); <span class="comment">// 类似于 indexOf，如果第一个参数不存在返回-1(原生ES5中增加了数组的indexOf()方法)</span></span><br><span class="line"></span><br><span class="line">$.proxy(); <span class="comment">// 改变this指向，参数：函数和this的指向。等同于函数.call(this的指向)</span></span><br><span class="line"></span><br><span class="line">$.noConflict(); <span class="comment">// 防止冲突的，将返回值赋值给新变量，新变量就拥有$的操控权了</span></span><br><span class="line"></span><br><span class="line">$.parseJSON( <span class="string">'&#123;"name":"hello"&#125;'</span> ).name); <span class="comment">// 把字符串解析成json，等同于JSON.parse( '&#123;"name":"hello"&#125;' )</span></span><br><span class="line"></span><br><span class="line">$.makeArray(elems); <span class="comment">// 将类数组elems转换成数组，(原生ES5的[].slice.call(elems)方法)</span></span><br><span class="line"></span><br><span class="line">$.ajax();  <span class="comment">// 需要在服务器环境下，需要有地址页面，后面详解</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="高级方法："><a href="#高级方法：" class="headerlink" title="高级方法："></a>高级方法：</h4><ul>
<li><p><font color="orange"><strong>简便的节点筛选方法</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">JQ对象.siblings();  <span class="comment">// 找所有的兄弟节点，参数是筛选功能, 除当前元素</span></span><br><span class="line"></span><br><span class="line">JQ对象.nextAll();  <span class="comment">// 下面所有兄弟节点，参数是筛选功能</span></span><br><span class="line"></span><br><span class="line">JQ对象.prevAll();  <span class="comment">// 上面所有兄弟节点，参数是筛选功能</span></span><br><span class="line"></span><br><span class="line">JQ对象.parentsUntil()/nextUntil()/prevUntil();  <span class="comment">// 截止第一次出现筛选条件之前，无参数时和上面一样</span></span><br><span class="line"></span><br><span class="line">JQ对象.clone();  <span class="comment">// 复制元素，可以接收一个参数true ，可以复制之前的操作。为了防止id重复，应该用class做clone</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>元素的包装</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">JQ对象.wrap();     <span class="comment">// 包装</span></span><br><span class="line">$(<span class="string">"div"</span>).wrap($(<span class="string">"&lt;div&gt;"</span>)); <span class="comment">// 给每个div前都加一个div</span></span><br><span class="line"></span><br><span class="line">JQ对象.wrapAll();  <span class="comment">// 整体包装</span></span><br><span class="line">$(<span class="string">"div"</span>).wrapAll($(<span class="string">"&lt;div&gt;"</span>)); <span class="comment">// 给所有div前加一个整体的div</span></span><br><span class="line"></span><br><span class="line">JQ对象.wrapInner();  <span class="comment">// 内部包装</span></span><br><span class="line">$(<span class="string">"div"</span>).wrapInner($(<span class="string">"&lt;span&gt;"</span>)); <span class="comment">// 在每个div里添加一个span标签</span></span><br><span class="line"></span><br><span class="line">JQ对象.unwrap();    <span class="comment">// 删除包装 ( 删除父级 : 不包括body)</span></span><br><span class="line">$(<span class="string">"span"</span>).unwrap(); <span class="comment">// 删除了span元素的父元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>JQ集合中添加和截取</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">JQ对象.add();  <span class="comment">// 一个或多个元素添加到匹配的元素集合</span></span><br><span class="line">$(<span class="string">"div"</span>).add(<span class="string">"span"</span>).css(<span class="string">"background"</span>, <span class="string">"red"</span>); <span class="comment">// 把与div同级的span的背景颜色也改变为红色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elem = $(<span class="string">'div'</span>);  <span class="comment">// 获取div集合</span></span><br><span class="line"><span class="keyword">var</span> elem2 = elem.add(<span class="string">'span'</span>);  <span class="comment">// 在div集合中加入span集合</span></span><br><span class="line"></span><br><span class="line">JQ对象.slice(a,b);  <span class="comment">// 选中a到b（前）的元素，参数为下标，不是对象，左闭右开，只有一个参数时从这个参数开始，直到结束</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong><code>delegate()</code> ：事件委托</strong></font></p>
<p><font color="orange"><strong><code>undelegate()</code>： 终止事件委托</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'red'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'ul'</span>).delegate(<span class="string">'li'</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'red'</span>);</span><br><span class="line">    $(<span class="string">'ul'</span>).undelegate();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><font color="red">优点：</font></p>
<p>1、<font color="red">不用循环（同时会提高性能）；</font></p>
<p>2、<font color="red">js添加的元素也会获得事件</font></p>
</li>
<li><p><font color="orange"><strong><code>trigger()</code>主动触发，适合自定义事件</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).on(<span class="string">'show'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>);</span><br><span class="line">&#125;);  <span class="comment">// 绑定自定义事件函数</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div1'</span>).trigger(<span class="string">'show'</span>);  <span class="comment">// 触发自定义事件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong><code>ev.data</code>（获取数据）</strong></font></p>
<p><font color="orange"><strong><code>ev.target</code>（获取事件源）</strong></font></p>
<p><font color="orange"><strong><code>ev.type</code>（获取事件类型)</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).on(<span class="string">'click'</span>, &#123;<span class="attr">name</span>:<span class="string">'hello'</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    alert( ev.data.name );</span><br><span class="line">    alert( ev.target );</span><br><span class="line">    alert( ev.type );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong><code>$.extend</code>：扩展工具方法下的插件形式，语法：<code>$.xxx() $.yyy()</code></strong></font></p>
<p><font color="orange"><strong><code>$.fn.extend</code>：扩展到JQ对象下的插件形式，语法：<code>$().xxx() $().yyy()</code></strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.extend(&#123;   <span class="comment">// 工具方法例子</span></span><br><span class="line">    leftTrim : <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+/</span>,<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.fn.highlight1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// this已绑定为当前jQuery对象:</span></span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">'backgroundColor'</span>,<span class="string">'#fffceb'</span>).css(<span class="string">'color'</span>, <span class="string">'#d85030'</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;  <span class="comment">// 保证我们自己写的扩展方法也要能继续链式下去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn.highlight2 = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;   <span class="comment">// 带有默认值且用户可改版</span></span><br><span class="line">    <span class="keyword">var</span> bgcolor = options &amp;&amp; options.backgroundColor || <span class="string">'#fffceb'</span>; </span><br><span class="line">    <span class="keyword">var</span> color = options &amp;&amp; options.color || <span class="string">'#d85030'</span>; </span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">'backgroundColor'</span>, bgcolor).css(<span class="string">'color'</span>, color); </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展：传参改变元素的字体和大小</span></span><br><span class="line">$.fn.changeF = <span class="function"><span class="keyword">function</span> (<span class="params">str, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.css(&#123;</span><br><span class="line">        <span class="string">"fontFamily"</span>: str,</span><br><span class="line">        <span class="string">"fontSize"</span>: size</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"span"</span>).changeF(<span class="string">"楷体"</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>JQ动画：<code>JQ对象.animate();</code></strong></font>（支持链式操作）</p>
<blockquote>
<p>参数1：{} 运动的值和属性；</p>
<p>参数2：时间(运动快慢的)    默认:  400；</p>
<p>参数3：运动形式swing( 慢快慢，默认 )     linear(匀速);</p>
<p>参数4：回调函数 (到达指定时间后（终点）执行的动作)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).animate(&#123;</span><br><span class="line">        width: <span class="number">300</span> , </span><br><span class="line">        height: <span class="number">300</span></span><br><span class="line">    &#125; , <span class="number">4000</span> , <span class="string">"linear"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">123</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div1'</span>).stop();            <span class="comment">// 默认: 只会阻止当前运动，链式操作时不会阻止下一个动画 </span></span><br><span class="line">$(<span class="string">'#div1'</span>).stop(<span class="literal">true</span>);       <span class="comment">// 阻止当前和后续所有的运动</span></span><br><span class="line">$(<span class="string">'#div1'</span>).stop(<span class="literal">true</span>, <span class="literal">true</span>); <span class="comment">// 立即停止当前和后续所有的动画并移动至当前动画的终点</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div1'</span>).finish();  <span class="comment">// 立即停止当前和后续所有的动画并移动到所有动画的终点</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div1'</span>).delay(<span class="string">"400"</span>);  <span class="comment">// 延时，参数可以是数字或字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$(element).is(<span class="string">":animated"</span>))&#123;&#125; <span class="keyword">else</span>&#123;&#125; <span class="comment">// 判断当前元素是否在执行jq动画animate</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 做一个多个图片输入移入凸显效果</font></p>
<p><font size="4">2. 做一个左侧导航折叠效果</font></p>
<p><font size="4">3. 无缝滚动和3个一组的轮播图</font></p>
<p><font size="4">4. 淘宝好评</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"jquery-1.10.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 淘宝打评价</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"li"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).prevAll().css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"p"</span>).html(($(<span class="keyword">this</span>).prevAll().length + <span class="number">1</span>) + <span class="string">"星"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS部分：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">3px</span>;</span><br><span class="line">    borde</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery-2-DOM操作和事件操作</title>
    <url>/2019/09/28/jQuery-2-DOM%E6%93%8D%E4%BD%9C%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<center><font size="4">JQ的DOM操作和事件操作</font></center>
- #### JQ的DOM操作

<ul>
<li><p><font color="orange"><strong>元素的移动</strong></font>：下面的方法前面的对象不同，链式操作的结果就不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A.insertBefore(B)/A.before(B);  <span class="comment">// A放在B的前面/B放在A的前面</span></span><br><span class="line">A.insertAfter(B)/A.after(B);   <span class="comment">// A放在B的后面/B放在A的后面</span></span><br><span class="line"></span><br><span class="line">A.appendTo(B)/A.append(B);     <span class="comment">// A插到B的内容后/B插到A的内容后</span></span><br><span class="line">A.prependTo(B)/A.prepend(B);  <span class="comment">// A插到B的内容前/B插到A的内容前</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>元素的创建</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"&lt;li&gt;"</span>)  <span class="comment">//创建标签，如：</span></span><br><span class="line">$(<span class="string">"&lt;li class='box'&gt;"</span>).appendTo($(<span class="string">"ul"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>元素的删除</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).remove();   <span class="comment">// 删除该节点</span></span><br><span class="line">$(<span class="string">"div"</span>).detach();   <span class="comment">// 跟remove方法一样，只不过会保留删除这个元素的操作</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>偏移值、父级及有定位的父级</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#div2"</span>).offset().left;     <span class="comment">// 获取元素到屏幕的左距离</span></span><br><span class="line">$(<span class="string">"#div2"</span>).position().left;  <span class="comment">// 获取元素到有定位的父级的left值,把当前元素转化成类似定位</span></span><br><span class="line"></span><br><span class="line">元素.parent();         <span class="comment">// 获取元素的父级</span></span><br><span class="line">元素.offsetParent();  <span class="comment">// 获取元素最近的被定位的父级</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>JQ的遍历：<code>each()</code></strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"li"</span>).each(<span class="function"><span class="keyword">function</span>  (<span class="params">i, elem</span>) </span>&#123;   <span class="comment">// 参数：下标, 每个元素</span></span><br><span class="line">    $(elem).html(i);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"li"</span>).each(<span class="function"><span class="keyword">function</span>  (<span class="params">i, elem</span>) </span>&#123;   <span class="comment">// 参数：下标, 每个元素</span></span><br><span class="line">    $(<span class="keyword">this</span>).html($(<span class="keyword">this</span>).index());  <span class="comment">// 与第一种结果相同</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>判断真假方法：<code>is()</code>判断里面是否为真，返回布尔值，</strong></font>如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">JQ对象.is(<span class="string">":checked"</span>);   <span class="comment">// 判断单选/多选框是否被选中</span></span><br><span class="line">JQ对象.is(<span class="string">":animated"</span>);  <span class="comment">// 判断对象是否在执行动画</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="事件操作："><a href="#事件操作：" class="headerlink" title="事件操作："></a>事件操作：</h4><ul>
<li><p><font color="orange"><strong>事件的写法</strong></font>：前面说了JQ的事件没有<code>on</code>，除此以外还有一个<code>on()</code>方法绑定事件函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>);</span><br><span class="line">&#125;);  <span class="comment">//  事件绑定，参数事件和事件函数</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).on(<span class="string">'click mouseover'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="number">123</span>);</span><br><span class="line">&#125;);  <span class="comment">//  第一个参数可以是多个事件(空格分隔)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).on(&#123;</span><br><span class="line">    <span class="string">'click'</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">123</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'mouseover'</span> : <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        alert(<span class="number">456</span></span>);</span></span><br><span class="line"><span class="function">	&#125;</span></span><br><span class="line"><span class="function">&#125;);  // 也可以是对象，事件为属性，函数为值，一次为元素绑定多个事件函数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">$</span>(<span class="params"><span class="string">"div"</span></span>).<span class="title">one</span>(<span class="params"><span class="string">"click"</span>,function (</span>) </span>&#123; </span><br><span class="line">    alert(<span class="number">123</span>);</span><br><span class="line">&#125;);  <span class="comment">// 只执行事件一次的事件方法</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"div"</span>).off(<span class="string">"mouseover"</span>);  <span class="comment">// 解除绑定事件写法</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert( $(<span class="built_in">window</span>).scrollTop() );</span><br><span class="line">&#125;);  <span class="comment">// 滚动距离</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);   <span class="comment">// 滚动条事件</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).scrollTop(<span class="number">0</span>); <span class="comment">// 滚动条赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例：</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">"scroll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollTop());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>事件对象event</strong></font>：与原生js一样，JQ的事件对象也是传第一个参数ev，且没有兼容问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// ev : event对象 </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123; <span class="comment">// 键盘的event</span></span><br><span class="line">    <span class="keyword">switch</span>(ev.which) &#123;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">ev.pageX/Y; <span class="comment">// (相对于文档的) 鼠标坐标</span></span><br><span class="line">ev.clientX; <span class="comment">// (相对于可视区) 鼠标坐标</span></span><br><span class="line"></span><br><span class="line">ev.which; <span class="comment">// 原生的keyCode：键盘按键</span></span><br><span class="line"></span><br><span class="line">ev.preventDefault(); <span class="comment">// 阻止浏览器默认事件</span></span><br><span class="line">ev.stopPropagation(); <span class="comment">// 阻止事件冒泡的操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止默认事件 + 阻止冒泡的操作</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 做3个不同颜色的方块,鼠标移入第一个方块时,调换后两个方块的位置并让第二个div的内容变成第二个,点击时调换回来并让第三个div内容变成第三个</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"jquery-1.10.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击1，交换div1和div2的位置；</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击2，把div1放进div3</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击3:，把div2放在div3的内容之后</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 选择器选择位置，而不是id值</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"div"</span>).eq(<span class="number">0</span>).insertAfter($(<span class="string">"div"</span>).eq(<span class="number">1</span>));</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#div1"</span>).appendTo($(<span class="string">"#div3"</span>));</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#div2"</span>).appendTo($(<span class="string">"#div3"</span>));</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>, <span class="selector-id">#div2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div2</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 四个多选框，做一个点击多选框判断数量的效果，如果超过两个多选框被选中会提示最多选中两个多选框并取消选中</font></p>
<p><font size="4">3. 做一个固定到页面右下角的按钮,点击时返回页面的顶部,要求该按钮只有在滚动距离超过200px时才能看见</font></p>
<p><font size="4">4. 用JQ编写同一个元素既可以被鼠标拖拽，又可以上下左右控制元素移动</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> disX = ev.pageX - $(<span class="string">"div"</span>).offset().left;</span><br><span class="line">    <span class="keyword">var</span> disY = ev.pageY - $(<span class="string">"div"</span>).offset().top;</span><br><span class="line">    $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).css(&#123;</span><br><span class="line">            <span class="string">"left"</span>: ev.pageX - disX + <span class="string">"px"</span>,</span><br><span class="line">            <span class="string">"top"</span>: ev.pageY - disY + <span class="string">"px"</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    $(<span class="built_in">document</span>).mouseup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).off(<span class="string">"mousedown mousemove"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery-1-选择器和常用方法</title>
    <url>/2019/09/28/jQuery-1-%E9%80%89%E6%8B%A9%E5%99%A8%E5%92%8C%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<center><font size="4">jQuery选择器和常用方法</font></center>
- #### JQ简介

<blockquote>
<ol>
<li><p>JQ是一个优秀的JS库，风靡web界很多年，是很多优秀库的参考标准之一。但它只是辅助工具，它可以简化JS的复杂操作；不用再需要关心兼容性问题；提供大量的实用方法。</p>
</li>
<li><p>JQ设计思想：模拟了CSS选择元素的方法，提供多种筛选方法，且有其独有表达式选择；属性函数化，链式操作，取值赋值合体；与js可以共存，但不能混用</p>
</li>
</ol>
</blockquote>
<p>  ​    官网：<a href="http://www.jquery.com" target="_blank" rel="noopener">www.jquery.com</a>；</p>
<p>  ​    中文API：<a href="http:/www.css88.com/jqapi-1.9" target="_blank" rel="noopener">www.css88.com/jqapi-1.9</a></p>
<hr>
<ul>
<li><h4 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h4><ul>
<li><p><font color="orange"><strong>选择器</strong></font>：与css的选择器非常类似，还增加了一些css没有的方法和筛选功能，如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>);   <span class="comment">// 字符串是css的选择器，如标签名、class以及包含选择器、css3选择器等</span></span><br><span class="line">$(<span class="string">'li'</span>).filter(<span class="string">'.box'</span>);  <span class="comment">// 筛选方法filter，从选择到的元素中选取需要的，等同于多条件选择器li.box</span></span><br></pre></td></tr></table></figure>

<p><code>$()</code>是JQ的一个全局函数，用来获取元素(JQ对象)，然后可以对其使用JQ方法(filter)</p>
</li>
<li><p><font color="orange"><strong>属性函数化</strong></font>：上面获取的JQ对象只能使用JQ的方法，不能使用原生JS的方法和属性，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">$(<span class="string">'#div1'</span>).css(<span class="string">'backgroundColor'</span>:<span class="string">'red'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>链式操作</strong></font>：方法依次执行，由于每个方法内部设置了<code>return this</code>，因此方法执行后依然得到该对象，可以继续执行其他方法，如：</p>
<blockquote>
<p><code>html()</code>方法：传参数时，为div设置内容； 不传参数时，获取div中的内容</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).html(<span class="string">"hello"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"blue"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="JQ与JS对象"><a href="#JQ与JS对象" class="headerlink" title="JQ与JS对象"></a>JQ与JS对象</h4><ul>
<li><p>JQ选择器获取的是JQ对象，而JS获取的是原生DOM对象，<font color="red">他们不能混用</font>，如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).html = <span class="string">"123"</span>;  <span class="comment">//报错</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).css();  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写法区别：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">//页面加载</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="keyword">this</span>.innerHTML); </span><br><span class="line">&#125;; <span class="comment">//事件调用</span></span><br><span class="line">$(<span class="string">"#div1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert($(<span class="keyword">this</span>).html()); </span><br><span class="line">&#125;); <span class="comment">//原生this和JQ的this</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"body"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span><br><span class="line">$(<span class="string">"body"</span>).css(&#123;   <span class="comment">// 引入对象，可传参</span></span><br><span class="line">    <span class="string">"backgroundColor"</span>: <span class="string">"red"</span>,</span><br><span class="line">    <span class="string">"color"</span>: <span class="string">"white"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>原生DOM对象和jquery对象的转换</strong></font>：</p>
<blockquote>
<ol>
<li><p>js转jq方法：外面套一个<code>$()</code></p>
</li>
<li><p>jq转js原生方法：<code>.get(n)</code> / <code>[n]</code>, 将集合的第n个对象提出来</p>
</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jq对象.get(i)/jq对象.[i] <span class="comment">// 把jq对象转化为原生js对象，如jq对象[0]把第一个jq对象转化为原生DOM对象</span></span><br><span class="line">$(原生DOM对象)    <span class="comment">// 把原生DOM对象转化为jq对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oDiv1 = <span class="built_in">document</span>.querySelector(<span class="string">"#div1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js转jq方法：外面套一个$()</span></span><br><span class="line">$(oDiv1).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>); <span class="comment">// 只能是对象，不能是集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// jq转js原生方法：.get(n) /  [n], 将集合的第n个对象提出来</span></span><br><span class="line">$(<span class="string">"#div2"</span>).get(<span class="number">0</span>).style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">$(<span class="string">"#div2"</span>)[<span class="number">0</span>].style.backgroundColor = <span class="string">"red"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p><font color="orange"><strong>筛选功能</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).filter(<span class="string">'.box'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);  <span class="comment">// 过滤（当前元素），从前者里筛选后者</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).not(<span class="string">'.box'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);   <span class="comment">// filter的反义词，从前者里排除后者</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).has(<span class="string">'.box'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);   <span class="comment">// 包含后代元素满足has的前者, 最后筛选到的是class为box的 div元素</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).next().css(<span class="string">'background'</span>,<span class="string">'red'</span>); <span class="comment">// 下一个同级元素</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).find(<span class="string">'h2'</span>).eq(<span class="number">1</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>); <span class="comment">// 后代元素中满足find的后代, 最后筛选到的只要class为h2的 元素就可以</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; $(<span class="string">"li"</span>).length; i++) &#123;</span><br><span class="line">    <span class="comment">// console.log( $("li").eq(i).index() );  // 索引是当前元素在所有兄弟节点(具有相同父元素)中的位置 ， 控制所有的li</span></span><br><span class="line">    <span class="built_in">console</span>.log( $(<span class="string">"li:eq("</span> + i + <span class="string">")"</span> ).index() ); <span class="comment">// eq()第二种写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>属性方法：取值赋值合体，不传参为取值，传参为赋值</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).css();  <span class="comment">// 获取/修改元素的样式，2个参数时(字符串)：样式名和样式值；1个参数时(对象)：属性名为样式名，值为样式值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'input'</span>).val();  <span class="comment">// 获取/修改表单元素的value值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).text();  <span class="comment">// 获取/修改元素文本内容(不会获取标签)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).html();  <span class="comment">// 获取/修改元素内容(会获取标签)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).size();  <span class="comment">// 获取元素个数和length一样，length是JQ和js通用的属性，链式操作时用size()</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'title'</span>);  <span class="comment">// 没有方法属性的取值方法</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'title'</span>,<span class="string">'456'</span>);  <span class="comment">// 没有方法属性的赋值方法</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'box2 box4'</span>);  <span class="comment">// class添加类名</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">'box1'</span>);  <span class="comment">// class移除类名</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意赋值的时候如果JQ对象是多个元素时会自动遍历(赋相同的值)，取值时则只会取集合中的第一个元素的值</font>，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"jquery-1.10.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"li"</span>).html(<span class="string">"我是li"</span>); <span class="comment">// 赋值时自动遍历：所有li元素都显示"我是li"</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log($(<span class="string">"li"</span>).index()); <span class="comment">// 输出：0，只取第一个元素的下标</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>元素的尺寸：以宽为例，高同理</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).width();              <span class="comment">// 内容width</span></span><br><span class="line">$(<span class="string">'div'</span>).innerWidth();        <span class="comment">// 内容 width + padding</span></span><br><span class="line">$(<span class="string">'div'</span>).outerWidth();       <span class="comment">// 内容 width + padding + border(即盒子)</span></span><br><span class="line">$(<span class="string">'div'</span>).outerWidth(<span class="literal">true</span>);  <span class="comment">// 内容width + padding + border + margin(即盒子模型)</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：原生js的<code>offsetWidth</code>等属性是获取不到隐藏元素的值，而<code>outerWidth</code>可以</font></p>
</li>
<li><p><font color="orange"><strong>事件方法</strong></font>：JQ的事件写法和事件监听写法相同(没有<code>on</code>)，和属性一样也写成方法，参数为事件函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);  <span class="comment">// 点击事件</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div1'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// 鼠标移入/移除可以合成hover事件，两个事件函数会在移入和移出时触发</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>JQ新增效果：下面方法不传时间参数时默认400毫秒</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#div2'</span>).hide(<span class="number">3000</span>);    <span class="comment">// 隐藏，参数为时间(毫秒)</span></span><br><span class="line">$(<span class="string">'#div2'</span>).show(<span class="number">3000</span>);	 <span class="comment">// 展示，参数为时间(毫秒)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div2'</span>).fadeOut(<span class="number">1000</span>);  <span class="comment">// 透明，参数为时间(毫秒)</span></span><br><span class="line">$(<span class="string">'#div2'</span>).fadeIn(<span class="number">1000</span>);  <span class="comment">// 不透明，参数为时间(毫秒)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div2'</span>).slideUp(<span class="number">800</span>);      <span class="comment">// 收缩，参数为时间(毫秒)</span></span><br><span class="line">$(<span class="string">'#div2'</span>).slideDown(<span class="number">800</span>);   <span class="comment">// 展开，参数为时间(毫秒)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div2'</span>).fadeTo(<span class="number">1000</span>, <span class="number">0.5</span>);    <span class="comment">// 透明度到，参数为时间(毫秒)和透明度</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 利用JQ选择器做一个隔行变色效果</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"jquery-1.10.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"li.li1"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"blue"</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font size="4">2. <code>.li1</code>元素显示“我是li1”，点击li元素背景颜色变红</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"jquery-1.10.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"li"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;).filter(<span class="string">".li1"</span>).html(<span class="string">"我是li1"</span>); </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font size="4">3. 制作一个红色背景白色文字（div1）的div，当点击该元素时，背景色变成黄色，文字变成div2颜色为红色，再次点击时则变回来</font></p>
<p><font size="4">4. 用三个按钮和三个div方块编写一个选项卡，要求按钮在选项卡切换时变化背景颜色</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ctrl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>bbbb<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>cccc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"jquery-1.10.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 用三个按钮和三个div方块编写一个选项卡，要求按钮在选项卡切换时变化背景颜色</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = [<span class="string">"我是aaaa的内容"</span>,<span class="string">"我是bbbb的内容"</span>,<span class="string">"我是cccc的内容"</span>];</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).removeClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).addClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#content"</span>).html(arr[$(<span class="keyword">this</span>).index()]);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#ctrl</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 新标准4</title>
    <url>/2019/09/23/ECMAScript-%E6%96%B0%E6%A0%87%E5%87%864/</url>
    <content><![CDATA[<ul>
<li><h4 id="数组新方法"><a href="#数组新方法" class="headerlink" title="数组新方法"></a>数组新方法</h4><ul>
<li><p><font color="orange"><strong><code>forEach</code>方法</strong></font>：(遍历数组)  用于调用数组的每个元素，并将元素传递给回调函数，返回值为 undefined。语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisValue</span>);</span></span><br></pre></td></tr></table></figure>

<p>参数1为回调函数，参数2可选参数为回调函数的<code>this</code>(不传为undefined)；回调函数的参数1为遍历数组的每个数据，参数2为下标，参数3为被遍历的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value, index, array); <span class="comment">// 输出：1, 0, [1,2,3,4]; 2, 1, [1,2,3,4]...</span></span><br><span class="line">    array[index] == value;    <span class="comment">// true</span></span><br><span class="line">    sum += value;  </span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<ul>
<li><p><font color="orange"><strong><code>map</code>方法</strong></font>：<code>map()</code>定义在JavaScript的Array中，我们调用Array的<code>map()</code>方法，传入我们自己的函数，就得到了一个新的Array作为结果：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x * x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> newArr=arr.map(pow); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line">  <span class="comment">// 相当于arr的每个数据执行了一次pow方法</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> arr1 = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> **item);</span><br><span class="line">  <span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure>

<p>  <code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的<code>f(x)=x2</code>，还可以计算任意复杂的函数，比如，把Array的所有数字转为字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> newArr=arr.map(<span class="built_in">String</span>); <span class="comment">// ['1', '2', '3', '4', '5', '6', '7', '8', '9'] // 只需要一行代码。</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><font color="orange"><strong><code>from</code>方法</strong></font>：将两类对象转换为真正的数组：类似数组的对象和可遍历的对象，包括es6新增数据类型<code>Set</code>和<code>Map</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrLike = &#123; <span class="comment">// 类数组（伪数组）</span></span><br><span class="line">    <span class="string">"0"</span>: <span class="string">"a"</span>,</span><br><span class="line">    <span class="string">"1"</span>: <span class="string">"b"</span>,</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"c"</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrLike); <span class="comment">// ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.from(arrLike); <span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [a, b, c]</span></span><br></pre></td></tr></table></figure>

<p><code>from</code>还可以接受第二个参数，相当于对返回的数组使用<code>map</code>方法，用来对每个元素进行处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrLike, x =&gt; x * x);  <span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure>

<p><font color="red">除此以外，该方法还可以用字符串或者数组作为参数，字符串会按照每个字符拆分（类似<code>split(&quot;&quot;)</code>方法），而数组则会得到一个相同的新对象</font><font color="green"><strong>（数组的深拷贝）</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr1 = <span class="built_in">Array</span>.from(<span class="string">'hello world！'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr1);  <span class="comment">// ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d", "！"]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.from(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr == arr2);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><font color="orange"><strong><code>reduce</code>方法</strong></font>：Array的<code>reduce()</code>把一个函数作用在这个Array的[x1, x2, x3…]上，它必须接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<pre><code>比方说对一个Array求和，就可以用`reduce`实现：

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure>

要把[1, 3, 5, 7, 9]变换成整数13579，`reduce()`也能派上用场：

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">  arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y;</span><br><span class="line">  &#125;); <span class="comment">// 13579</span></span><br></pre></td></tr></table></figure></code></pre><ul>
<li><p><font color="orange"><strong><code>filter</code>方法</strong></font>：<code>filter</code>也是一个常用操作，用于把Array的某些元素过滤掉，然后返回剩下的元素，和<code>map()</code>类似，Array的<code>filter()</code>也接收一个函数。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是 true 还是 false 决定保留还是丢弃该元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">  <span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(r); <span class="comment">// [1, 5, 9, 15] 删除数组中数据为偶数的项</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">'C'</span>, <span class="string">'  '</span>];</span><br><span class="line">arr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> s &amp;&amp; s.trim();  <span class="comment">// trim()方法：去掉前后空格</span></span><br><span class="line">  &#125;);  <span class="comment">// 注意：IE9以下的版本没有trim()方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// ['A', 'B', 'C'] 把数组中的无效字符串删掉</span></span><br></pre></td></tr></table></figure>

<p><code>filter()</code>接收的回调函数可以有多个参数。第一个参数表示Array的某个元素，另外两个参数，表示元素的位置和数组本身：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123; <span class="comment">// 跟forEach()相同</span></span><br><span class="line">    <span class="built_in">console</span>.log(element); <span class="comment">// 依次打印'A', 'B', 'C'</span></span><br><span class="line">  <span class="built_in">console</span>.log(index); <span class="comment">// 依次打印0, 1, 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(self); <span class="comment">// self就是变量arr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>利用<code>filter()</code>，也可以去除Array的重复元素：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.indexOf(element) === index; <span class="comment">// 如果元素第一次出现的位置和下标相同，则返回这个元素； 反之则被删除</span></span><br><span class="line">  &#125;);  <span class="comment">// 总是返回第一个</span></span><br><span class="line">  </span><br><span class="line">  arr = arr.filter(<span class="function">(<span class="params">element, index, self</span>) =&gt;</span> self.indexOf(element) == index); <span class="comment">// 第二种表示方法</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><font color="orange"><strong><code>includes</code>方法（ES7）</strong></font>：在ES5，Array提供了<code>indexOf</code>用来查找某个元素的位置，不存在返回-1，这个函数在判断数组是否包含某个元素时有两个不足，一个是它会返回-1和元素的位置来表示是否包含，在定位方面是没问题，就是不够语义化。<strong>另一个问题是不能判断是否有NaN的元素(原因：NaN !== NaN)。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.indexOf(<span class="literal">NaN</span>));  <span class="comment">// 结果：-1</span></span><br></pre></td></tr></table></figure>

<p><code>includes</code>方法判断是否包含某一元素，除了不能定位外，解决了<code>indexOf</code>上面的问题。<strong>它返回true或false表示是否包含元素，对NaN一样有效</strong>。如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%s'</span>, arr1.includes(<span class="string">'c'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%s'</span>, arr1.includes(<span class="string">'z'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%s'</span>, arr1.includes(<span class="literal">NaN</span>))</span><br><span class="line"><span class="comment">//  结果：true false true</span></span><br></pre></td></tr></table></figure>

<p><code>includes()</code>函数的第二个参数表示判断的起始位置。如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%s'</span>, arr1.includes(<span class="string">'d'</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%s'</span>, arr1.includes(<span class="string">'d'</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%s'</span>, arr1.includes(<span class="string">'d'</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">//  结果：true true false</span></span><br></pre></td></tr></table></figure>

<p><font color="red">第二个参数也可以是负数，表示从右数过来第几个，但是不改变判断搜索的方向，搜索方向还是从左到右。</font></p>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 用数组的map方法封装一个参数为时间对象，返回值为时间格式（如：输出2019/04/23 16:51:04）</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">2. 用数组的from方法去一个数组的去重</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'orange'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr); <span class="comment">// 先创建 Set ，把数组变成键， 去重</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// 输出：Set(5) &#123;"apple", "strawberry", "banana", "pear", "orange"&#125;</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.from(arr1); <span class="comment">// 再把 set 转换为数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// 输出： ["apple", "strawberry", "banana", "pear", "orange"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 新标准3</title>
    <url>/2019/09/23/ECMAScript-%E6%96%B0%E6%A0%87%E5%87%863/</url>
    <content><![CDATA[<ul>
<li><h4 id="新函数写法"><a href="#新函数写法" class="headerlink" title="新函数写法"></a>新函数写法</h4><ul>
<li><p><font color="orange"><strong>箭头函数</strong></font>：ES6新增了一种新的函数：Arrow Function(箭头函数)。它的定义用的就是一个箭头：x =&gt; x * x 这个箭头函数相当于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="green"><strong>箭头函数相当于匿名函数</strong></font>，并且简化了函数定义。但箭头函数可以替换函数表达式，但是不能替换函数声明。箭头函数有两种格式，一种像上面的，只包含一个表达式，连{ … }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ … }和return：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> x * x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> - x * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">(x, y) =&gt; x * x + y * y  <span class="comment">// 不是一个参数要加括号</span></span><br><span class="line">() =&gt; <span class="number">3.14</span>  <span class="comment">// 无参数为一个空括号</span></span><br><span class="line">x =&gt; &#123; </span><br><span class="line">    foo: x; </span><br><span class="line">&#125;  <span class="comment">// SyntaxError，返回对象报错，因为和函数体的&#123;  &#125;有语法冲突，所以要改为：</span></span><br><span class="line">x =&gt; (&#123; </span><br><span class="line">  foo: x;  <span class="comment">// 返回对象 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>箭头函数看上去是匿名函数的一种简写，但<font color="red">箭头函数和匿名函数有个明显的区别：箭头函数内部的<code>this</code>是词法作用域，由上下文确定，也就是外层调用者obj。由于<code>this</code>在箭头函数中已经按照词法作用域绑定了，所以，用<code>call()</code>或者<code>apply()</code>调用箭头函数时，无法对<code>this</code>进行绑定。</font>箭头函数的this不受函数内部影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的this指向document</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 此时this指向window，这个匿名函数相当于直接调用，和document.onclick = function()无关</span></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 换成箭头函数</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 此时this指向document,跟它的上一级document.onclick = function()相同</span></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
</ul>
</li>
</ul>
<pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;  <span class="comment">//  ES5</span></span><br><span class="line">    name: <span class="string">'tom'</span>, </span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> person = &#123;  <span class="comment">//  ES6</span></span><br><span class="line">    name: <span class="string">'tom'</span>, </span><br><span class="line">    getName: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.name; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

在ES6中，会默认采用严格模式，因此this也不会自动指向window对象了，而箭头函数本身并没有this，因此this就只能是undefined，这种情况，如果你还想用this，就不要用使用箭头函数的写法。除此之外，箭头函数中也无法访问`arguments`对象。</code></pre><ul>
<li><p><font color="orange"><strong>函数默认参数</strong></font>：之前我们不能直接为函数指定默认参数，因此很多时候为了保证传入的参数具备一个默认值，我们常常使用如下的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = x || <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> y = y || <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add()); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure>

<p>上面这种方式有缺点，比如当我传入一个x值为false，这个时候仍然会取到默认值，就不是我们的本意了。</p>
<p>ES6函数默认值写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x = <span class="number">20</span>, y = <span class="number">30</span></span>) </span>&#123; <span class="comment">// ES6默认值</span></span><br><span class="line">    <span class="keyword">return</span> x + y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add()); <span class="comment">// 输出  50 （取默认值）</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出   3</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="generator-生成器"><a href="#generator-生成器" class="headerlink" title="generator(生成器)"></a>generator(生成器)</h4><ul>
<li><p>generator：ES6的新的数据类型。一个generator看上去像一个函数，但可以返回多次。</p>
<p>函数执行过程中，如果没有遇到return语句，控制权无法交回被调用的代码。定义如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">yield</span> x + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">yield</span> x + <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和函数不同的generator由<code>function*</code>定义，除了<code>return</code>语句，还可以用<code>yield</code>返回多次。</p>
<p>要编写一个产生斐波那契数列的函数，可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">max</span>) </span>&#123;  <span class="comment">// 函数只能返回一次，必须返回一个Array</span></span><br><span class="line">   	<span class="keyword">var</span> a = <span class="number">0</span>, b = <span class="number">1</span>, c = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">var</span> arr = [];</span><br><span class="line">       arr.push(a, b);</span><br><span class="line">       <span class="keyword">while</span> (arr.length &lt; max) &#123;</span><br><span class="line">           c = a + b; </span><br><span class="line">           a = b;</span><br><span class="line">           b = c;</span><br><span class="line">           arr.push(c);</span><br><span class="line">       &#125;</span><br><span class="line">   	<span class="keyword">return</span> arr;</span><br><span class="line">   &#125;</span><br><span class="line">   fib(<span class="number">5</span>);   <span class="comment">// 测试结果[0, 1, 1, 2, 3]</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span>* <span class="title">fib</span>(<span class="params">max</span>) </span>&#123;  <span class="comment">// generator就可以一次返回一个数，不断返回多次</span></span><br><span class="line">   	<span class="keyword">var</span> c = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">   	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           <span class="keyword">yield</span> a; <span class="comment">// 返回a</span></span><br><span class="line">           c = a + b;</span><br><span class="line">           a = b;</span><br><span class="line">           b = c; </span><br><span class="line">       &#125;</span><br><span class="line">   	<span class="keyword">return</span> a;</span><br><span class="line">   &#125;</span><br><span class="line">   fib(<span class="number">5</span>);  <span class="comment">// fib &#123;[[GeneratorStatus]]: "suspended", [[GeneratorReceiver]]: Window&#125;</span></span><br><span class="line">   <span class="comment">// fib(5)仅仅是创建了一个generator对象，还没有去执行它，一个方法是不断地调用next()方法：</span></span><br><span class="line">   <span class="keyword">var</span> f = fib(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// done为false时就是yield的返回值，而不是return 的返回值</span></span><br><span class="line">   <span class="built_in">console</span>.log(f.next()); <span class="comment">// &#123;value: 0, done: false&#125; </span></span><br><span class="line">   f.next(); <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">   f.next(); <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">   f.next(); <span class="comment">// &#123;value: 2, done: false&#125;   // value就是yield的返回值</span></span><br><span class="line">   f.next(); <span class="comment">// &#123;value: 3, done: true&#125;    // done表示这个generator是否已经执行结束了</span></span><br><span class="line">   f.next(); <span class="comment">// &#123;value: undefined, done: true&#125;  // 为true时value就是return的返回值，并且执行完毕，不要再调用next()了</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 第二个方法是直接用for ... of循环迭代generator对象，这种方式不需要我们自己判断done</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> fib(<span class="number">5</span>)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">   &#125; <span class="comment">// 依次输出0, 1, 1, 2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;red&quot;&gt;这里需要注意，一旦`next`方法的返回对象的done属性为true，`for...of`循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的3，不包括在for...of循环之中。&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;green&quot;&gt;**我们可以让函数内部无限循环，但是调用时限制范围：**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function* fibonacci() &#123;</span><br><span class="line">    let [a, b] = [0,1];</span><br><span class="line">    for(;1;) &#123; // 1为true, 无限循环</span><br><span class="line">        [a, b] = [b, a + b];</span><br><span class="line">        yield b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var i = 0;</span><br><span class="line">for (let n of fibonacci()) &#123; // 直接用for ... of循环迭代generator对象</span><br><span class="line">	console.log(n);</span><br><span class="line">    i++;</span><br><span class="line">    if (i==5) &#123; // 限制范围</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h4 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h4><ul>
<li><p><font color="orange"><strong><code>class</code>（类）</strong></font>：ES6为我们创建对象提供了新的语法，这就是Class语法。如果你对ES5中面向对象的方式比较熟悉的话，Class掌握起来也是非常迅速的，因为除了写法的不同，它并不会增加新的难以理解的知识点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123; <span class="comment">// 构造函数 </span></span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 原型方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  <span class="comment">// Person不是构造函数了</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;  <span class="comment">// 构造函数 </span></span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">        <span class="keyword">this</span>.age = age; </span><br><span class="line">    &#125; </span><br><span class="line">    getName() &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line">    &#125; <span class="comment">// 原型方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<p>  // 创建实例并调用<br>    var xiaoming = new Person(“小明”， 18);<br>  xiaoming.getName();<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;font color=&quot;orange&quot;&gt;**继承 `extends`**&lt;/font&gt;：ES6的继承就要简单很多</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  class Person &#123; // Student类继承Person类 </span><br><span class="line">      constructor(name, age) &#123; </span><br><span class="line">          this.name = name; </span><br><span class="line">          this.age = age; </span><br><span class="line">      &#125; </span><br><span class="line">      getName() &#123; </span><br><span class="line">          return this.name; </span><br><span class="line">      &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  class Student extends Person &#123; // 继承</span><br><span class="line">      constructor(name, age, classes) &#123; </span><br><span class="line">          super(name, age);  // 相当于ES5中的Person.call(this);</span><br><span class="line">          this.classes = classes; </span><br><span class="line">      &#125; </span><br><span class="line">      getClasses() &#123; </span><br><span class="line">          return this.classes; </span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  var xiaoming = new Student(&quot;小明&quot;, 14, 2);</span><br><span class="line">  console.log(xiaoming.getClasses()); // 输出：2</span><br><span class="line">  console.log(xiaoming.getName()); // 输出：小明</span><br></pre></td></tr></table></figure></p>
<pre><code>只需要一个`extends1`关键字，就可以实现继承了，不用像ES5那样去担心构造函数继承和原型继承，除此之外，我们还需要关注一个叫做`super`的方法。在继承的构造函数中，我们必须如上面的例子那么调用一次`super`方法，它表示构造函数的继承，与ES5中利用`call/apply`继承构造函数是一样的功能。</code></pre>]]></content>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 新标准2</title>
    <url>/2019/09/23/ECMAScript-%E6%96%B0%E6%A0%87%E5%87%862/</url>
    <content><![CDATA[<ul>
<li><h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><ul>
<li><p>解构（解析结构）：解析结构是一种全新的写法，我们看下面一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123;</span><br><span class="line">    className: <span class="string">'tiger-button'</span>,</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    clicked: <span class="literal">true</span>,</span><br><span class="line">    disabled: <span class="string">'disabled'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  当我们想要取得其中的2个值：loading与clicked时：</span></span><br><span class="line"><span class="keyword">var</span> loading = props.loading;  <span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> clicked = props.clicked;</span><br><span class="line"><span class="keyword">const</span> &#123; loading, clicked &#125; = props;  <span class="comment">//ES6</span></span><br><span class="line"><span class="comment">//  给一个默认值，当props对象中找不到loading时，loading就等于该默认值</span></span><br><span class="line"><span class="keyword">const</span> &#123; loading = <span class="literal">false</span>, clicked &#125; = props;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组也有属于自己的解析结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> a = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> b = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> c = arr[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = arr;</span><br></pre></td></tr></table></figure>

<p>数组以序列号一一对应，这是一个有序的对应关系。而对象根据属性名一一对应，这是一个无序的对应关系。根据这个特性，使用解析结构从对象中获取属性值更加具有可用性。</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><ul>
<li><p>在ES6中用<code>...</code>来表示展开运算符，它可以将数组方法或者对象进行展开。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="comment">// 这样，arr2 就变成了[1, 2, 3, 10, 20, 30];  对象也可以这样展开：</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj1, <span class="attr">d</span>: <span class="number">4</span>, <span class="attr">e</span>: <span class="number">5</span>, <span class="attr">f</span>: <span class="number">6</span> &#125;; <span class="comment">// &#123; a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>展开运算符还常常运用在解析结构之中，例如我们在封装组件的时候常常不确定props到底还有多少数据会传进来，就会利用展开运算符来处理剩余的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123; <span class="attr">size</span>: <span class="number">1</span>, <span class="attr">src</span>: <span class="string">'xxxx'</span>, <span class="attr">mode</span>: <span class="string">'si'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; size, ...others &#125; = props;</span><br><span class="line"><span class="built_in">console</span>.log(others); <span class="comment">// 输出除了size之外的部分</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>展开运算符还用在函数的参数中，来表示函数的不定参。只有放在最后才能作为函数的不定参，否则会报错。之前由于JavaScript函数允许接收任意个参数，于是我们就不得不用<code>arguments</code>来获取所有参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, more = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123; </span><br><span class="line">        more.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span> + a); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(more);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种写法很别扭，只是为了获得额外的more参数，用ES6标准将上面的函数改写为：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...more</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(more);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 结果:// a = 1// b = 2// Array [ 3, 4, 5 ]</span></span><br><span class="line">foo(<span class="number">1</span>); <span class="comment">// 结果:// a = 1// b = undefined// Array []</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="定义对象属性"><a href="#定义对象属性" class="headerlink" title="定义对象属性"></a>定义对象属性</h4><ul>
<li><p><code>Object.defineProperty(obj, prop, descriptor)</code>，参数一为定义属性的对象，参数二为要定义或修改的属性名，参数三为属性描述符(配置)</p>
</li>
<li><p>该方法允许精确添加或修改对象的属性。通过赋值操作添加的普通属性是可枚举的，能够在属性枚举期间呈现出来（<code>for...in</code> 或<code>Object.values</code> 方法），这些属性的值可以被改变，也可以被删除。这个方法允许修改默认的额外选项(或配置)。默认情况下，使用 <code>Object.defineProperty()</code>添加的属性值是不可修改的。</p>
</li>
<li><p>对象的数据属性Configurable,Enumerable,Writable,Value：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'name'</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span>,  <span class="comment">//为 true 时，该属性描述符才能够被改变和被删除。默认为 false。</span></span><br><span class="line">    enumerable:<span class="literal">false</span>,  <span class="comment">//为true时，该属性才能够出现在对象的枚举属性中。默认为 false。</span></span><br><span class="line">    writable:<span class="literal">false</span>,   <span class="comment">//为true时，value才能被赋值运算符改变。默认为 false。</span></span><br><span class="line">    value:<span class="string">'xiaoming'</span>,  <span class="comment">//该属性的值。可以是任何有效的 JavaScript 值。默认为 undefined。</span></span><br><span class="line">&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(person);  <span class="comment">//xiaoming，value值</span></span><br><span class="line"></span><br><span class="line">person.name=<span class="string">"qiang"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);  <span class="comment">//xiaoming，writable为false不可修改value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person[attr]); <span class="comment">//无结果，enumerable为false不可循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line"><span class="built_in">console</span>.log(person.name)<span class="comment">//xiaoming，configurable为false不可删除</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'name'</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">true</span> <span class="comment">//configurable为false不可修改，将抛出错误</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问器属性<code>getter</code>，<code>setter</code>。</p>
<ul>
<li><code>get</code>：一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。默认为 undefined。</li>
<li><code>set</code>：一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。默认为 undefined。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    _year: <span class="number">2004</span>, <span class="comment">// 属性前面加_，代表属性只能通过对象方法访问</span></span><br><span class="line">    edition: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book,<span class="string">'year'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>: function()&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(newValue) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._year = newValue;</span><br><span class="line">            <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">// 2004</span></span><br><span class="line">book.year = <span class="number">2006</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">// 2006</span></span><br><span class="line"><span class="built_in">console</span>.log(book.edition); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>Object.getOwnPropertyDescriptors</code>(ES8)：返回一指定对象自己所有的属性内容，并且属性内容只是自身直接定义的，而不是从object的原型继承而来的。参数1为目标对象，参数2可选参数为属性名，这个方法返回的值可能是<code>configurable</code>、<code>enumerable</code>、<code>writable</code>、<code>get</code>、<code>set</code> 和 <code>value</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> azatsBooks = &#123;  </span><br><span class="line">    books: [<span class="string">'React Quickly'</span>],</span><br><span class="line">    <span class="keyword">get</span> latest () &#123;</span><br><span class="line">        <span class="keyword">let</span> numberOfBooks = <span class="keyword">this</span>.books.length;</span><br><span class="line">        <span class="keyword">if</span> (numberOfBooks == <span class="number">0</span>) &#123;<span class="keyword">return</span> <span class="literal">undefined</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.books[numberOfBooks - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(azatsBooks, <span class="string">'books'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(azatsBooks, <span class="string">'latest'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(azatsBooks));</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 新标准</title>
    <url>/2019/09/23/ECMAScript-%E6%96%B0%E6%A0%87%E5%87%861/</url>
    <content><![CDATA[<ul>
<li><h4 id="ECMAScript-X新标准-简称ESx，如ES6"><a href="#ECMAScript-X新标准-简称ESx，如ES6" class="headerlink" title="ECMAScript X新标准(简称ESx，如ES6)"></a>ECMAScript X新标准(简称ESx，如ES6)</h4><blockquote>
<p>ES5于2009年发布，并且之后JavaScript开始了神奇的崛起之路。之后2015年发布了ES6，2016年发布了ES7，ES8 或称 ES2017 在六月底的时候由TC39委员会正式发布。在我们的课件里，知识点后面标准了ES7和ES8的就说明是该标准的知识，没标注的就是ES6</p>
<p>浏览器发布时就确定了JavaScript的版本，加上有用户还在使用IE6这种古老的浏览器，这导致你在写JavaScript的时候要照顾一下老用户，最新的ES标准在老用户的浏览器上是无法运行的。</p>
</blockquote>
<ul>
<li><p><font color="orange"><strong>strict模式(js的严格模式)</strong></font>，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误，启用strict模式的方法是在JavaScript代码的第一行写上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br></pre></td></tr></table></figure>

<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript</p>
</li>
<li><p>测试一下你的浏览器是否能支持strict模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;  <span class="comment">// 如果支持strict模式代码将报ReferenceError错误:</span></span><br><span class="line">abc = <span class="string">'Hello, world'</span>;</span><br><span class="line">alert(abc);  <span class="comment">//如果不报错，说明你的浏览器需要升级</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6深入学习地址：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a></p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="新写法"><a href="#新写法" class="headerlink" title="新写法"></a>新写法</h4><ul>
<li><p><font color="orange"><strong>求幂运算符</strong></font><code>**</code>（ES7）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span> ** <span class="number">3</span>;  <span class="comment">// 相当于7*7*7</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">7</span>,<span class="number">3</span>);  <span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">7</span>;</span><br><span class="line">a **= <span class="number">4</span>;  <span class="comment">// 等同于a = a ** 4;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>多行字符串(模板字符串)</strong></font>：由于多行字符串用<code>\n</code>写起来比较费事，所以ES6标准新增了一种多行字符串的表示方法，用``（1左侧的键）表示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">`多行</span></span><br><span class="line"><span class="string">字符串测试`</span>);</span><br><span class="line"><span class="comment">//字符串拼接方法(模板字符串同样可以用老的字符串拼接方法拼接)：</span></span><br><span class="line"><span class="keyword">var</span> name1 =<span class="string">"Mike"</span>;  </span><br><span class="line"><span class="keyword">var</span> age1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message1=<span class="string">"hello,"</span> + name1 + <span class="string">",your age is "</span> + age1;  <span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> message1=<span class="string">`hello,<span class="subst">$&#123;name1&#125;</span>,your age is <span class="subst">$&#123;age1&#125;</span>`</span>;  <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>字符串填充(ES8)</strong></font>：String padding方法在String object中加入了两个函数：<code>padStart</code> 和 <code>padEnd</code>，即填充开头和填充结尾，参数有两个，第一个参数为新字符串的长度，第二个为填充的字符(缺省时默认值为空字符串)，增加的长度超出pad的长度时会重复出现，新长度小于原字符串长度时不会变化:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"我是一段小说"</span>;</span><br><span class="line"><span class="keyword">var</span> pad = <span class="string">"——新卓越"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(<span class="number">8</span>));  <span class="comment">//"  我是一段小说"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(str.length+pad.length,pad));  <span class="comment">//"我是一段小说——新卓越"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">14</span>,pad));  <span class="comment">//"我是一段小说——新卓越——新"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong><code>let</code>与<code>const</code>声明</strong></font>：JavaScript的变量作用域实际上是函数内部，在for循环等语句块中无法定义具有局部作用域的变量，为解决块级作用域，ES6引入了新关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明块级作用域的变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    i += <span class="number">1</span>; <span class="comment">// SyntaxError,i未被定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在ES6之前是不能申明一个常量的，可以用全部大写的变量来表示”这是一个常量，不要修改它的值”。新的关键字<code>const</code>用来定义常量，<code>const</code>与<code>let</code>一样都具有块级作用域。<font color="red"><strong>现在我们常用<code>let</code>来声明一个值会被改变的变量，用<code>const</code>来声明一个值不会被改变的变量，也就是常量。</strong></font>使用<code>const</code>的场景要比使用<code>let</code>的场景多很多。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obDev = &#123; <span class="attr">a</span>: <span class="number">20</span>, <span class="attr">b</span>: <span class="number">30</span> &#125;;</span><br><span class="line">obDev.a = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obDev); <span class="comment">// Object &#123;a: 30, b: 30&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中当值为基础数据类型时，那么这里的值就是指值本身。而当值对应的为引用数据类型时，那么这里说的值则表示指向该对象的引用。这里需要注意，正因为该值为一个引用，只需要保证引用不变就可以，我们仍然可以改变该引用所指向的对象。</p>
</li>
<li><p><font color="orange"><strong>对象字面量</strong></font>：ES6针对对象字面量做了许多简化语法的处理，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> height = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> bg = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> json = &#123;<span class="attr">width</span>:width,<span class="attr">height</span>:height,<span class="attr">bg</span>:bg&#125;; <span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;width,height,bg&#125;; <span class="comment">//ES6</span></span><br><span class="line"><span class="comment">// 除了属性之外，对象字面量写法中的方法也可以有简写方式：</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;<span class="attr">fnName</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;alert(<span class="number">123</span>)&#125;&#125;  <span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;fnName()&#123;alert(<span class="number">123</span>)&#125;&#125; <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="新类型"><a href="#新类型" class="headerlink" title="新类型"></a>新类型</h4><ul>
<li><p>JavaScript的对象的键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的，ES6标准引入了新的数据类型<code>Map</code>和<code>Set</code>。</p>
<ul>
<li><font color="orange"><strong><code>Map</code>——是一组键值对的结构</strong></font>，具有极快的查找速度。假设要根据同学的名字查找对应的成绩，如果用Array实现，需要两个Array：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>];</span><br><span class="line"><span class="keyword">var</span> scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>];  </span><br><span class="line"><span class="comment">//查找"Michael"的成绩先要找到在第一个数组中的下标，再在另一个数组中根据下标找到对应数据，Array越长，耗时越长</span></span><br><span class="line"><span class="comment">//如果用Map实现，只需要一个"名字"-"成绩"的对照表，无论这个表有多大，查找速度都不会变慢</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</span><br><span class="line">m.get(<span class="string">'Michael'</span>); <span class="comment">// 95</span></span><br></pre></td></tr></table></figure>

<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。</p>
<p>Map具有以下方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 声明空Map</span></span><br><span class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>); <span class="comment">// 添加方法</span></span><br><span class="line">m.set(<span class="string">'Bob'</span>, <span class="number">59</span>);</span><br><span class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">// 判断方法，返回布尔值</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// 取值方法</span></span><br><span class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">// 删除方法</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p><font color="blue">由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值覆盖</font></p>
<ul>
<li><font color="orange"><strong><code>Set</code>——和Map类似，也是key的集合，但不存储value</strong>。</font>由于key不能重复，所以，在Set中没有重复的key。要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set：<strong>(可以用做去重)</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 声明空Set</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">'3'</span>]);<span class="comment">//重复元素在Set中自动被过滤</span></span><br><span class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;1, 2, 3, '3'&#125;</span></span><br><span class="line">s.add(<span class="number">4</span>);  <span class="comment">//添加方法，可以重复添加，但不会有效果</span></span><br><span class="line">s.delete(<span class="number">3</span>);  <span class="comment">//删除方法</span></span><br><span class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;1, 2, '3', 4&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong><code>iterable</code>类型和<code>for ... of</code>循环</strong></font>：遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。</p>
<p><font color="purple"><strong>具有iterable类型的集合可以通过新的for … of循环来遍历：</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123; </span><br><span class="line">    alert(x); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可能会问，<code>for ... of</code>循环和<code>for ... in</code>循环有何区别？for … in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性，当我们手动给Array对象添加了额外的属性后，for … in循环会将给Array添加的属性一起遍历</p>
</li>
<li><p><font color="orange"><strong>枚举(ES8)：<code>Object.values</code> and <code>Object.entries</code>。</strong></font></p>
<ul>
<li><p><code>Object.values</code>方法返回一个指定对象可枚举属性值的数组，与<code>for ... in</code>类似，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.values(&#123; <span class="attr">x</span>: <span class="string">'xxx'</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;);  <span class="comment">// ['xxx', 1]</span></span><br><span class="line"><span class="built_in">Object</span>.values([<span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'8'</span>]); <span class="comment">// ['e', 's', '8']</span></span><br><span class="line"><span class="built_in">Object</span>.values(&#123; <span class="number">10</span>: <span class="string">'xxx'</span>, <span class="number">1</span>: <span class="string">'yyy'</span>, <span class="number">3</span>: <span class="string">'zzz'</span> &#125;); <span class="comment">// ['yyy', 'zzz', 'xxx']，按照下标的顺序</span></span><br><span class="line"><span class="built_in">Object</span>.values(<span class="string">'es8'</span>); <span class="comment">// ['e', 's', '8']，有长度的伪对象也可以枚举</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>和<code>Object.values</code>类似，<code>Object.entries</code>方法返回一个给定对象可枚举属性值的数组[key, value]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.entries(&#123; <span class="attr">x</span>: <span class="string">'xxx'</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;);  <span class="comment">// [['x', 'xxx'], ['y', 1]]</span></span><br><span class="line"><span class="built_in">Object</span>.entries([<span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'8'</span>]); <span class="comment">// [['0', 'e'], ['1', 's'], ['2', '8']]</span></span><br><span class="line"><span class="built_in">Object</span>.entries(&#123; <span class="number">10</span>: <span class="string">'xxx'</span>, <span class="number">1</span>: <span class="string">'yyy'</span>, <span class="number">3</span>: <span class="string">'zzz'</span> &#125;); <span class="comment">// [['1', 'yyy'], ['3', 'zzz'], ['10', 'xxx']]</span></span><br><span class="line"><span class="built_in">Object</span>.entries(<span class="string">'es8'</span>); <span class="comment">// [['0', 'e'], ['1', 's'], ['2', '8']]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js键盘键值</title>
    <url>/2019/09/16/js%E9%94%AE%E7%9B%98%E9%94%AE%E5%80%BC/</url>
    <content><![CDATA[<h1 id="js键盘键值大全"><a href="#js键盘键值大全" class="headerlink" title="js键盘键值大全"></a>js键盘键值大全</h1><p>keycode    8 = BackSpace BackSpace<br>keycode    9 = Tab Tab<br>keycode   12 = Clear<br>keycode   13 = Enter<br>keycode   16 = Shift_L<br>keycode   17 = Control_L<br>keycode   18 = Alt_L<br>keycode   19 = Pause<br>keycode   20 = Caps_Lock<br>keycode   27 = Escape Escape<br>keycode   32 = space space<br>keycode   33 = Prior<br>keycode   34 = Next<br>keycode   35 = End<br>keycode   36 = Home<br>keycode   37 = Left<br>keycode   38 = Up<br>keycode   39 = Right<br>keycode   40 = Down<br>keycode   41 = Select<br>keycode   42 = Print<br>keycode   43 = Execute<br>keycode   45 = Insert<br>keycode   46 = Delete<br>keycode   47 = Help<br>keycode   48 = 0 equal braceright<br>keycode   49 = 1 exclam onesuperior<br>keycode   50 = 2 quotedbl twosuperior<br>keycode   51 = 3 section threesuperior<br>keycode   52 = 4 dollar<br>keycode   53 = 5 percent<br>keycode   54 = 6 ampersand<br>keycode   55 = 7 slash braceleft<br>keycode   56 = 8 parenleft bracketleft<br>keycode   57 = 9 parenright bracketright<br>keycode   65 = a A<br>keycode   66 = b B<br>keycode   67 = c C<br>keycode   68 = d D<br>keycode   69 = e E EuroSign<br>keycode   70 = f F<br>keycode   71 = g G<br>keycode   72 = h H<br>keycode   73 = i I<br>keycode   74 = j J<br>keycode   75 = k K<br>keycode   76 = l L<br>keycode   77 = m M mu<br>keycode   78 = n N<br>keycode   79 = o O<br>keycode   80 = p P<br>keycode   81 = q Q at<br>keycode   82 = r R<br>keycode   83 = s S<br>keycode   84 = t T<br>keycode   85 = u U<br>keycode   86 = v V<br>keycode   87 = w W<br>keycode   88 = x X<br>keycode   89 = y Y<br>keycode   90 = z Z<br>keycode   96 = KP_0 KP_0<br>keycode   97 = KP_1 KP_1<br>keycode   98 = KP_2 KP_2<br>keycode   99 = KP_3 KP_3<br>keycode 100 = KP_4 KP_4<br>keycode 101 = KP_5 KP_5<br>keycode 102 = KP_6 KP_6<br>keycode 103 = KP_7 KP_7<br>keycode 104 = KP_8 KP_8<br>keycode 105 = KP_9 KP_9<br>keycode 106 = KP_Multiply KP_Multiply<br>keycode 107 = KP_Add KP_Add<br>keycode 108 = KP_Separator KP_Separator<br>keycode 109 = KP_Subtract KP_Subtract<br>keycode 110 = KP_Decimal KP_Decimal<br>keycode 111 = KP_Divide KP_Divide<br>keycode 112 = F1<br>keycode 113 = F2<br>keycode 114 = F3<br>keycode 115 = F4<br>keycode 116 = F5<br>keycode 117 = F6<br>keycode 118 = F7<br>keycode 119 = F8<br>keycode 120 = F9<br>keycode 121 = F10<br>keycode 122 = F11<br>keycode 123 = F12<br>keycode 124 = F13<br>keycode 125 = F14<br>keycode 126 = F15<br>keycode 127 = F16<br>keycode 128 = F17<br>keycode 129 = F18<br>keycode 130 = F19<br>keycode 131 = F20<br>keycode 132 = F21<br>keycode 133 = F22<br>keycode 134 = F23<br>keycode 135 = F24<br>keycode 136 = Num_Lock<br>keycode 137 = Scroll_Lock<br>keycode 187 = acute grave<br>keycode 188 = comma semicolon<br>keycode 189 = minus underscore<br>keycode 190 = period colon<br>keycode 192 = numbersign apostrophe<br>keycode 210 = plusminus hyphen macron<br>keycode 211 =<br>keycode 212 = copyright registered<br>keycode 213 = guillemotleft guillemotright<br>keycode 214 = masculine ordfeminine<br>keycode 215 = ae AE<br>keycode 216 = cent yen<br>keycode 217 = questiondown exclamdown<br>keycode 218 = onequarter onehalf threequarters<br>keycode 220 = less greater bar<br>keycode 221 = plus asterisk asciitilde<br>keycode 227 = multiply division<br>keycode 228 = acircumflex Acircumflex<br>keycode 229 = ecircumflex Ecircumflex<br>keycode 230 = icircumflex Icircumflex<br>keycode 231 = ocircumflex Ocircumflex<br>keycode 232 = ucircumflex Ucircumflex<br>keycode 233 = ntilde Ntilde<br>keycode 234 = yacute Yacute<br>keycode 235 = oslash Ooblique<br>keycode 236 = aring Aring<br>keycode 237 = ccedilla Ccedilla<br>keycode 238 = thorn THORN<br>keycode 239 = eth ETH<br>keycode 240 = diaeresis cedilla currency<br>keycode 241 = agrave Agrave atilde Atilde<br>keycode 242 = egrave Egrave<br>keycode 243 = igrave Igrave<br>keycode 244 = ograve Ograve otilde Otilde<br>keycode 245 = ugrave Ugrave<br>keycode 246 = adiaeresis Adiaeresis<br>keycode 247 = ediaeresis Ediaeresis<br>keycode 248 = idiaeresis Idiaeresis<br>keycode 249 = odiaeresis Odiaeresis<br>keycode 250 = udiaeresis Udiaeresis<br>keycode 251 = ssharp question backslash<br>keycode 252 = asciicircum degree<br>keycode 253 = 3 sterling<br>keycode 254 = Mode_switch </p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>css不常用的属性</title>
    <url>/2019/09/15/css%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<ul>
<li><h4 id="a标签："><a href="#a标签：" class="headerlink" title="a标签："></a>a标签：</h4><ul>
<li><p>将a标签中的文字右移30px： <code>text-indent: 30px;</code></p>
<p>将a标签中的文字左移30px： <code>text-indent: -30px;</code></p>
</li>
<li><p>去除默认下划线：<code>text-decoration: none;</code></p>
<p>设置下划线： <code>text-decoration: underline;</code></p>
</li>
</ul>
</li>
<li><h4 id="input标签："><a href="#input标签：" class="headerlink" title="input标签："></a>input标签：</h4><ul>
<li><p>设置placeholder的文字颜色和大小：（考虑兼容性）</p>
<ul>
<li>WebKit browsers：<code>::-webkit-input-placeholder</code></li>
<li>Mozilla Firefox 19+: <code>::-moz-placeholder</code></li>
<li>Internet Explorer 10+: <code>::-ms-input-placeholder</code></li>
</ul>
</li>
<li><p>取消input获得焦点时的蓝色边框：<code>outline: none;</code></p>
</li>
<li><p>改变input标签光标的颜色，但不改变字体的颜色：<code>caret-color: red;</code></p>
</li>
</ul>
</li>
<li><h4 id="overflow属性："><a href="#overflow属性：" class="headerlink" title="overflow属性："></a><code>overflow</code>属性：</h4><table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">visible</td>
<td align="left">默认值。内容不会被修剪，会呈现在元素框之外。</td>
</tr>
<tr>
<td align="left">hidden</td>
<td align="left">内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td align="left">scroll</td>
<td align="left">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td align="left">auto</td>
<td align="left">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="vertical-align-：设置元素的垂直对齐方式"><a href="#vertical-align-：设置元素的垂直对齐方式" class="headerlink" title="vertical-align ：设置元素的垂直对齐方式"></a><code>vertical-align</code> ：设置元素的垂直对齐方式</h4><table>
<thead>
<tr>
<th>baseline</th>
<th>默认。元素放置在父元素的基线上。</th>
</tr>
</thead>
<tbody><tr>
<td>sub</td>
<td>垂直对齐文本的下标。</td>
</tr>
<tr>
<td>super</td>
<td>垂直对齐文本的上标</td>
</tr>
<tr>
<td>top</td>
<td>把元素的顶端与行中最高元素的顶端对齐</td>
</tr>
<tr>
<td>text-top</td>
<td>把元素的顶端与父元素字体的顶端对齐</td>
</tr>
<tr>
<td>middle</td>
<td>把此元素放置在父元素的中部。</td>
</tr>
<tr>
<td>bottom</td>
<td>把元素的顶端与行中最低的元素的顶端对齐。</td>
</tr>
<tr>
<td>text-bottom</td>
<td>把元素的底端与父元素字体的底端对齐。</td>
</tr>
<tr>
<td>length</td>
<td></td>
</tr>
<tr>
<td>%</td>
<td>使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 vertical-align 属性的值。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="鼠标触碰到a标签时文字右移效果"><a href="#鼠标触碰到a标签时文字右移效果" class="headerlink" title="鼠标触碰到a标签时文字右移效果"></a>鼠标触碰到a标签时文字右移效果</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: margin-left .<span class="number">4s</span> ease;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: margin-left .<span class="number">4s</span> ease;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: margin-left .<span class="number">4s</span> ease;</span><br><span class="line">    <span class="attribute">-o-transition</span>: margin-left .<span class="number">4s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>js原型和原型链</title>
    <url>/2019/09/07/js%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<center><font size="4">js原型和原型链</font></center>
- #### 构造函数原型 `prototype`：

<ul>
<li><p><font color="blue">构造函数通过原型分配的函数，是所有对象所共享的(<code>prototype</code>也是对象)</font></p>
</li>
<li><p>每一个构造函数都有一个<code>prototype</code>属性，指向另一个对象</p>
</li>
<li><p>可以把那些不变的方法，直接定义在<code>prototype</code>对象上，这样所有对象的实例就可以共享这些方法</p>
</li>
<li><p>一般情况下，公共属性定义到构造函数里面，公共的方法放到原型对象上</p>
</li>
</ul>
<ul>
<li><h4 id="对象原型-proto-："><a href="#对象原型-proto-：" class="headerlink" title="对象原型__proto__："></a>对象原型<code>__proto__</code>：</h4><ul>
<li><font color="blue">对象都会有一个属性<code>__proto__</code>指向构造函数的<code>prototype</code>原型对象</font>，之所以我们对象可以使用构造函数<code>prototype</code>原型对象的属性和方法，就是因为对象有<code>__proto__</code>原型的存在</li>
<li><code>ldh.__proto__ === Star.prototype     // true</code></li>
</ul>
<p><img src="/2019/09/07/js原型和原型链/C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571140116583.png" alt="1571140116583"></p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="原型和原型链："><a href="#原型和原型链：" class="headerlink" title="原型和原型链："></a>原型和原型链：</h4><blockquote>
<p>继承时遵循就近原则，即调用子类.方法时，如果子类中有该方法，则执行该方法，不执行父类的方法</p>
<p>super 关键字调用父类的构造函数，必须在子类的this 之前调用</p>
<ul>
<li>每个对象都连接到一个原型对象，并可从中继承属性。所有通过字面量创建的对象都具有同一个原型对象——<code>Object.prototype</code>既原型对象的引用。通过new关键字后跟构造函数创建的对象的原型，就是构造函数的<code>prototype</code>属性的值，比如通过<code>new Object()</code>创建的对象和字面量创建的对象一样也继承自<code>Object.prototype</code></li>
</ul>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = &#123;</span><br><span class="line">    name: <span class="string">"百度"</span>, </span><br><span class="line">    type: <span class="string">"加法"</span></span><br><span class="line">&#125;  <span class="comment">// 创建原型对象的一个方法：</span></span><br><span class="line">  <span class="built_in">Object</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">"原型对象的方法"</span>); </span><br><span class="line">  &#125;</span><br><span class="line">sum.add(); <span class="comment">// 在sum上调用原型对象的方法</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<pre><code>- **构造器**(`constructor`，包括: Object；Function；Array；Date；String等函数)才有prototype属性，**对象(除Object外)都拥有`__proto__`。**

  - &lt;font color=&quot;red&quot;&gt;构造器才有原型对象&lt;/font&gt;, `constructor`主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数
    - 而javascript中的对象就是一个指向prototype的指针和一个自身的属性列表。

- 原型链继承就是创建一个新的指针，指向构造器的prototype属性

- 用一张图来表示：`prototype`(原型)、`constructor`(构造器)、`__proto__`(构造器的原型——`constructor.prototype`)</code></pre><p>  <img src="/2019/09/07/js原型和原型链/C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569133688912.png" alt="1569133688912"></p>
<p>  所谓原型链，指的就是图中的<code>__proto__</code>这一条指针链！原型链的顶层就是<code>Object.prototype</code>，而这个对象的是没有原型对象的(null)。</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__); <span class="comment">// A &#123;&#125; (即构造器function A 的原型对象)</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__); <span class="comment">// Object &#123;&#125; (即构造器function Object 的原型对象)</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__.__proto__); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>prototype</code>、<code>_proto_</code>的区别以及<code>_proto_</code>的指向：</p>
<p><img src="/2019/09/07/js原型和原型链/C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569134062845.png" alt="1569134062845"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;  <span class="comment">//字面量方式</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__);  <span class="comment">//Object &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ === a.constructor.prototype); <span class="comment">//  true</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">//构造器方式</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__); <span class="comment">//A &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ === a.constructor.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> a1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;  <span class="comment">//Object.create()方式</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="built_in">Object</span>.create(a1);</span><br><span class="line"><span class="built_in">console</span>.log(a2.__proto__); <span class="comment">//Object &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ === a.constructor.prototype); <span class="comment">//false(此处即为图1中的例外情况)</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="原型链继承："><a href="#原型链继承：" class="headerlink" title="原型链继承："></a>原型链继承：</h4><ul>
<li><p>这是实现继承最简单的方式了，核心就一句话：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// 父类构造函数</span></span><br><span class="line">    <span class="keyword">this</span>.val = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;<span class="comment">// ...&#125;  // 子类构造函数</span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super();    <span class="comment">// 核心</span></span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub();</span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Sub();</span><br><span class="line">sub1.val = <span class="number">2</span>;</span><br><span class="line">sub1.arr.push(<span class="number">2</span>);</span><br><span class="line">alert(sub1.val);    <span class="comment">// 2</span></span><br><span class="line">alert(sub2.val);    <span class="comment">// 1</span></span><br><span class="line">alert(sub1.arr);    <span class="comment">// 1, 2</span></span><br><span class="line">alert(sub2.arr);    <span class="comment">// 1, 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>核心：拿父类实例来充当子类原型对象</strong></font></p>
</li>
<li><p>优缺点：</p>
<ul>
<li><p>优点：简单，易于实现；</p>
</li>
<li><p>缺点：</p>
<p>1、修改<code>sub1.arr</code>后<code>sub2.arr</code>也变了，因为来自原型对象的引用属性是所有实例共享的；</p>
<p>2、创建子类实例时，无法向父类构造函数传参</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 创建一个dog类，包含共有属性：name、age和varieties。在该类的原型对象上增加一个color属性和值，用<code>for in</code>遍历对象属性，然后通过<code>document.write</code>输出对象的全部属性和值</font></p>
<p><font color="blue">使用 for in 循环遍历对象的属性时，原型链上的所有属性都将被访问</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name,age,varieties</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name,</span><br><span class="line">        <span class="keyword">this</span>.age = age,</span><br><span class="line">        <span class="keyword">this</span>.varieties = varieties</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.color = <span class="string">"blue"</span>;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">"大黄"</span>, <span class="number">5</span>, <span class="string">"泰迪"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> dog) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(dog[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. <code>Array.prototype.slice.call()</code>的方法可以将一个伪数组(类数组)转换成真正的数组，先将伪数组转换成数组，并在它的构造器的原型上添加一个<code>numSort</code>方法，该方法按照数组的数字大小进行正序排列(提示：不用<code>sort</code>方法，用冒泡排序)，并且指出在转换之前它的构造器是谁，转换之后构造器又是谁？</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = &#123;</span><br><span class="line">    <span class="string">"0"</span>:<span class="number">111</span>,</span><br><span class="line">    <span class="string">"1"</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="string">"2"</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">"length"</span>:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__); <span class="comment">// 输出类数组构造器原型 =&gt; object</span></span><br><span class="line">arr = <span class="built_in">Array</span>.prototype.slice.call(arr); <span class="comment">// 伪数组转换为数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__); <span class="comment">// 输出数组构造器原型 =&gt; array</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.numSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.length - <span class="number">1</span> -i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[j] &gt; <span class="keyword">this</span>[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = <span class="keyword">this</span>[j];</span><br><span class="line">                <span class="keyword">this</span>[j] = <span class="keyword">this</span>[j+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">this</span>[j+<span class="number">1</span>] = temp; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">arr.numSort();</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">9</span>];</span><br><span class="line">arr1.numSort();</span><br></pre></td></tr></table></figure>

<p><font size="4">3. 创建一个animal父类(共有属性color、sex)，一个dog子类(共有属性name和wang())和一个cat子类(共有属性name和miao())，分别用两个子类创建一个实例，要求该实例可以通过继承为其设置color和sex，并用子类的共有属性设置对应属性和方法</font></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js组合继承和beget函数</title>
    <url>/2019/09/07/js%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF%E5%92%8Cbeget%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<center><font size="4">js组合继承和beget函数</font></center>
- #### 借用构造函数：

<ul>
<li><p>原型链继承存在2个致命缺点，于是出现了借用构造函数方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = val;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    Super.call(<span class="keyword">this</span>, val);   <span class="comment">// 核心</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Sub(<span class="number">2</span>);</span><br><span class="line">sub1.arr.push(<span class="number">2</span>);</span><br><span class="line">alert(sub1.val);    <span class="comment">// 1</span></span><br><span class="line">alert(sub2.val);    <span class="comment">// 2</span></span><br><span class="line">alert(sub1.arr);    <span class="comment">// 1, 2</span></span><br><span class="line">alert(sub2.arr);    <span class="comment">// 1</span></span><br><span class="line">alert(sub1.fun === sub2.fun);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>核心：借父类的构造函数来增强子类实例，等于是把父类的实例属性复制了一份给子类实例装上了(完全没有用到原型)</p>
</li>
<li><p>优缺点：<br>优点：1、解决了子类实例共享父类引用属性的问题；2、创建子类实例时，可以向父类构造函数传参<br>缺点：无法实现函数复用，每个子类实例都持有一个新的fun函数，太多了就会影响性能。</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="组合继承-最常用-："><a href="#组合继承-最常用-：" class="headerlink" title="组合继承(最常用)："></a>组合继承(最常用)：</h4><ul>
<li><p>目前我们的借用构造函数方式还是有问题(无法实现函数复用)，于是又搞出了组合继承：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>) </span>&#123; <span class="comment">// 只在此处声明基本属性和引用属性</span></span><br><span class="line">    <span class="keyword">this</span>.val = val,</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 在此处声明函数</span></span><br><span class="line">Super.prototype.fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// Super.prototype.fun3...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    Super.call(<span class="keyword">this</span>, val);   <span class="comment">// 核心</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super();    <span class="comment">// 核心</span></span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Sub(<span class="number">2</span>);</span><br><span class="line">alert(sub1.fun1 === sub2.fun1);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><font color="orange"><strong>核心：把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点，通过<code>Super.call(this);</code>继承父类的基本属性和引用属性并保留能传参的优点；通过<code>Sub.prototype = new Super();</code>继承父类函数，实现函数复用</strong></font></p>
</li>
<li><p>优缺点：</p>
<ul>
<li>优点：1、不存在引用属性共享问题；2、可传参；3、函数可复用</li>
<li>缺点：子类原型上有一份多余的父类实例属性，因为父类构造函数被调用了两次，生成了两份，而子类实例上的那一份屏蔽了子类原型上的。内存浪费，虽然比刚才情况好点，不过确实是瑕疵</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="寄生组合继承-最佳方式-："><a href="#寄生组合继承-最佳方式-：" class="headerlink" title="寄生组合继承(最佳方式)："></a>寄生组合继承(最佳方式)：</h4><ul>
<li><p>从名字就能看出又是对组合继承的优化，为了追求完美而创建的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beget</span>(<span class="params">obj</span>)</span>&#123; <span class="comment">// 生孩子函数 beget：龙beget龙，凤beget凤。</span></span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 只在此处声明基本属性和引用属性</span></span><br><span class="line">    <span class="keyword">this</span>.val = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">//  在此处声明函数</span></span><br><span class="line">Super.prototype.fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">//Super.prototype.fun3...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Super.call(<span class="keyword">this</span>);   <span class="comment">// 核心</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> proto = beget(Super.prototype); <span class="comment">// 核心</span></span><br><span class="line">proto.constructor = Sub;            <span class="comment">// 核心</span></span><br><span class="line">Sub.prototype = proto;              <span class="comment">// 核心</span></span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Sub();</span><br><span class="line">alert(sub.val);</span><br><span class="line">alert(sub.arr);</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>核心：用<code>beget(Super.prototype);</code>切掉了原型对象上多余的那份父类实例属性</strong></font></p>
</li>
<li><p>优缺点：<br>优点：完美了<br>缺点：除了用起来麻烦，另一方面是因为寄生组合式继承出现的比较晚，所以组合继承是最常用的，而这个理论上完美的方案却只是课本上的最佳方式了</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="beget函数"><a href="#beget函数" class="headerlink" title="beget函数"></a>beget函数</h4><ul>
<li><p><font color="green"><strong>原型式</strong></font>：完美方案用到了beget函数，也叫生孩子函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beget</span>(<span class="params">obj</span>) </span>&#123;   <span class="comment">// 生孩子函数 beget：龙beget龙，凤beget凤。</span></span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sup = <span class="keyword">new</span> Super(); <span class="comment">// 拿到父类对象</span></span><br><span class="line"><span class="keyword">var</span> sub = beget(sup);   <span class="comment">// 生孩子 核心</span></span><br><span class="line">sub.attr1 = <span class="number">1</span>;  <span class="comment">// 增强</span></span><br><span class="line">sub.attr2 = <span class="number">2</span>;  <span class="comment">// sub.attr3...</span></span><br><span class="line">alert(sub.val);     <span class="comment">// 1</span></span><br><span class="line">alert(sub.arr);     <span class="comment">// 1</span></span><br><span class="line">alert(sub.attr1);   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>核心：用生孩子函数得到得到一个没有实例属性的新对象，再逐步增强之(填充实例属性)，ES5提供了Object.create()函数，内部就是原型式继承，IE9+支持</strong></font></p>
</li>
<li><p>优缺点：<br>优点：从已有对象衍生新对象，不需要创建自定义类型(更像是对象复制，而不是继承。。)<br>缺点：1、原型引用属性会被所有实例共享，因为是用整个父类对象来充当了子类原型对象，所以这个缺陷无可避免；2、无法实现代码复用(新对象是现取的，属性是现添的，都没用函数封装，怎么复用)</p>
</li>
<li><p><font color="green"><strong>寄生式</strong></font>：这是一种模式(套路)，并不是只能用来实现继承：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beget</span>(<span class="params">obj</span>)</span>&#123;   <span class="comment">// 生孩子函数 beget：龙beget龙，凤beget凤。</span></span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSubObject</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone = beget(obj); <span class="comment">// 创建新对象 核心</span></span><br><span class="line">    clone.attr1 = <span class="number">1</span>; <span class="comment">// 增强</span></span><br><span class="line">    clone.attr2 = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//clone.attr3...</span></span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sub = getSubObject(<span class="keyword">new</span> Super());</span><br><span class="line">alert(sub.val);     <span class="comment">// 1</span></span><br><span class="line">alert(sub.arr);     <span class="comment">// 1</span></span><br><span class="line">alert(sub.attr1);   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>核心：给原型式继承穿了个马甲而已，看起来更像继承了(上面介绍的原型式继承更像是对象复制)注意：beget函数并不是必须的，换言之，创建新对象 -&gt; 增强 -&gt; 返回该对象，这样的过程叫寄生式继承，新对象是如何创建的并不重要(用beget生的，new出来的，字面量现做的都可以)</strong></font></p>
</li>
<li><p>优缺点：<br>优点：还是不需要创建自定义类型<br>缺点：无法实现函数复用(没用到原型，当然不行)</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js正则表达式量词匹配和面向对象</title>
    <url>/2019/09/07/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%87%8F%E8%AF%8D%E5%8C%B9%E9%85%8D%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<center><font size="5">js正则表达式量词匹配和面向对象</font></center>
- #### 正则表达式匹配相似项：中括号

<ul>
<li><p>一组相似的元素，用<code>[]</code>表示，整体代表一个字符，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;  </span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/a[bde]c/</span>; <span class="comment">// []里面是或的关系</span></span><br><span class="line">alert(re.test(str));</span><br></pre></td></tr></table></figure>
</li>
<li><p>连字符(<code>-</code>)：可以是任意从大到小的范围，如<code>[a-z0-9A-Z]</code>，其中任意一个都匹配成功， 如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;  </span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/a[a-z]c/</span>;</span><br><span class="line">alert(re.test(str));</span><br></pre></td></tr></table></figure>
</li>
<li><p>排除(<code>^</code>)：若写在<code>[]</code>里面，则代表排除的意思，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;  </span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/a[^bde]c/</span>;</span><br><span class="line">alert(re.test(str));</span><br></pre></td></tr></table></figure>
</li>
<li><p>限定开始位置(<code>^</code>)和限定结束位置(<code>$</code>)，他们本身不占位置</p>
</li>
</ul>
<ul>
<li><h4 id="正则表达式量词：大括号，匹配的字符最少和最多出现的数量"><a href="#正则表达式量词：大括号，匹配的字符最少和最多出现的数量" class="headerlink" title="正则表达式量词：大括号，匹配的字符最少和最多出现的数量"></a>正则表达式量词：大括号，匹配的字符最少和最多出现的数量</h4><ul>
<li><p><code>{4,7}</code> ： 最少出现4次，最多出现7次</p>
</li>
<li><p><code>{4,}</code>： 最少出现4次，最多不限</p>
</li>
<li><p><code>{4}</code>： 恰好出现4次</p>
</li>
<li><p>特殊情况：</p>
<ul>
<li><code>+</code>：出现至少1次，完整写法{1,}</li>
<li><code>?</code>：出现0-1次，完整写法{0,1}</li>
<li><code>*</code>：至少出现0次，完整写法{0,}*</li>
</ul>
<p><img src="/2019/09/07/js正则表达式量词匹配和面向对象/C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569067817463.png" alt="1569067817463"></p>
</li>
<li><p>贪婪和非贪婪匹配：<em>、+或?限定符都是贪婪的，因为它们会尽可能多的匹配文字，<font color="red">*</font></em>只有在它们的后面加上一个?就可以实现非贪婪或最小匹配**。如我们想匹配一个字符串中的标签：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/&lt;.*&gt;/</span>; <span class="comment">// 贪婪：开始小于符号到最后一个大于符号之间的所有内容</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/&lt;.*?&gt;/</span>; <span class="comment">// 非贪婪：第一个标签的头标签</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="面向对象、面向过程和构造函数："><a href="#面向对象、面向过程和构造函数：" class="headerlink" title="面向对象、面向过程和构造函数："></a>面向对象、面向过程和构造函数：</h4><ul>
<li><p>面对对象：把数据及对数据的操作方法放在一起，作为一个相互依存的整体——对象。对同类对象抽象出其共性，形成类。类中的大多数数据，只能用本类的方法进行处理。类通过一个简单的外部接口与外界发生关系，对象与对象之间通过消息进行通信。程序流程由用户在使用中决定。</p>
</li>
<li><p>面向过程：自顶向下顺序执行，逐步求精；其程序结构是按功能划分为若干个基本模块，这些模块形成一个树状结构；各模块之间的关系尽可能简单，在功能上相对独立；每一模块内部均是由顺序、选择和循环三种基本结构组成；其模块化实现的具体方法是使用子程序。程序流程在写程序时就已决定。</p>
</li>
<li><p>创建对象的方式包括两种：对象字面量和使用new表达式。对象字面量是一种灵活方便的书写方式，我们之前经常使用’var 变量名 = 对象’这种方式创建一个变量。</p>
</li>
<li><p>js里没有类的概念，也就没有面向对象，但new的方法却模拟了面向对象，因此new(var 变量名 = new 函数())也就成了唯一能够区别一般函数和构造函数的方法。</p>
</li>
<li><p>若一个函数的返回值是引用类型(对象)的数据，作为构造函数用new运算符执行构造时，运算的结果将被返回值取代，其内的this值丢失了，取而代之的是被返回的对象；若一个函数的返回值是一个值类型(this或者非对象)，执行构造时，它的返回值将被丢弃，结果仍然是this所引用的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.a = <span class="number">10</span>; <span class="comment">// 成员变量</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;  <span class="comment">//返回值是对象</span></span><br><span class="line">      <span class="comment">// return 1;  //返回值是值类型或undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="keyword">new</span> demo();</span><br><span class="line">  <span class="keyword">var</span> n = demo();</span><br><span class="line">  alert(m);   <span class="comment">// 分别返回return后面的闭包和Object</span></span><br><span class="line">alert(n);   <span class="comment">// 分别返回return后面的闭包和1</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<ul>
<li><p><font color="green"><strong>在用new来调用一个构造函数的时候，发生了下面四件事</strong>：</font></p>
<ul>
<li><code>var obj ={};</code>   //    创建一个空对象obj</li>
<li><code>obj.__proto__ = test.prototype;</code>   //    创建一个指向<code>test.prototype</code>（构造函数原型对象）的指针,<code>__proto__</code>：构造器原型</li>
<li><code>test.call(obj);</code>// 将构造函数的作用域赋给新对象，因此m函数中的this指向新对象obj，然后再调用test函数。于是我们就给obj对象赋值了一个成员变量a，这个成员变量的值是1。<font color="purple"><strong>除了<code>call</code>外，改变this指向的还有<code>aplly</code></strong></font>，它们是函数调用的一种特殊方法。</li>
<li><code>return obj;</code> // 返回新对象obj。</li>
</ul>
</li>
<li><p>函数内的变量有如下分类：</p>
<ul>
<li>其中例子中写成<code>this.a</code>代表类的成员变量(共有变量，实例变量，每个实例独立的存储)</li>
<li><code>函数名.b</code>是类变量(函数的属性，静态变量，所有实例共享存储)</li>
</ul>
</li>
<li><p>而var定义的则是局部变量(私有变量，函数执行时临时存储)</p>
</li>
<li><p><code>instanceof</code>：要求其左边是一个对象，右边是对象类的名字或构造函数。如果左边的object是class或构造函数的实例，则<code>instanceof</code>运算符返回true。如果左边的object不是指定class或函数的实例，或object为null，则返回false。</p>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">写一个去掉字符串中的前后空格的方法</font></p>
<ol>
<li><p>输入框里输入</p><h3 class="title">标题</h3>aaaaa，通过匹配替换得到’标题aaaaa’<p></p>
</li>
<li><p>将一串数字字符串加上千分符</p>
</li>
<li><p>查看以下正则并说出他们匹配的是什么</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">^\w+@[a-z0<span class="number">-9</span>]+(\.[a-z]+)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$  <span class="comment">// 邮箱地址</span></span><br><span class="line">[a-zA-Z]+:<span class="comment">//[^\s]*  // 网址</span></span><br><span class="line">[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>,<span class="number">9</span>&#125;  <span class="comment">// qq号</span></span><br><span class="line">^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">5</span>&#125;$   <span class="comment">// 邮编</span></span><br><span class="line">[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">14</span>&#125;|[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">17</span>&#125;|[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">16</span>&#125;x <span class="comment">// 身份证号</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下面的函数是不是构造函数(返回值为非对象)，若是则写出它的实例化对象oF，并判断oF是构造函数F的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="comment">// 返回值为非对象，因此是构造函数</span></span><br><span class="line"><span class="keyword">var</span> oF = <span class="keyword">new</span> F();</span><br><span class="line"><span class="built_in">console</span>.log(oF <span class="keyword">instanceof</span> F);</span><br><span class="line"><span class="built_in">console</span>.log(oF <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js正则表达式元字符和方法</title>
    <url>/2019/09/07/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%83%E5%AD%97%E7%AC%A6%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<center><font size="5">js正则表达式元字符和方法</font></center>
> 只能处理字符串

<ul>
<li><h4 id="正则表达式的使用："><a href="#正则表达式的使用：" class="headerlink" title="正则表达式的使用："></a>正则表达式的使用：</h4><ul>
<li><p>正则表达式，由人提供给计算机，让计算机能够读懂人类的规则。它的优缺点：可以大大简化代码；性能也比正常的函数方法要好；但只能操作字符串</p>
</li>
<li><p>为什么要用正则表达式，试着用字符串操作的方法实现一个获得一个字符串中所有连续的数字，并装进一个数组，字符串如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'haj123sdk54hask33dkhalsd879'</span>;</span><br><span class="line">str.match(<span class="regexp">/\d+/g</span>); <span class="comment">// 用正则表达式的方法实现</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>正则表达式的声明(两个//)：推荐使用字面量写法，这里/a/的a没有实际意义，就是为了防止计算机把它当成注释为占位用的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/a/</span>;  <span class="comment">// 字面量写法</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'a'</span>);   <span class="comment">// 构造函数实例化写法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>正则表达式不能传参，或者说两个/里面的只是正则的规则，不能是字符串、布尔值甚至变量，因此<strong>如果我们想要传参，必须用构造函数实例化写法</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>特殊元字符：</strong></font></p>
<ul>
<li><code>\</code> :    转义字符</li>
<li><code>.</code> :    匹配除了\n之外的任意一个字符(.真正的点)</li>
<li><code>\n</code> :    匹配换行符</li>
<li><code>\d</code> :    0-9之间的任意一个数字(\d只占一个位置)</li>
<li><code>\D</code>:   匹配除了数字(\d)的所有字符</li>
<li><code>\w</code>:  匹配数字，字母 ，下划线(0-9 a-z A-Z _)</li>
<li><code>\W</code> :  匹配除了数字，字母 ，下划线(0-9 a-z A-Z _)(\w)的字符</li>
<li><code>\s</code>:   空格或者空白等（包含空格、制表符、换页符等）</li>
<li><code>\S</code> :   除了\s</li>
<li><code>\b</code> :   匹配边界 字符串的开头和结尾 空格的两边都是边界 =&gt; 不占用字符串位数</li>
<li><code>\B</code> :   匹配除了边界(\b )</li>
<li><code>\t</code> ： 匹配一个制表符（一个TAB键：四个空格）</li>
<li><code>^</code> ： 以哪一个元字符作为开始</li>
<li><code>$</code> ： 以哪一个元字符作为结束</li>
<li><code>x|y</code> ： x或者y中的一个字符 </li>
<li><code>[xyz]</code> ： x或者y或者z中的一个字符，如[asjhdeyuy]</li>
<li><code>[^xy]</code> ： 除了x/y以外的任意字符</li>
<li><code>[a-z]</code> ： 指定a-z这个范围中的任意字符，如[0-9a-zA-Z_] === \w(数字、字母、下划线)</li>
<li><code>[^a-z]</code> ：上一个的取反（\W）</li>
<li><code>{}</code> ： 正则中的分组符号</li>
<li><code>(?:)</code> ：只匹配不捕获</li>
<li><code>(?=)</code> ： 正向预查</li>
<li><code>(?!)</code> ：负向预查</li>
</ul>
</li>
<li><p><font color="orange"><strong>正则表达式常用的修饰符：img</strong></font></p>
<ul>
<li><code>i</code> ：(ignoreCase)  忽略大小写匹配</li>
<li><code>m</code> ：(multiline)  可以进行多行匹配</li>
<li><code>g</code> ： (global)   全局匹配</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="正则表达式的方法："><a href="#正则表达式的方法：" class="headerlink" title="正则表达式的方法："></a>正则表达式的方法：</h4><ul>
<li><p><code>test</code>：匹配字符串，如果成功就返回真，失败则返回假，语法：<code>正则.test(字符串)</code>，返回的是布尔值，用途是判断，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdef'</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/b/</span>;     <span class="comment">//里面是个整体，如果是bd则是假</span></span><br><span class="line">alert(re.test(str));</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>search</code>：匹配字符串，<strong>如果成功返回匹配成功的位置</strong>，如果失败就返回-1(类似<code>indexOf</code>)，语法：<code>字符串.search(正则);</code>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdef'</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/B/i</span>; <span class="comment">// 在正则里默认是区分大小写的，如果不区分在正则的最后加标识i</span></span><br><span class="line">alert(str.search(re)); </span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'B'</span>,<span class="string">'i'</span>); <span class="comment">// 构造函数实例化时的标识符写法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>match</code>：匹配字符串，<strong>如果成功返回数组</strong>，如果失败就返回null，语法：<code>字符串.match(正则)</code>，如开始的例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.match(<span class="regexp">/\d+/g</span>);  <span class="comment">// +是它前面的元字符至少出现一次，标识符g(全局匹配)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>replace</code>：匹配字符串，匹配成功的字符会替换成新的字符串，语法：<code>字符串.replace(正则，新的字符串)</code>，第二个参数可以是字符串也可以是回调函数，回调函数的第一个参数就是每次匹配成功的字符，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'aaa'</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="comment">// 第二个参数是字符串</span></span><br><span class="line">str = str.replace(re,<span class="string">'b'</span>);</span><br><span class="line">alert(str);</span><br><span class="line"><span class="comment">// 第二个参数是回调函数</span></span><br><span class="line">str = str.replace(<span class="regexp">/a/</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"b"</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h4 id="正则表达式匹配子项：小括号"><a href="#正则表达式匹配子项：小括号" class="headerlink" title="正则表达式匹配子项：小括号"></a>正则表达式匹配子项：小括号</h4><ul>
<li><p>正则匹配的整体叫母体，<strong>从左开始第一个小括号里匹配的叫做母体的第一个子项，以此类推。</strong>直接操作母体往往会比较麻烦，可以把母体分割成多个子项去操作。</p>
</li>
<li><p><code>replace</code>函数的第二个参数就是匹配成功的母体的第一个子项，第三个参数是第二个子项，以此类推。看看下面的例子分别会弹出什么：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'2017-6-7'</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\d+-/g</span>;  <span class="comment">// /\d-+/g和/(\d-)+/g</span></span><br><span class="line">str.replace(re,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">    alert($<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>匹配重复项\n(n是个大于等于1的数字小于等于最大子项的整数)，与第n个子项重复的项(复制第n个子项)，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\w\w/</span>; <span class="comment">// 分别匹配一个字符</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/(\w)\1/</span>; <span class="comment">// 匹配一个字符后再匹配一次该字符，\1表示匹配第一个字项，若是匹配第二个子项则是\2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>match</code>用小括号()得到结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/abc/</span>;(<span class="regexp">/(a)(b)(c)/</span>) <span class="comment">//re不能加全局匹配g</span></span><br><span class="line">alert(str.match(re));</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><font size="5" color="gree">练习：</font></p>
<p><font size="4">1. 正则处填写正确的代码来判断当前字符串全是数字或者不全是数字</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'37482t9348791'</span>; </span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/正则/</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\D/</span>;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 敏感词过滤，在一个文本框输入内容并点击按钮时，敏感词换成对应数量的*，并在另一个输入框里展示。注意：需要用到 | ，正则里的或者</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">3. 把”2018-6-7 font-size”变成”2018.6.7 font-size”</font></p>
<p><font size="4">4. 封装函数，能够将css的样式写法修改成js的驼峰写法(如background-color =&gt; backgroundColor)</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssToJs</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/-(\w)/g</span>;</span><br><span class="line">    str = str.replace(re, <span class="function"><span class="keyword">function</span> (<span class="params">$<span class="number">0</span>,$<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">1.</span>toUpperCase();</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(cssToJs(<span class="string">"background-color"</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="元字符详细解析"><a href="#元字符详细解析" class="headerlink" title="元字符详细解析"></a>元字符详细解析</h4><ul>
<li><code>^ $</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d/</span>; <span class="comment">// 以数字开头</span></span><br><span class="line">reg.test(<span class="string">"2019zidjsi"</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d$/</span>; <span class="comment">// 以数字结尾</span></span><br><span class="line">reg.test(<span class="string">"zidjsi2019"</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d$/</span>; <span class="comment">// ^/$两个都加=&gt; 字符串只能是和规则一致的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证手机号码（11位数字，第一位数字是1）</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^1\d&#123;10&#125;$/</span>; <span class="comment">// 以1开头，1后有10个数字</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>\</code>：转义字符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^2.3$/</span>; <span class="comment">// .不是小数点，而是除\n外的任意字符</span></span><br></pre></td></tr></table></figure>






</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js键盘事件和元素的拖放</title>
    <url>/2019/09/07/js%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%85%83%E7%B4%A0%E7%9A%84%E6%8B%96%E6%94%BE/</url>
    <content><![CDATA[<center><font size="4">js键盘事件和元素的拖放</font></center>
- #### 键盘事件：

<ul>
<li><p><code>onkeydown/onkeyup</code>：当键盘按键按下/抬起时触发</p>
</li>
<li><p>我们不能让所有按键按下时都执行同一件事，这时需要用到：<code>event.keyCode</code>——键盘按键值(数字类型),如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">	ev = ev || event;</span><br><span class="line">	alert(ev.keyCode);</span><br><span class="line">&#125;  <span class="comment">//判断一下当前按键的键值</span></span><br></pre></td></tr></table></figure>

<p>因此在使用该事件时应该判断一下当前按键的键值，来分别执行不同的函数</p>
</li>
<li><p>event下还有<code>ctrlKey</code>，<code>shiftKey</code>，<code>altKey</code>等属性(布尔值)，当一个事件发生时，如果<code>ctrl</code>或<code>shift</code>或<code>alt</code>是按下状态，返回true，否则返回false</p>
</li>
<li><p><font color="red">注意：只有能接受焦点的元素才能接收键盘事件，特殊的document可以接收，如不能直接给div加</font></p>
</li>
<li><p>按键事件在按下不抬起时会连续触发，但是连续触发前会有一个停顿，如果要做按住连续触发并且不想要停顿效果时，需要自己写个方法(可以用计时器的方法)</p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="元素的拖拽："><a href="#元素的拖拽：" class="headerlink" title="元素的拖拽："></a>元素的拖拽：</h4><ul>
<li><p>前面我们说到用下面两个方法获取到鼠标的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ev.clientX/ev.clientY; </span><br><span class="line">ev.pageX/ev.pageY;</span><br></pre></td></tr></table></figure>

<p>那么我在选择元素时<strong>(鼠标按下)</strong>保存下鼠标的位置和元素位置的差值；然后移动元素时<strong>(鼠标移动)</strong>，不停的给元素赋值(当前鼠标位置减去保存的差值)；释放元素<strong>(鼠标抬起)</strong>时，取消移动事件，就能让该元素随着我的鼠标移动了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下时保存差值：</span></span><br><span class="line"><span class="keyword">var</span> disX = ev.pageX - 元素.offsetLeft;  <span class="comment">// ev.pageX是相对页面，包括有滚动条的情况</span></span><br><span class="line"><span class="keyword">var</span> disY = ev.pageY - 元素.offsetTop;</span><br><span class="line"><span class="comment">// 鼠标移动时不停的给元素赋值：</span></span><br><span class="line">元素.style.left = ev.pageX - disX + <span class="string">'px'</span>;</span><br><span class="line">元素.style.top= ev.pageY - disY + <span class="string">'px'</span>;</span><br><span class="line"><span class="comment">// 鼠标抬起释放元素，把事件指向null：</span></span><br><span class="line">元素.onmousemove = 元素.onmouseup =  <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题：</p>
<ul>
<li>移动太快脱离元素时事件就不会执行了，解决方法：<code>onmousemove</code>事件放在document上就可以了</li>
<li>抬起鼠标时在其他元素上抬起的，元素也不会停止。同样把<code>onmouseup</code>事件也放在document上</li>
<li>鼠标按下时，如果有文字被选中(包括图片)，拖拽会变成复制(浏览器的默认行为)，在<code>onmousedown</code>阻止默认行为。</li>
<li>封装拖拽，限制范围的拖拽：让其不能离开另一个元素的范围。方法：在赋值前进行判断，将一个正确的值赋给它</li>
</ul>
</li>
<li><p><strong>碰撞检测</strong>：当我们拖拽一个元素的时候，它可能会与另一个元素发生重叠，当两个元素有重叠区域时，我们认为它们发生了碰撞。那么怎么检查两个元素是否发生了碰撞那？思路：九宫格方式判断，我们可以找出它们不碰撞的情况，然后排除这些情况既是碰撞状态了</p>
</li>
<li><p><strong>模拟滚动条</strong>：滚动条的样式我们没法处理，类似表单元素select、单选多选等，因此我们可以自己定义一个滚动条，这样我们就是自己设置样式了。方法：定义一个元素在另一个元素里拖拽，只需要一个方向移动。</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="try…catch…语句："><a href="#try…catch…语句：" class="headerlink" title="try…catch…语句："></a>try…catch…语句：</h4><ul>
<li><p>错误发生时JavaScript引擎会停止并生成一个错误消息，try允许执行时进行错误测试的代码块，<code>catch</code>允许当 try代码块发生错误时执行的代码块，finally无论有没有错都执行的代码块，<code>throw new Error(&quot;自定义错误&quot;)</code>自定义错误信息</p>
</li>
<li><p>可以在用户自己操作失误或者函数少条件时不会影响下面的函数执行</p>
</li>
<li><p>语法：<code>try {//运行代码} catch (err) {//处理错误} finally {//无论有没有错都执行的代码块}</code>，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    allert(<span class="string">"Welcome guest!"</span>);</span><br><span class="line">    <span class="comment">//throw new Error("自定义错误");</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    txt = <span class="string">"本页有一个错误。\n"</span>; </span><br><span class="line">    txt += <span class="string">"错误描述："</span> + err.message + <span class="string">"\n"</span>; </span><br><span class="line">    txt += <span class="string">"点击确定继续。\n"</span>; </span><br><span class="line">    alert(txt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>适用情况：</p>
<ul>
<li>兼容性问题，浏览器兼容性不是程序员能改正的，所以可以用try catch：不同浏览器的报错提示是不一样的，根据浏览器的报错提示判断用户的浏览器，做出对应的措施，这时候用try catch，if通常只能反馈真或假，不能直接反馈浏览器的报错内容。</li>
<li>如<code>window.a.b</code>是非法的，再跟2对比就没有意义，这样非法的条件，在<code>try catch</code>中仍可以继续运行下去。但在if中<code>window.a.b</code>已经报错，整个页面都会坏掉。用<code>try catch</code>，程序不但知道<code>window.a.b == 2</code>是假的，而且直接可以知道究竟哪一步就已经是假的。</li>
<li><font color="blue"><strong><code>try catch</code>不能做真假判断，只能做非法判断</strong></font>。也就是说：<code>try {1 === 2}</code>，虽然1===2是假，但是是合法的，catch不会捕捉到错误，也不会告诉你1 === 2到底是真是假。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="名字空间："><a href="#名字空间：" class="headerlink" title="名字空间："></a>名字空间：</h4><ul>
<li><p>用一个对象制作名字空间(命名空间)，全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或定义了相同名字的顶层函数，会造成命名冲突，很难发现。</p>
</li>
<li><p>减少冲突的一个方法是把所有变量和函数绑定到一个全局变量中。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = &#123;&#125;;<span class="comment">// 唯一的全局变量myApp</span></span><br><span class="line">myApp.name = <span class="string">'myapp'</span>;<span class="comment">// 其他变量</span></span><br><span class="line">myApp.version = <span class="number">1.0</span>;<span class="comment">// 其他变量</span></span><br><span class="line">myApp.foo=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">&#125;; <span class="comment">//其他函数</span></span><br></pre></td></tr></table></figure>

<p>把自己的代码全部放入唯一的名字空间myApp中，会大大减少全局变量冲突的可能。许多著名的JavaScript库都是这么干的，如：jQuery，YUI等等。</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 做一个输入框和ul，每次输入完内容后，点击ctrl+回车变成留言</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oInput = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>);</span><br><span class="line">oInput.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 同时按下 ctrl和 enter</span></span><br><span class="line">    <span class="keyword">if</span> (event.ctrlKey &amp;&amp; event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        oLi.innerHTML = oInput.value;</span><br><span class="line">        <span class="comment">// 将留言从上往下显示</span></span><br><span class="line">        oUl.children[<span class="number">0</span>] ? oUl.insertBefore(oLi, oUl.children[<span class="number">0</span>]) : oUl.appendChild(oLi);</span><br><span class="line">        oInput.value = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 做一个div元素，用上下左右按钮按住时，在页面中移动的效果</font></p>
<p><font size="4">3. 模拟一个滚动条的拖拽，并在拖拽时改变一个div的高度</font></p>
<p><font size="4">4. 做一个拖拽的方块和图片碰撞时，图片切换成另一张图片，离开时变回的效果</font></p>
<p><font size="4">5. 做一个弹球游戏，要求左右键控制一个木板在页面底部20px处移动，小球只会在页面中来回反弹，碰到木板会反弹，落到地下就失败</font></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js事件委托和滚轮事件</title>
    <url>/2019/09/07/js%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E5%92%8C%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<center><font size="4">js事件委托和滚轮事件</font></center>
- #### 事件委托：

<ul>
<li><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能。导致这一问题的原因是多方面的。首先，每个函数都是对象，都会占用内存；内存中的对象越多，性能就越差。其次，必须事先指定所有事件处理程序而导致的DOM访问次数，会延迟整个页面的交互就绪时间。</p>
</li>
<li><p>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。例如，click事件会一直冒泡到document层次。也就是说，我们可以为整个页面指定一个<code>onclick</code>事件处理程序，而不必给每个可单击的元素分别添加事件处理程序</p>
</li>
<li><p><code>event.type</code> ：<strong>触发事件的类型</strong>，如通过<code>onclick</code>的事件类型是click</p>
</li>
<li><p><code>event.target</code>(低版本IE用<code>event.srcElement</code>)：事件触发元素，比如可以用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tar = event.target || event.srcElement;  <span class="comment">//兼容写法</span></span><br><span class="line">tar.tagName;  <span class="comment">//获取事件触发元素标签名，大写，需要转换为小写</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用事件触发元素封装一个事件委托方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegation</span>(<span class="params">fEle,ele,attr,fn</span>)</span>&#123;</span><br><span class="line">    ele = ele.toLowerCase();</span><br><span class="line">    bind(fEle,attr,<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        ev = ev || event;</span><br><span class="line">        <span class="keyword">var</span> tar = ev.target || ev.srcElement; </span><br><span class="line">        <span class="keyword">if</span>(ele[<span class="number">0</span>]===<span class="string">"#"</span>&amp;&amp;(<span class="string">"#"</span>+tar.id)===ele||</span><br><span class="line">        ele[<span class="number">0</span>]===<span class="string">"."</span>&amp;&amp;tar.className.indexOf(ele.substring(<span class="number">1</span>))!=<span class="number">-1</span>||</span><br><span class="line">        /[a-z]/.test(ele[<span class="number">0</span>])&amp;&amp;tar.nodeName.toLowerCase()===ele)&#123;</span><br><span class="line">            fn.call(tar);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="鼠标滚轮事件："><a href="#鼠标滚轮事件：" class="headerlink" title="鼠标滚轮事件："></a>鼠标滚轮事件：</h4><ul>
<li><p>在ie浏览器和谷歌浏览器的滚轮事件使用<code>onmousewheel</code>；而火狐浏览器的事件用<code>DOMMouseScroll</code>(该事件必须用<code>addEventListener</code>事件监听才能生效)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.navigator.userAgent.indexOf(<span class="string">"Firefox"</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">    obj.addEventListener(<span class="string">'DOMMouseScroll'</span>, wheel, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj.onmousewheel = wheel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据不同浏览器执行不同的代码</p>
</li>
<li><p>另外在ie浏览器和谷歌浏览器里用来判断滚轮方向的属性为：<code>event.wheelDelta</code>(上：120 下：-120)；而火狐浏览器的属性为：<code>ev.detail</code>(上：-3 下：3)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> delta = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (ev.wheelDelta) &#123;</span><br><span class="line">    delta = ev.wheelDelta &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(ev.detail) &#123;</span><br><span class="line">    delta = ev.detail &lt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将滚动方向统一为向上为true，向下为false</p>
</li>
<li><p>最后我们将其进行封装，在使用滚动条事件时需要注意几点：</p>
<ul>
<li><p>封装函数的参数尽量设置成一个对象，并设置默认值，提高用户体验，并且在函数命名时尽量使用名字空间的方式</p>
</li>
<li><p>如果我们想在滚轮滚动时不要移动滚动条就需要阻止浏览器默认行为，而标准浏览器的事件监听需要通过event的<code>ev.preventDefault()</code>来阻止，而<code>attachEvent</code>和<code>on</code>事件用的是<code>return false</code></p>
</li>
<li><p>滚动距离(可视区到页面顶部/左侧)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.scrollTop/scrollLeft <span class="comment">// 仅chrome下有效</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop/scrollLeft <span class="comment">// 其他浏览器</span></span><br><span class="line"><span class="comment">// 垂直滚动条和水平滚动条的兼容写法：</span></span><br><span class="line"><span class="keyword">var</span> scrollTop =  <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"><span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft;</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面内容宽高(盒子内部包括溢出部分的宽度/高度)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBWidth = <span class="built_in">document</span>.body.scrollWidth</span><br><span class="line"><span class="keyword">var</span> oBHeight = <span class="built_in">document</span>.body.scrollHeight</span><br></pre></td></tr></table></figure>

<p>例如一个元素内容被隐藏，可以用滚动条查看，这些实际内容的宽高</p>
</li>
<li><p>设置滚动条的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.scrollTo(x,y); <span class="comment">// x为水平方向的滚动条位置，y为垂直方向的滚动条位置,是window的方法</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：必须两个值都写，如希望设置y轴滚动条(x不变)，首先获得x轴滚动条位置并为之赋值，然后设置y轴位置，设置的时候不需要单位。不过现在的页面很少需要水平方向滚动条，所以一般用0即可</font></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="Console-对象"><a href="#Console-对象" class="headerlink" title="Console 对象"></a>Console 对象</h4><ul>
<li><p>JavaScript 原生中默认是没有 Console 对象,这是宿主对象(也就是游览器)提供的内置对象。 用于访问调试控制台, 在不同的浏览器里效果可能不同。</p>
</li>
<li><p>console命令中最常用的就是<code>console.log</code> 了。<code>console.log</code>有一个特殊的首参数：字符串(%s)、整数(%d或%i)、css样式(%c)、浮点数(%f)、DOM对象属性(%O)和可展开的JS对象(%o)，如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%s"</span>,&#123;<span class="attr">name</span>:<span class="string">"魏老师"</span>&#125;); <span class="comment">//输出:[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%d年%d月%d日"</span>,<span class="number">2011</span>,<span class="number">3</span>,<span class="number">26</span>); <span class="comment">//输出:2011年3月26日</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%chello world"</span>, <span class="string">"color: red;font-size: 24px;font-weight: bold;"</span>); <span class="comment">//输出：hello world(带有样式)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"圆周率是%f"</span>,<span class="number">3.14159</span>); <span class="comment">//输出：圆周率是3.14159</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%o"</span>,&#123;<span class="attr">name</span>:<span class="string">"魏老师"</span>&#125;); <span class="comment">//输出：Object &#123; name: "魏老师" &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>常用的还有</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(obj);  <span class="comment">//输出obj的信息</span></span><br><span class="line"><span class="built_in">console</span>.dirxml(info); <span class="comment">//某个节点(node)所包含的html/xml代码</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 做一个点击添加留言效果，用事件委托的方法给每个添加的留言设置一个撤回功能</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">delegation(oLi,<span class="string">"button"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    oUl.removeChild(oLi);</span><br><span class="line">    len--; <span class="comment">// 将留言条数减一</span></span><br><span class="line">    <span class="comment">// console.log(len);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 鼠标滚轮控制并改变div高度变化，向上滚动减少div高度，向下滚动增加div高度</font></p>
<p>CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span><br><span class="line">doWheel(oDiv,&#123;</span><br><span class="line">    <span class="string">"up"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oDiv.style.height = oDiv.offsetHeight - <span class="number">1</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"down"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oDiv.style.height = oDiv.offsetHeight + <span class="number">1</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 鼠标滚轮事件封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doWheel</span>(<span class="params">obj,fns,stop</span>) </span>&#123;  <span class="comment">// obj,fns都为对象</span></span><br><span class="line">    <span class="keyword">var</span> up = fns.up || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> down = fns.down || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> stop = stop === <span class="literal">undefined</span> ? <span class="literal">true</span> : stop;</span><br><span class="line">    <span class="comment">// 判断是否火狐浏览器</span></span><br><span class="line">    <span class="keyword">var</span> fire = <span class="built_in">window</span>.navigator.userAgent.indexOf(<span class="string">"Firefox"</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// console.log(fire);</span></span><br><span class="line">    <span class="keyword">if</span> (fire) &#123;</span><br><span class="line">        obj.addEventListener(<span class="string">"DOMMouseScroll"</span>,</span><br><span class="line">                             <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            event.detail &lt; <span class="number">0</span> ? up() : down();</span><br><span class="line">            <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                event.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="literal">false</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj.onmousewheel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            event.wheelDelta &gt; <span class="number">0</span> ? up() : down();</span><br><span class="line">            <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">3. 点击按钮返回页面顶部按钮，要求定位在页面左下角，但是在滚动距离少于200px时隐藏</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line"><span class="comment">// 触发滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop =  <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">    oBtn.style.display = scrollTop &gt;= <span class="number">200</span> ? <span class="string">"block"</span> : <span class="string">"none"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(scrollTop);</span><br><span class="line">&#125;</span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js事件流和事件监听</title>
    <url>/2019/09/07/js%E4%BA%8B%E4%BB%B6%E6%B5%81%E5%92%8C%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<center><font size="4">js事件流和事件监听</font></center>
- #### 事件流：

<ul>
<li><p>DOM(文档对象模型)结构是一个树型结构，当一个HTML元素产生一个事件时，该事件会在元素结点与根节点之间按特定的顺序传播，路径所经过的节点都会收到该事件，这个传播过程可称为DOM事件流。事件顺序有两种类型：事件捕捉和事件冒泡。</p>
</li>
<li><p><font color="green"><strong>事件冒泡</strong></font><font color="red">（从内向外）</font>：是IE浏览器对事件模型的实现。从DOM树型结构上理解，就是事件由叶子节点沿祖先结点一直向上传递直到根节点。</p>
</li>
<li><p><font color="green"><strong>事件捕捉</strong></font><font color="red">（从外向内）</font>：它与冒泡型刚好相反，由DOM树最顶层元素一直到最精确的元素。DOM标准同时支持两种事件模型，即捕获型事件与冒泡型事件，但是，捕获型事件先发生。两种事件流都会触发DOM中的所有对象，从document对象开始，也在document对象结束(大部分兼容标准的浏览器会继续将事件捕捉/冒泡延续到window对象)。</p>
</li>
<li><p><strong>先捕获后冒泡</strong>，所以如果一个处理函数既注册了捕获型事件的监听，又注册冒泡型事件监听，那么在DOM事件模型中它就会被调用两次。DOM标准的事件模型最独特的性质是,文本节点也会触发事件(在IE不会)。<br><img src="/2019/09/07/js事件流和事件监听/%E4%BA%8B%E4%BB%B6%E6%B5%81.png" alt="img"><br>如果为上面的div添加了click事件监听器，该事件监听器指派给了包含该div的body元素或者位于DOM树顶端的document(window)节点，点击div时body等也同样会触发该事件。事件不仅仅对目标元素产生了影响，还会对沿着DOM结构的所有元素产生影响。这就是<strong>事件传递</strong>。</p>
</li>
<li><p><font color="green"><strong>事件传递模式</strong></font>：</p>
<ul>
<li>事件捕获(Capturing)阶段，事件将沿着DOM树向下转送，目标节点的每一个祖先节点，直至目标节点。</li>
<li>在目标(target)阶段，浏览器在查找到已经指定给目标事件的事件监听器之后，就会运行该事件监听器。目标节点就是触发事件的DOM节点。如上面的div</li>
<li>在冒泡(Bubbling)阶段，事件将沿着DOM树向上转送，再次逐个访问目标元素的祖先节点到document节点。该过程中的每一步。浏览器都将检测那些不是捕捉事件监听器的事件监听器，并执行它们。</li>
</ul>
</li>
<li><p>所有的事件都要经过捕捉阶段和目标阶段，但是有些事件会跳过冒泡阶段。如让表单元素获得焦点的focus事件及失去焦点的blur事件就不会冒泡。</p>
</li>
<li><p>给一个元素绑定事件实际上是绑定事件所处理的函数–事件函数，即使没写事件函数在你点击时点击事件也会触发，但他没有绑定任何函数也就不会执行任何动作</p>
</li>
<li><p><font color="green"><strong>事件冒泡机制</strong></font>：当一个元素接受到事件的时候，会把他接收到的所有传播给他的父级，父级继续传播直到顶层，事件冒泡是默认存在的</p>
</li>
<li><p>为什么会默认冒泡，因为页面中很多元素有共同的父元素，你只需要给他们的父元素绑定事件，而不是给每个元素绑定事件就可以解决问题，这样大大减少操作</p>
</li>
<li><p><em>如果不需要冒泡则阻止事件冒泡就可以了</em>。在事件函数中调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event.cancelBubble = <span class="literal">true</span>;   <span class="comment">// 阻止当前对象的此次事件的冒泡(on事件)</span></span><br><span class="line">event.stopPropagation();    <span class="comment">// 标准方法(停止传播)</span></span><br><span class="line">event.stopPropagation ? event.stopPropagation() : event.cancelBubble = <span class="literal">true</span>;  <span class="comment">// 兼容写法</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>同样，<em>如果我们不需要浏览器的默认行为可以用</em>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//前面学过(on事件)</span></span><br><span class="line">event.preventDefault(); <span class="comment">//标准方法(阻止系统默认)</span></span><br><span class="line">event.preventDefault ? event.preventDefault() : <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//兼容写法</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="事件监听器："><a href="#事件监听器：" class="headerlink" title="事件监听器："></a>事件监听器：</h4><ul>
<li><p>我们在之前的语法中，用来执行事件函数的写法通常会用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.事件 = 函数;  <span class="comment">//甚至更早的有下面的写法</span></span><br><span class="line">&lt;a href=<span class="string">"#"</span> onclick=<span class="string">"JavaScript code here"</span>&gt;......&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种行间JavaScript代码和行间css类似。违背了将实现动态行为的代码与显示文档静态内容的代码相分离的原则。从1998年开始，这种写法就过时了。</p>
</li>
<li><p>上面的事件绑定技术简单方便，在HTML中直接书写处理函数的代码块，在JS中给元素对应事件属性赋值即可；IE与DOM标准都支持的一种方法，它在IE与DOM标准中都是在事件冒泡过程中被调用的；可以在处理函数块内直接用<code>this</code>引用注册事件的元素，<code>this</code>引用的是当前元素；但要给元素注册多个监听器，就不能用这方法了。</p>
</li>
<li><p>在一个大型项目中很可能出现一个元素需要绑定多个不同的函数，如果想<font color="red"><strong>给一个对象的同一个事件绑定多个不同的函数，就要用到——事件监听器</strong></font>：</p>
<ul>
<li><p><strong>在低版本的IE中</strong>，每个元素和window对象都有两个方法：<code>attachEvent</code>方法和<code>detachEvent</code>方法。</p>
<p><font color="green">特点：倒序执行</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 注：在使用attachEvent()方法的情况下，事件函数会在全局作用域中运行，即this === window</span></span><br><span class="line">obj.attachEvent(事件名称,事件函数);  <span class="comment">//事件监听 </span></span><br><span class="line">    obj.detachEvent(事件名称,事件函数);  <span class="comment">//解除事件监听</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>  - **在标准浏览器中**，每个支持事件的对象都可以使用`addEventListener`方法和`removeEventListener`方法。该方法既支持冒泡又支持捕获。

    &lt;font color=&quot;green&quot;&gt;特点：顺序执行&lt;/font&gt;

    &lt;font color=&quot;red&quot;&gt;注意：是否捕获默认是false，false：冒泡阶段； true：捕获阶段&lt;/font&gt;

    <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.addEventListener(事件名称,事件函数,是否捕获);  <span class="comment">//事件监听</span></span><br><span class="line">obj.removeEventListener(事件名称,事件函数,是否捕获); <span class="comment">//解除事件监听</span></span><br></pre></td></tr></table></figure>


    <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"123"</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 解除事件监听</span></span><br><span class="line"><span class="built_in">document</span>.removeEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"456"</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>


    区别：1. 参数不一样        2. 事件顺序不一样        3. this不一样        4. 阻止冒泡和浏览器默认行为写法

- ie的`obj.attachEvent`的四个特点：1、没有捕获；2、事件名称有on；3、事件执行顺序倒序；4、this指向window；

- 标准的`obj.addEventListener`的四个特点：1. 有捕获；2. 事件名称没有on；3. 事件执行是顺序；4. this指向该事件的对象

- &lt;font color=&quot;purple&quot;&gt;**函数有个`call()`方法(调用函数并改变this的指向)，我们可以用这个方法解决ie事件监听`this`指向的问题，函数直接调用`fn1()`等价于`fn1.call()`，但如果我们在`call()`方法的第一个参数设置为一个对象，那么该方法中的`this`执行会指向该对象，后面的参数是正常的参数**&lt;/font&gt;

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// fn();</span></span><br><span class="line">    fn.call(<span class="built_in">document</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>


- 而事件捕获只有标准浏览器下才有，因此我们只能封装一个冒泡的方法:

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,evname,fn</span>) </span>&#123;</span><br><span class="line">    obj.addEventListener ? obj.addEventListener(evname,fn,<span class="literal">false</span>) : obj.attachEvent(<span class="string">'on'</span>+evname,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;fn.call(obj);&#125;)</span><br><span class="line">&#125;</span><br><span class="line">bind(<span class="built_in">document</span>,<span class="string">'click'</span>,fn1);  <span class="comment">//调用</span></span><br></pre></td></tr></table></figure></code></pre><hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 做3个div嵌套，并都绑定一个事件，点击某个div时，弹出这个div的id，如果出现问题如何解决问题</font></p>
<p><font size="4">2. 做一个下拉菜单，在点击时，让该菜单展示出来，点击页面的其他位置时，菜单隐藏</font></p>
<p>CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line"><span class="comment">// 事件监听器兼容写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,attr,fn</span>) </span>&#123; <span class="comment">// obj表示对象,attr表示事件,fn表示执行的时间函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fn.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">            obj.attachEvent(<span class="string">"on"</span> + attr,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn[fn.length - <span class="number">1</span> - i].call(obj);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.addEventListener(attr,fn[i],<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bind(oBtn,<span class="string">"click"</span>,[</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oDiv.style.display = <span class="string">"block"</span>;</span><br><span class="line">        <span class="comment">// 阻止冒泡</span></span><br><span class="line">        event.stopPropagation ? event.stopPropagation() : event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line">bind(<span class="built_in">document</span>,<span class="string">"click"</span>,[</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oDiv.style.display = <span class="string">"none"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js浏览器定位对象和事件对象</title>
    <url>/2019/09/03/js%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9A%E4%BD%8D%E5%AF%B9%E8%B1%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>js浏览器定位对象和事件对象</p>
<ul>
<li><h4 id="浏览器的历史记录"><a href="#浏览器的历史记录" class="headerlink" title="浏览器的历史记录"></a>浏览器的历史记录</h4><ul>
<li><p>window的history对象，html5中新增了popstate等方法我们会在后面详细说明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.go(<span class="number">-1</span>); <span class="comment">//访问浏览器窗口的历史，负数为后退，正数为前进</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.back(); <span class="comment">//在浏览历史里后退一步，等同go(-1)</span></span><br><span class="line"><span class="built_in">window</span>.history.forward(); <span class="comment">//在浏览历史里前进一步，等同go(1)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.length <span class="comment">//浏览过的页面数</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="location对象和其他打开页面方法"><a href="#location对象和其他打开页面方法" class="headerlink" title="location对象和其他打开页面方法"></a>location对象和其他打开页面方法</h4></li>
</ul>
<ol>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用</span></span><br><span class="line"><span class="built_in">window</span>.location.href; <span class="comment">// 载入页面的完整URL，如http://www.baidu.com </span></span><br><span class="line"><span class="built_in">window</span>.location.search; <span class="comment">// 执行GET请求的URL中的问号后的部分，又称查询字符串，如?p=xxxx </span></span><br><span class="line"><span class="built_in">window</span>.location.hash; <span class="comment">// 如果URL包含#，返回该符号之后的内容，如#anchor1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.location.portocol; <span class="comment">// URL中使用的协议，即双斜杠之前的部分，如http </span></span><br><span class="line"><span class="built_in">window</span>.location.host; <span class="comment">// 服务器的名字，如www.baidu.com </span></span><br><span class="line"><span class="built_in">window</span>.location.hostname; <span class="comment">// 通常等于host，有时会省略前面的www </span></span><br><span class="line"><span class="built_in">window</span>.location.port; <span class="comment">// URL声明的请求的端口，默认情况下，大多数URL没有端口信息，如8080 </span></span><br><span class="line"><span class="built_in">window</span>.location.pathname; <span class="comment">// URL中主机名后的部分，如/pictures/index.html </span></span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">"http:www.baidu.com"</span>); <span class="comment">// 同href，新地址会被加到浏览器的历史栈中 </span></span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="string">"http:www.baidu.com"</span>); <span class="comment">// 同assign，但新地址不会被加到浏览器的历史栈中，不能通过back和forward访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.location.reload(<span class="literal">true</span> | <span class="literal">false</span>); <span class="comment">// 重新载入当前页面，为false时从浏览器缓存中重载，为true时从服务器端重载，默认为false</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">2. `open`方法打开一个新窗口</span><br><span class="line"></span><br><span class="line">   ```js</span><br><span class="line">   open(URL,打开方式)；  // 用来打开一个新窗口</span><br></pre></td></tr></table></figure>

<p>   <font color="red">注意：网址为空时打开的是空白页面，打开方式默认为_blank(新窗口)，设置_self(当前窗口)，此方法的返回值是新窗口的window对象</font></p>
<ol start="3">
<li><p><code>close</code>方法关闭窗口，有兼容性问题(火狐禁止代码关闭浏览器，chrome直接关闭，ie询问关闭)，但可以用来关闭用js方法打开的窗口</p>
</li>
<li><p><code>window.location.href</code>的方法也可以用来做页面跳转，如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = <span class="string">"url"</span>; <span class="comment">//同时可以在url后面添加信息，如"?"+信息或者"#"+信息          </span></span><br><span class="line"><span class="built_in">window</span>.location.search  <span class="comment">//用来获取url?后面的内容</span></span><br><span class="line"><span class="built_in">window</span>.location.hash  <span class="comment">//用来获取url#后面的内容</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：下面两个的window是跳转后新窗口对象，获取的数据还包括”?”和”#”</font></p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="window的事件"><a href="#window的事件" class="headerlink" title="window的事件"></a>window的事件</h4></li>
</ul>
<ol>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload; <span class="comment">//window的加载事件</span></span><br><span class="line"><span class="built_in">window</span>.onscroll; <span class="comment">//window的滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.onresize; <span class="comment">//window的窗口变化事件</span></span><br><span class="line"><span class="built_in">window</span>.onhashchange; <span class="comment">//window的hash值发生变化事件</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：onscroll和onresize不是按照距离触发事件，而是单位时间；<code>onhashchange</code>可以让我们在改变页面视图的同时让历史记录功能生效，如后面的ajax的问题</font></p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="获取选中文字"><a href="#获取选中文字" class="headerlink" title="获取选中文字"></a>获取选中文字</h4></li>
</ul>
<ol>
<li><p>获取和取消鼠标选中的文字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.selection.createRange().text; <span class="comment">//IE9以下获取选中文字</span></span><br><span class="line"><span class="built_in">window</span>.getSelection().toString(); <span class="comment">//其他浏览器获取选中文字</span></span><br><span class="line"><span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().toString() : <span class="built_in">document</span>.selection.createRange().text; <span class="comment">//兼容写法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.selection.empty(); <span class="comment">//IE9以下取消选中文字</span></span><br><span class="line"><span class="built_in">window</span>.getSelection().removeAllRanges(); <span class="comment">//其他浏览器取消选中文字</span></span><br><span class="line"><span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().removeAllRanges() : <span class="built_in">document</span>.selection.empty(); <span class="comment">//兼容写法</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<ul>
<li><h4 id="事件对象event"><a href="#事件对象event" class="headerlink" title="事件对象event"></a>事件对象<code>event</code></h4></li>
</ul>
<ol>
<li><p>当我们与浏览器中 Web 页面进行某些类型的交互时，事件就发生了。可能是用户在某些内容上的点击、鼠标经过某个特定元素或按下键盘上的某些按键。还可能是 Web 浏览器中发生的事情，比如某个 Web 页面加载完成，或者是用户滚动窗口或改变窗口大小。</p>
</li>
<li><p>当事件发生时，和这个对象事件有关的一些信息都会被临时保存到一个指定地方–event对象(类似飞机的黑匣子)</p>
</li>
<li><p><font color="red">注意：事件对象必须在一个事件调用的函数里面使用才有内容。函数是不是事件函数，不是定义时决定，而是调用时决定，</font>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(event);</span><br><span class="line">&#125; <span class="comment">//通过fn1()方式调用就不会有内容</span></span><br><span class="line"><span class="built_in">document</span>.onclick = fn1;  <span class="comment">//用事件调用就有内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>event</code>对象在ie和chrome里面是内置的全局变量，是window的属性，弹出为空和未定义。但是在火狐里会报错(新版不会报错)，火狐的事件对象是通过事件函数的第一个参数–<code>function fn1(ev){alert(ev)};</code>(event标准下的用法，在标准的ie和chrome也是有效)，兼容写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ev = ev || event; <span class="comment">//前面必须是ev，因为event在前火狐里会直接报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>event储存了很多东西，如在event上获得事件发生时的鼠标位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event.clientX/event.clientY;  <span class="comment">//鼠标在可视区的X/Y的坐标</span></span><br><span class="line">event.pageX/event.pageY; <span class="comment">//鼠标在页面的X/Y的坐标</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<ol>
<li><p>点击一个按钮，以新的窗口打开”<a href="http://www.yahoo.com&quot;首页，然后再用另一个按钮关闭它。" target="_blank" rel="noopener">http://www.yahoo.com&quot;首页，然后再用另一个按钮关闭它。</a></p>
</li>
<li><p>五个按钮(value分别为一、二、三、四、五)都可以用location.href打开同一个新页面，在新页面中输出“你是通过第几个按钮跳转到该页面的”</p>
</li>
<li><p>做一个自动生成彩票系统，要求每次生成一注28选7的随机彩票(从1-28中选择7个不重复的数字)，并且能够通过历史记录找到之前生成的彩票</p>
</li>
<li><p>页面中一个p和一个div，p元素里设置一篇文章，当你选中p中的文字后，在div里显示出来</p>
</li>
<li><p>设置一个div元素，跟着鼠标移动的效果</p>
<p>CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    oDiv.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">    oDiv.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js浏览器对象和方法</title>
    <url>/2019/09/03/js%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<center><font size="4">浏览器对象和方法</font></center>
- #### BOM的常用属性和方法

<ul>
<li><p><font color="orange"><strong>window对象属性</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.document;  <span class="comment">// 对 Document 对象的只读引用</span></span><br><span class="line"><span class="built_in">window</span>.history;  <span class="comment">// 对 History 对象的只读引用</span></span><br><span class="line"><span class="built_in">window</span>.location; <span class="comment">// 用于窗口或框架的 Location 对象</span></span><br><span class="line"><span class="built_in">window</span>.screen; <span class="comment">// 对 Screen 对象的只读引用</span></span><br><span class="line"><span class="built_in">window</span>.navigator; <span class="comment">// 对 Navigator 对象的只读引用</span></span><br><span class="line"><span class="built_in">window</span>.event;  <span class="comment">// 对 Event 对象的只读引用</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight/<span class="built_in">window</span>.innerWidth;  <span class="comment">// 返回窗口的文档显示区的高度/宽度，（有滚动条时包括滚动条）</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight/<span class="built_in">window</span>.outerWidth;  <span class="comment">// 返回窗口的外部高度/宽度,（整个浏览器）</span></span><br><span class="line"><span class="built_in">window</span>.pageXOffset/<span class="built_in">window</span>.pageYOffset;  <span class="comment">// 设置或返回当前页面相对于窗口显示区左上角的 X/Y 位置</span></span><br><span class="line"><span class="built_in">window</span>.name;  <span class="comment">// 设置或返回窗口的名称</span></span><br><span class="line"><span class="built_in">window</span>.parent;  <span class="comment">// 返回父窗口</span></span><br><span class="line"><span class="built_in">window</span>.top;  <span class="comment">// 返回最顶层的先辈窗口</span></span><br><span class="line"><span class="built_in">window</span>.self;   <span class="comment">// 返回当前窗口本身</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>window对象方法</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open();  <span class="comment">// 打开一个新的浏览器窗口或查找一个已命名的窗口，第一个参数是要打开的页面的路径，第二个参数是在新标签页打开(_blank)还是当前页打开(_self)</span></span><br><span class="line"><span class="built_in">window</span>.close(); <span class="comment">// 关闭当前窗口,但是其返回值关闭的是新页面的窗口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">"message"</span>); <span class="comment">// 弹出一个具有OK按钮的系统消息框，显示指定的文本  </span></span><br><span class="line"><span class="built_in">window</span>.confirm(<span class="string">"Are you sure?"</span>); <span class="comment">// 弹出一个具有OK和Cancel按钮的询问对话框，返回一个布尔值</span></span><br><span class="line"><span class="built_in">window</span>.prompt(<span class="string">"What's your name?"</span>, <span class="string">"Default"</span>); </span><br><span class="line"><span class="comment">// 提示用户输入信息，接受两个参数，要显示给用户的文本和文本框中的默认值，将文本框中的值作为函数值返回</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="string">"alert('xxx')"</span>, <span class="number">1000</span>); </span><br><span class="line"><span class="comment">// 设置在指定的毫秒数后执行指定的代码，接受2个参数，要执行的代码和等待的毫秒数</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(<span class="string">"ID"</span>); <span class="comment">// 取消由 setTimeout 方法设置的timeout。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>, 1000); // 无限次地每隔指定的时间段重复一次指定的代码，参数同<span class="title">setTimeout</span></span></span><br><span class="line"><span class="function"><span class="title">window</span>.<span class="title">clearInterval</span>(<span class="params"></span>); // 取消由 <span class="title">setInterval</span> 设置的<span class="title">timeout</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="screen对象和各种尺寸"><a href="#screen对象和各种尺寸" class="headerlink" title="screen对象和各种尺寸"></a>screen对象和各种尺寸</h4><ul>
<li><p><font color="orange"><strong>window的screen对象，包含用户屏幕的信息(尺寸)：</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.screen.width;  <span class="comment">// 屏幕宽度 </span></span><br><span class="line"><span class="built_in">window</span>.screen.height;  <span class="comment">// 屏幕高度 </span></span><br><span class="line"><span class="built_in">window</span>.screen.availWidth;  <span class="comment">// 可用宽度(除去滚动条的) </span></span><br><span class="line"><span class="built_in">window</span>.screen.availHeight;  <span class="comment">// 可用高度(除去任务栏的)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>获取浏览器的尺寸，有兼容问题：</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.clientWidth;  <span class="comment">// BODY对象宽度</span></span><br><span class="line"><span class="built_in">document</span>.body.clientHeight;  <span class="comment">// BODY对象高度</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth;   <span class="comment">// HTML对象宽度</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight;  <span class="comment">// HTML对象高度</span></span><br><span class="line"><span class="keyword">var</span> sW = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;  <span class="comment">// 兼容写法</span></span><br><span class="line"><span class="keyword">var</span> sH = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;  <span class="comment">// 兼容写法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>获取窗口尺寸</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.innerWidth;  <span class="comment">// 浏览器窗口的内部宽度</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight;  <span class="comment">// 浏览器窗口的内部高度</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="浏览器信息"><a href="#浏览器信息" class="headerlink" title="浏览器信息"></a>浏览器信息</h4><ul>
<li><p><font color="orange"><strong>window的<code>external</code>对象</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.external.AddFavorite(<span class="string">"地址"</span>,<span class="string">"标题"</span>); <span class="comment">// 把网站新增到保藏夹</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>window的navigator对象，可以用来判断当前浏览器是否是什么浏览器</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.userAgent <span class="comment">// 浏览器信息 (内核，版本等)</span></span><br><span class="line"><span class="built_in">window</span>.navigator.userAgent.indexOf(<span class="string">'MSIE'</span>)=<span class="number">-1</span>; <span class="comment">// 信息中包含了MSIE字符</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h4 id="iframe标签和顶层元素的关系"><a href="#iframe标签和顶层元素的关系" class="headerlink" title="iframe标签和顶层元素的关系"></a>iframe标签和顶层元素的关系</h4><ul>
<li><p><font color="orange"><strong>iframe标签的window对象，浏览器会为HTML文档创建一个window对象，并为每个iframe框架创建一个额外的window对象</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.frames;  <span class="comment">// 返回窗口中所有命名的框架的集合，伪数组</span></span><br><span class="line"><span class="built_in">window</span>.frames[index];  <span class="comment">// 获取某个iframe(按照下标)</span></span><br><span class="line"><span class="built_in">window</span>.frames[name];   <span class="comment">// 获取某个iframe(按照name)</span></span><br><span class="line">iframe.contentWindow;  <span class="comment">// 获得某个iframe的window对象</span></span><br><span class="line">iframe.contentWindow.document;  <span class="comment">// 获取某个iframe的document对象</span></span><br><span class="line"><span class="built_in">window</span>.parent;  <span class="comment">// 是父窗口，如果窗口是顶级窗口，那么parent(父窗口)==self(当前窗口)==top(最顶级父窗口)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>获取和取消鼠标选中的文字：</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取鼠标选中的文字：</span></span><br><span class="line"><span class="built_in">document</span>.selection.createRange().text; <span class="comment">//IE9以下使用</span></span><br><span class="line"><span class="built_in">window</span>.getSelection().toString(); <span class="comment">//其他浏览器使用</span></span><br><span class="line"><span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().toString() : <span class="built_in">document</span>.selection.createRange().text; <span class="comment">//兼容写法</span></span><br><span class="line"><span class="comment">//取消鼠标选中的文字：</span></span><br><span class="line"><span class="built_in">document</span>.selection.empty(); <span class="comment">//IE9以下使用</span></span><br><span class="line"><span class="built_in">window</span>.getSelection().removeAllRanges(); <span class="comment">//其他浏览器使用</span></span><br><span class="line"><span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().removeAllRanges() : <span class="built_in">document</span>.selection.empty(); <span class="comment">//兼容写法</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><font size="5" color="gree">练习：</font></p>
<p><font size="4">1. 提示用户输入用户名，用户输入XX内容并确认后弹出”欢迎XX朋友”，若未输入内容或输入为空则并确认后弹出”欢迎您，我的朋友”</font></p>
<p><font size="4">2. 点击重置时让其确定，是否重置，用户确认重置表单，否则阻止浏览器默认行为</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oFm = <span class="built_in">document</span>.getElementById(<span class="string">"fm"</span>);</span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line">	oFm.onreset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> a = confirm(<span class="string">"确定要重置吗？"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">3. 判断打开的浏览器是什么浏览器(IE、火狐和谷歌)，如用IE浏览器打开就弹出“IE”，用火狐浏览器打开就弹出“火狐”</font></p>
<p><font size="4">4. 在页面中设置一个div元素、一个按钮和一个iframe元素，点击按钮时将div元素移动到iframe中去</font></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>选择器详解和BOM</title>
    <url>/2019/08/31/%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%A6%E8%A7%A3%E5%92%8CBOM/</url>
    <content><![CDATA[<center><font size="4">js选择器详解和BOM</font></center>
- #### 获取元素方法详解：

<ul>
<li><p>通过document可以访问其子节点(其实任何节点都可以)，我们看一下获取元素的所有方法</p>
</li>
<li><p><code>var oEle = document.getElementById(id);</code></p>
<p>该方法接收一个参数——元素的ID(区分大小写，严格匹配)，返回一个Element对象(可看作是动态<code>NodeList</code>集合，只是集合中只包含一个匹配的元素，会实时反映DOM节点的变化)，若当前文档中拥有特定ID的元素不存在则返回<code>null</code>。</p>
<p><font color="red">注意：该方法不会搜索不在文档中的元素，创建一个元素且分配ID后，要用<code>insertBefore()</code>或其他类似的方法把元素插入到文档中之后才能使用该方法获取到</font></p>
</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aEle = element.getElementsByTagName(tagName);</span><br><span class="line"><span class="keyword">var</span> aEle = rootElement.getElementsByTagName(names);<span class="comment">//调用这个方法的元素将作为本次查找的根元素</span></span><br></pre></td></tr></table></figure>

<p>该方法接收一个参数——元素的标签名(不区分大小写)，返回一个<code>HTMLCollection</code>动态集合(也可以说返回一个<code>NodeList</code>类数组对象)，集合中包含以当前元素为根节点(不包括当前元素自身)，所有指定标签名的子元素，子元素的顺序是在当前元素的子树中出现的顺序，如果没有搜索到元素则集合为空。</p>
</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementsByClassName(names); </span><br><span class="line"><span class="keyword">var</span> aEle = rootElement.getElementsByClassName(names); <span class="comment">//调用这个方法的元素将作为本次查找的根元素</span></span><br></pre></td></tr></table></figure>

<p>该方法接收一个参数——一个或多个类名的字符串(类名通过空格分隔)，返回一个<code>HTMLCollection</code>动态集合(也可以说返回一个<code>NodeList</code>类数组对象)，集合中包含以当前元素为根节点，所有指定 class 名的子元素。</p>
<p><font color="red">注意：<code>getElementsByTagName()</code>和<code>getElementsByClassName()</code>方法都是动态方法，因此我们用循环依次删除时会发现删不干净，原因是每次删除都会改变<code>HTMLCollection</code>动态集合的<code>length</code>，可以每次删除第一项(或最后一项)</font></p>
</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aRadio = oForm.getElementsByName(<span class="string">"sex"</span>);</span><br></pre></td></tr></table></figure>

<p>该方法接收一个参数——元素<code>name</code>的属性值，返回一个动态<code>NodeList</code>类数组对象，对象中包含以当前元素为根节点，所有指定<code>name</code>属性值的子元素。</p>
<p><font color="red">注意：表单元素获取更多的是用表单的DOM操作，既<code>oF.sex</code>的方式获取</font></p>
</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oSub = <span class="built_in">document</span>.querySelector(<span class="string">"form#f1 input[name=login]"</span>);</span><br><span class="line"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>该方法接收一个参数——包含一个或多个CSS选择器的字符串(多个选择器以逗号分隔)，返回匹配指定CSS选择器的<strong>第一个元素节点</strong>(无法选中伪元素)，没有发现匹配的节点则返回null。该方法非常强大，它能像css一样选择元素。</p>
<p><font color="red">注意：由于它的写法类似于css，所以必须给传的参数加上”.”和”#”等css标识，否则无法区分</font></p>
<ul>
<li><p><code>var aMatch = document.querySelectorAll(&quot;div.note, div.alert&quot;);</code></p>
<p>该方法接收一个参数——包含一个或多个CSS选择器的字符串(多个选择器以逗号分隔)，返回静态<code>NodeList</code>对象集合，该集合中包含匹配指定CSS选择器的所有节点，元素节点的变化无法实时反映在结果中；如果参数中包含CSS伪元素则返回一个空的对象集合。</p>
<p><font color="red">注意：该方法可以将所有匹配项返回成一个集合，所以需要和其他类似方法一样进行遍历，但由于该方法为<strong>静态方法</strong>，因此不需要如动态方法一样进行特殊处理，也就是说可以一次性删除</font></p>
<ul>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oEle = <span class="built_in">document</span>.elementFromPoint(x, y);</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<p>  该方法接收两个参数——是相对于当前窗口左上角的横纵坐标，单位为像素；返回位于页面指定位置的元素，如果该元素不可返回(如滚动条)则返回它的父元素，如果坐标值无意义(如负值)则返回null。</p>
<ul>
<li><p><code>getElementBy</code>系列返回的都是动态的<code>HTMLCollection</code>集合，DOM结构变化能实时地反映到所保存的对象中，而<code>querySelector</code>系列返回的都是静态的<code>NodeList</code>对象，是一个快照，DOM的任何操作都不会对其产生影响(这是规范的要求)。那么这两者有什么异同：</p>
<ul>
<li><p>二者都是类数组对象，因此都具有length属性，都具有<code>item()</code>方法(该方法节点列表中位于指定索引的节点)，下面写法等价</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.children.item(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">document</span>.body.children[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>NodeList</code>对象会包含文档中的所有节点，如 Element、Text 和 Comment 等</p>
</li>
<li><p><code>HTMLCollection</code> 对象只会包含文档中的 Element 节点</p>
<p><font color="red">注意：由于我们使用的获取元素的方法一般都不会获得Element以外的节点，因此在这里我们可以认为他们是等价的</font></p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="BOM："><a href="#BOM：" class="headerlink" title="BOM："></a>BOM：</h4><ul>
<li><p>Browser Object Model(简称BOM)：浏览器对象模型，专门操作浏览器窗口(window)的对象，而window是BOM对象，而非js对象。通常浏览器特定的 JavaScript 扩展都被看做 BOM 的一部分。这些扩展包括：</p>
<ul>
<li><p>弹出新的浏览器窗口</p>
</li>
<li><p>移动、关闭浏览器窗口以及调整窗口大小</p>
</li>
<li><p>提供 Web 浏览器详细信息的定位对象</p>
</li>
<li><p>提供用户屏幕分辨率详细信息的屏幕对象</p>
</li>
<li><p>对 cookie 的支持</p>
</li>
</ul>
</li>
<li><p>BOM的window包含了document，window对象的属性和方法是直接可以使用而且被感知的，如我们之前学习的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert();</span><br><span class="line">setInterval();</span><br></pre></td></tr></table></figure>

<p>这些方法其实都是window的方法，因此可以直接使用window对象的document属性，通过document属性就可以访问、检索、修改XHTML文档内容与结构。因为document对象又是DOM(Document Object Model)模型的根节点。可以说，BOM包含了DOM(对象)，浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。</p>
</li>
<li><p>DOM和BOM的区别：DOM描述了处理网页内容的方法和接口，BOM描述了与浏览器进行交互的方法和接口</p>
<ul>
<li>在可视区窗口中我们看到的所有元素(也就是我们写在html文件的body之内部分的)，在js中由DOM负责</li>
<li>浏览器的标签页，地址栏，搜索栏，书签栏，窗口放大还原关闭按钮，菜单栏等等；浏览器的右键菜单；document加载时的状态栏，显示http状态码等；滚动条scroll bar，上面这些在js由BOM负责</li>
</ul>
</li>
<li><p>window对象是js层级中的顶层对象；代表一个浏览器窗口或一个框架；会在每次打开页面(或框架)时被自动创建。因为window对象的属性和方法是直接可以使用而且被感知的，所以使用window的属性和方法时我们常常会省略window(为了防止和变量的误会最好加上)</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 获取一个ul的所有子元素li，然后遍历并输出所有的li，要求分别用NodeList和HTMLCollection操作一次</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">2. 封装一个方法，要求点击页面时，返回被点击的元素</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js表格和表单的DOM操作</title>
    <url>/2019/08/31/js%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95%E7%9A%84DOM%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<center><font size="4">js表格和表单的DOM操作</font></center>
- #### 表格的DOM操作：

<ul>
<li>表格较为繁杂，层次也多，使用DOM只是来获取某个元素会非常难受，所以使用table DOM会清晰很多。</li>
<li>浏览器在解析table的时候，如果你没有写tbody，它会自动生成一个tbody，因此如果你用html结构去获取元素时会出错，table应该直接加上thead和tbody</li>
<li>由于用上面的children获取表格中的元素会非常麻烦，js里原生提供了一些表格元素的方法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 获取表格的节点：</span></span><br><span class="line">   <span class="keyword">var</span> oTable = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'table'</span>)[<span class="number">0</span>];</span><br><span class="line">   oTable.caption; <span class="comment">// 获取表格标题</span></span><br><span class="line">   oTable.tHead; <span class="comment">// 获取表格头</span></span><br><span class="line">   oTable.tFoot; <span class="comment">// 获取表格尾</span></span><br><span class="line">   oTable.tBodies; <span class="comment">// 获取表格正文的集合</span></span><br><span class="line">   oTable.tBodies[<span class="number">0</span>].rows[<span class="number">0</span>]; <span class="comment">// 获取表格第一个表格正文中第一行</span></span><br><span class="line">   oTable.tBodies[<span class="number">0</span>].rows[<span class="number">0</span>].cells; <span class="comment">// 获取表格第一个表格正文中第一行的单元格集合</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//  删除表格的节点：</span></span><br><span class="line">   oTable.deleteCaption(); <span class="comment">// 删除表格标题</span></span><br><span class="line">   oTable.deleteTHead(); <span class="comment">// 删除表格头</span></span><br><span class="line">   oTable.tBodies[<span class="number">0</span>].deleteRow(<span class="number">0</span>);<span class="comment">// 删除第一个正文的第一行</span></span><br><span class="line">   oTable.tBodies[<span class="number">0</span>].rows[<span class="number">0</span>].deleteCell(<span class="number">0</span>);<span class="comment">// 删除第一个正文的第一行的第一个单元格</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 创建表格的节点：</span></span><br><span class="line">   <span class="keyword">var</span> oTable = <span class="built_in">document</span>.createElement(<span class="string">"table"</span>);  <span class="comment">// 创建一个table</span></span><br><span class="line">   <span class="keyword">var</span> oCaption = oTable.createCaption();  <span class="comment">// 创建一个表格标题</span></span><br><span class="line">   <span class="keyword">var</span> oThead = oTable.createTHead();  <span class="comment">// 创建一个表格头</span></span><br><span class="line">   <span class="keyword">var</span> oTr = oThead.insertRow(<span class="number">0</span>); <span class="comment">// 为表格头的指定位置添加一个新的行tr</span></span><br><span class="line">   <span class="keyword">var</span> oTd = oTr.insertCell(<span class="number">0</span>); <span class="comment">// 为上面的行的指定位置添加一个新的单元格td</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 表格属性的设置：</span></span><br><span class="line">   oTable.border = <span class="number">1</span>;</span><br><span class="line">   oTable.width = <span class="number">300</span>;</span><br><span class="line">   oTable.bgColor = <span class="string">"red"</span>;</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：一个表格里只能有一个表格标题、表格头和尾，但其他可以有多个；在创建表格的时候table、tbody和th没有特定的方法，需要使用document来创建。</font></p>
<hr>
<ul>
<li><h4 id="表单的DOM操作："><a href="#表单的DOM操作：" class="headerlink" title="表单的DOM操作："></a>表单的DOM操作：</h4><ul>
<li><p>通常每个表单元素应该有name和id属性，name用于交给服务器，id用于绑定和功能筛选。js可以通过下面方法获取对应表单元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oF = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"form"</span>)[<span class="number">0</span>];</span><br><span class="line">oF.q;  <span class="comment">// 获取name值等于q的表单元素(假设name="q"的元素只有一个)</span></span><br><span class="line">oF.sex; <span class="comment">// 如果name="sex"的表单元素不唯一，则需要用循环进行遍历</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>单选框、多选框选中状态：checked属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oF.sex[<span class="number">0</span>].checked <span class="comment">// 若radio或checkbox元素已被选中返回true，否则返回false</span></span><br><span class="line">oF.sex[<span class="number">0</span>].checked = <span class="literal">true</span>/<span class="literal">false</span>  <span class="comment">// 操作radio或checkbox元素被选中状态</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表单常用事件和方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oF.q.onchange  <span class="comment">// 事件，当表单项的值发生改变时触发(失去焦点时触发)，值不变，不会触发</span></span><br><span class="line">oF.onsubmit  <span class="comment">// 事件，当表单提交的时候(点击submit时触发)</span></span><br><span class="line">oF.onreset   <span class="comment">// 事件，当表单重置的时候(点击reset时触发)</span></span><br><span class="line">oF.submit()  <span class="comment">// 方法，执行提交表单</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<p>  <font color="red">注意：onchange事件是表单项的事件，而onsubmit、onreset和submit()都是表单的事件和方法</font></p>
<ul>
<li><p>焦点事件和方法(焦点就是光标所在的位置)：当一个元素有焦点的时候，那么它就可以等待用户的输入。可以切换焦点的方法：1、点击；2、tab；3、javascript</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onfocus  <span class="comment">//事件，当元素获取到焦点时触发</span></span><br><span class="line">onblur  <span class="comment">//事件，当元素失去焦点时触发</span></span><br><span class="line">blur()  <span class="comment">//方法，元素取消焦点</span></span><br><span class="line">focus()  <span class="comment">//方法，元素获得焦点，例如百度刷新出来后会立即在搜索框里获得焦点</span></span><br><span class="line">select() <span class="comment">//方法，选择指定元素里的文本内容，但是只能选择能获取焦点元素的内容</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>  <font color="red">注意：不是所有元素都有焦点，能响应用户操作的元素才有焦点(如div就没有焦点，a就有焦点)</font></p>
<ul>
<li>有些事件如点击右键(<code>oncontextmenu</code>)或提交表单等会有浏览器默认行为，如果需要阻止浏览器默认行为(on事件)，可以在事件函数内部加一句<code>return false</code></li>
</ul>
<hr>
<ul>
<li><h4 id="class列表属性："><a href="#class列表属性：" class="headerlink" title="class列表属性："></a>class列表属性：</h4><ul>
<li><p>classList属性用于在元素中添加，移除及切换 CSS 类。 classList 属性是只读的，但你可以用它的方法修改它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.classList.length;  <span class="comment">// 返回类列表中类的数量(只读)</span></span><br><span class="line">元素.classList.contains(<span class="class"><span class="keyword">class</span>)</span>; <span class="comment">// 返回布尔值，判断指定的类名是否存在。</span></span><br><span class="line">元素.classList.add(class1, class2, ...); <span class="comment">// 在元素中添加一个或多个类名。如果指定的类名已存在，则不会添加</span></span><br><span class="line">元素.classList.remove(class1, class2, ...); <span class="comment">// 移除元素中一个或多个类名。注意： 移除不存在的类名，不会报错</span></span><br><span class="line">元素.classList.toggle(<span class="class"><span class="keyword">class</span>)</span>; <span class="comment">// 在元素中切换类名。参数为要移除的类名，如果该类名不存在则会添加类名</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 用DOM的表格操作做一个表格——九九乘法表</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">2. 用DOM的表格操作做一个表格的隔行变色和鼠标移入变色移出恢复原色的效果</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">3. 如果文本框的内容为空时，阻止提交，并弹出一个请填写内容的弹窗</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">4. 做一个自定义的默认菜单(把原本右键的默认事件取消)，这个菜单要求和原本右键菜单一样(内容是个框)</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">5. 做一个四个以上选项的多选框，要求当已经有三个选项被选中了，选择第四个时会弹出最多只能选择三项</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">6. 用class切换的方法做一个选项卡和一个折叠，并用css给折叠加上动画</font></p>
<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ctrl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>我是第一个AAA的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">480px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#ctrl</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"我是第一个AAA的内容"</span>,<span class="string">"我是第二个BBB的内容"</span>,<span class="string">"我是第三个CCC的内容"</span>];</span><br><span class="line"><span class="keyword">var</span> aBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line"><span class="keyword">var</span> oContent = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</span><br><span class="line"><span class="keyword">var</span> iActive = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aBtn.length; i++) &#123;</span><br><span class="line">    aBtn[i].index = i;</span><br><span class="line">    aBtn[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 删除之前的class为active的类</span></span><br><span class="line">    aBtn[iActive].classList.remove(<span class="string">"active"</span>);</span><br><span class="line">    <span class="comment">// 添加类名</span></span><br><span class="line">    <span class="keyword">this</span>.classList.toggle(<span class="string">"active"</span>);</span><br><span class="line">    <span class="comment">// 设置iActive的值为当前的按钮</span></span><br><span class="line">    iActive = <span class="keyword">this</span>.index;</span><br><span class="line">    <span class="comment">// 给div赋数组里的值</span></span><br><span class="line">    oContent.innerHTML = arr[<span class="keyword">this</span>.index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js元素属性节点和属性操作</title>
    <url>/2019/08/31/js%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7%E8%8A%82%E7%82%B9%E5%92%8C%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<center><font size="4">js元素属性节点和属性操作</font></center>
- #### DOM的属性节点

<ul>
<li><p><code>元素.offsetLeft/offsetTop</code>   //  <font color="green"><strong>只读属性–当前元素到其定位父级的距离(偏移值)</strong></font>：<font color="orange">(没有单位，使用时需要加上)</font>    若有定位的父级，但自己没有定位，在ie7及以下浏览器里该属性指的是到body的距离，其他浏览器中则是到定位父级的距离；若无定位父级，ie8及以下浏览器是到html的距离</p>
</li>
<li><p>上面两个属性由于兼容性的问题，在使用时一定注意两点：<font color="red"><strong>第一清除浏览器的默认样式；第二该元素要有定位属性。</strong></font>否则在使用时会出问题。<font color="purple">用偏移值属性：我们可以用循环把浮动布局的元素改成定位布局的元素，从而添加动画等效果</font></p>
</li>
<li><p><code>元素.offsetWidth/offsetHeight</code>   //  <font color="green"><strong>只读属性–当前元素的占位宽高</strong></font></p>
<ul>
<li><code>元素.style.width</code>/<code>元素.style.height</code>的取值可以得到元素属性style里的宽度/高度(行间样式)</li>
<li><code>元素.clientWidth</code>/<code>元素.clientHeight</code>的值为盒子宽度/高度<strong>去掉边框border的部分</strong>，如可视区尺寸(浏览器窗口)：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientWidth  <span class="comment">//可视区宽度</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight <span class="comment">//可视区高度</span></span><br></pre></td></tr></table></figure>

<p>​        <font color="red">注意：document是没有尺寸的，要从文档元素documentElement上获取</font></p>
</li>
<li><p><code>元素.offsetWidth</code>/<code>元素.offsetHeight</code>(占位宽高)既盒子宽高，如文档高度：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDomHeight = <span class="built_in">document</span>.documentElement.offsetHeight <span class="comment">//在ie7及以下会表现为可视区（窗口）的高度,而不是文档（页面）的高度</span></span><br><span class="line"><span class="keyword">var</span> oDomHeight = <span class="built_in">document</span>.body.offsetHeight  <span class="comment">//推荐这个写法，无兼容问题</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>元素.offsetLeft</code>和<code>元素.offsetTop</code>会获取该元素到其定位父级的距离，想要获取一个元素到整个页面document或可视区窗口的距离，就要用下面的方法处理了：</p>
</li>
<li><p>封装一个方法：用来获得元素到整个页面的距离</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">obj,lrr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iOff = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(obj) &#123;  <span class="comment">//注意：body的offsetParent为空</span></span><br><span class="line">        iOff += obj[lrr];</span><br><span class="line">        obj = obj.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iOff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><code>元素.getBoundingClientRect()</code>方法 <font color="green"><strong>返回元素的大小及其相对于可视区窗口的位置</strong></font>。该函数返回一个Object对象，该对象有6个属性：top,left,right,bottom,width,height。top、left、right、bottom分别表示该元素左、上、右、下边距离可视区原点(0,0)的位置，width、height是元素自身盒子的宽高。</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rectObject = 元素.getBoundingClientRect();</span><br><span class="line">rectObject.top;    <span class="comment">// 元素上边到视窗上边的距离</span></span><br><span class="line">rectObject.right;    <span class="comment">// 元素右边到视窗左边的距离</span></span><br><span class="line">rectObject.bottom;    <span class="comment">// 元素下边到视窗上边的距离</span></span><br><span class="line">rectObject.left;    <span class="comment">// 元素左边到视窗左边的距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 低版本ie不支持宽高属性，可以用下面两个公式来计算出来：</span></span><br><span class="line">rectObject.right-rectObject.left;</span><br><span class="line">rectObject.bottom-rectObject.top;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<hr>
<ul>
<li><h4 id="元素的操作"><a href="#元素的操作" class="headerlink" title="元素的操作"></a>元素的操作</h4><ul>
<li><p><font color="orange"><strong>创建元素</strong></font>：之前我们用innerHTML的累加的方式创建元素，但是添加若次数过多会使性能降低，新语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oTag = <span class="built_in">document</span>.createElement(tag); <span class="comment">//纯洁的tag元素(无任何属性)</span></span><br><span class="line">oTag.innerHTML = <span class="string">"新元素的内容"</span>; <span class="comment">//需要我们自己添加属性方法，然后再放在DOM里：</span></span><br><span class="line">oPar.appendChild(oTag);  <span class="comment">//在父级最后一个节点后添加该元素</span></span><br><span class="line">oPar.insertBefore(oTag,n); <span class="comment">//在父级第n个节点前添加该元素</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="red">注意：</font><code>insertBefore</code>方法在ie浏览器中若父元素中没有第n个子元素会报错，如果我们想从前添加元素，则需要判断一下该元素是否有第一个子元素，若没有改用<code>append</code>方法添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oPar.children[<span class="number">0</span>] ? oPar.insertBefore(oTag,oPar.children[<span class="number">0</span>]) : oPar.appendChild(oTag);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><font color="orange"><strong>删除元素</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父级.removeChild(oTag);  <span class="comment">// 从父级中删除某子节点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>替换元素</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父级.replaceChild(新节点,被替换节点);  <span class="comment">// 在父元素中用新节点替换某子节点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>appendChild</code>,<code>insertBefore</code>,<code>replaceChild</code>等方法都可以操作动态创建的元素，也可以操作已有的节点，它们<font color="blue"><strong>都是剪切操作(既被操作的元素在原位置已经不存在了)</strong></font></p>
</li>
<li><p><font color="orange"><strong>克隆元素</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.cloneNode();   <span class="comment">// 克隆该元素对象</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="red">注意：由于使用克隆方法后，原来的元素依然存在，因此克隆的元素不应该使用id(否则id就不唯一了)</font></p>
</li>
</ul>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 布局一个输入框，一个按钮和一个ul列表，要求用动态创建的方法做一个点击按钮时将输入框中的内容在ul中生成一个对话li，li里面需要包含一个按钮-删除，点击该删除时，将按钮对应的对话li删除</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</span><br><span class="line">    oLi.innerHTML = oInput.value;</span><br><span class="line">    oBtn.innerHTML = <span class="string">"撤回"</span>;</span><br><span class="line">    oUl.appendChild(oLi);</span><br><span class="line">    oLi.appendChild(oBtn);</span><br><span class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oUl.removeChild(<span class="keyword">this</span>.parentNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 做一个点击图片弹窗效果，要求点击的图片依然在原地，在页面正中间用遮罩做一个窗口，在窗口中展示一个放大后的图片，并在点击他时消失</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">3. 写一个简单的小游戏：要求先布局一个5*5的格子(div)，起始为白色背景红色边框，点击任意一个格子的时候，要求该格子和其上下左右相邻的格子背景变色，变色规则——如果格子是白色的就变成黑色，反之亦然</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 对象操作和DOM</title>
    <url>/2019/08/30/js-%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E5%92%8CDOM/</url>
    <content><![CDATA[<center><font size="5">js对象操作和DOM</font></center>
- #### 对象操作：

<ol>
<li><p>对象与数据的转换操作：由于数组或者对象在进行数据传递是会变成字符串形式，如果不做转换是不能直接操作的</p>
<ul>
<li><code>eval</code>方法：把字符串解析成JS代码并运行，但是由于该方法不安全而耗性能(解析一次运行一次)，因此现在已经不推荐使用</li>
<li><code>JSON</code>方法：<code>stringify</code>方法将对象转成字符串，但是json必须是严格模式，既key必须是严格的字符串(双引号)；<font color="red">遵循外单内双原则</font></li>
<li><code>JSON</code>方法：<code>parse</code>方法将字符串转成对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据的深拷贝</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr1));</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="blue">删除属性方法</font>——delete操作符，语法：<code>delete 对象名.属性名</code>。这是删除属性的唯一方法。</p>
</li>
<li><p><font color="blue">判断属性方法</font>——<code>hasOwnProperty()</code>函数，语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">object.hasOwnProperty(proName);  <span class="comment">//判断proName属性是否属于object对象。若属于返回true，反之返回false</span></span><br></pre></td></tr></table></figure>

<p><font color="orange"><strong>该方法是 JavaScript 中唯一一个处理属性但是不查找原型的函数</strong></font></p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="DOM："><a href="#DOM：" class="headerlink" title="DOM："></a>DOM：</h4></li>
</ul>
<ol>
<li><p>Document Object Model (简称DOM)文档对象模型</p>
<ul>
<li>文档：html文件</li>
<li>文档对象：页面中的元素</li>
<li>文档对象模型：对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM，目的是为了能够让程序–js去操作页面中的元素</li>
</ul>
</li>
<li><p>把整个文档看成一棵树，树分支就是节点，同时定义了很多方法来操作这些节点，如下图是一个将html代码分解成的DOM树：</p>
</li>
</ol>
<p>   DOM树中三种常见的DOM节点:</p>
<ul>
<li>元素节点：上图中<html>、<body>、<a>等都是元素节点，即标签</a></body></html></li>
<li>文本节点：向用户展示的内容，如<title>…</title>中的”文档标题”文本</li>
<li>属性节点：元素的属性，如<a>标签的链接地址属性 <code>href</code></a></li>
<li>通过<code>getElementById</code>和<code>document.body</code>等方法获取元素就是获取元素节点的</li>
</ul>
<ol start="3">
<li><p>浏览器工作的过程：</p>
<ul>
<li>从网络或本地拿到html源代码</li>
<li>浏览器将html源码中的每个标签都实例化对应的对象</li>
<li>在内存中形成一个DOM树</li>
<li>将内存DOM树解析为可视页面</li>
<li>JS直接修改DOM树，改变页面视图</li>
</ul>
</li>
</ol>
<hr>
<ul>
<li><h4 id="元素属性节点："><a href="#元素属性节点：" class="headerlink" title="元素属性节点："></a>元素属性节点：</h4></li>
</ul>
<ol>
<li><p>属性节点：就是元素的属性–<code>元素.attributes</code>        //只读属性，如：<code>属性的名称.name</code>，<code>属性的值.value</code>等</p>
<ul>
<li><font color="blue">获取属性值 </font><code>元素.getAttribute()</code>     //一个参数，为属性名</li>
<li><font color="blue">设置属性值</font> <code>元素.setAttribute()</code>     //两个参数，为属性名和值</li>
<li><font color="blue">删除属性值</font> <code>元素.removeAttribute()</code>      //一个参数，为属性名</li>
<li>标签的自定义属性，在ie8及以下可以用.和[]的方法取到，但是标准浏览器不支持，但<code>getAttribute()</code>支持所有的浏览器</li>
<li>用<code>.src</code>和<code>[&#39;src&#39;]</code>的方法取到的是绝对路径，用<code>getAttribute(&#39;src&#39;)</code>可以获取到相对路径(既实际值，ie7及以下不兼容)</li>
<li><code>元素.childNodes</code>        // 只读属性–<font color="green"><strong>子节点列表集合</strong></font>：该属性不只包含元素节点，因此获取一个父元素的<code>chlidNodes</code>时要比实际元素的数量多</li>
</ul>
</li>
<li><p><code>元素.nodeType</code>      //  只读属性–<font color="green"><strong>获取元素的节点类型</strong></font>，常用的节点有：1元素节点，2属性节点，3文本节点。若我们希望控制元素节点，则可以先判断子节点的<code>nodeType</code>为1时，再控制它</p>
</li>
<li><p><font color="red"><code>元素.children</code>//只读属性–子元素属性：元素节点的列表集合 由于children只会包含元素节点，因此不会有上面属性的兼容性问题</font></p>
</li>
<li><p><code>元素.firstChild</code>    //   只读属性–<font color="green"><strong>第一个子节点</strong></font>：该属性是元素的所有子节点(<code>childNodes</code>)中的第一个子节点，因此包含文本类型的节点，不兼容；<font color="blue">标准浏览器有效的写法为<code>元素.firstElementChild</code></font>。因此兼容所有浏览器的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oFirst = 元素.firstElementChild || 元素.firstChild; </span><br><span class="line"><span class="keyword">if</span>(oFirst)&#123;oFirst.style.....&#125; <span class="comment">//为防止在没有子节点时出问题的写法</span></span><br><span class="line"></span><br><span class="line">父元素.children[<span class="number">0</span>].style.... <span class="comment">//因此最好的做法是用这个方法，避免上面那些写法兼容性的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类似的写法：</span></span><br><span class="line"><span class="keyword">var</span> oLast = 元素.lastElementChild || 元素.lastChild; <span class="comment">//最后一个子节点</span></span><br><span class="line"><span class="keyword">var</span> oNext = 元素.nextElementSibling || 元素.nextSibling; <span class="comment">//下一个兄弟节点</span></span><br><span class="line"><span class="keyword">var</span> oPrev = 元素.previousElementSibling || 元素.previousSibling; <span class="comment">//上一个兄弟节点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>元素.parentNode</code>       //     只读属性–<font color="green"><strong>父节点</strong></font>：由于父元素是唯一的，因此没有兼容问题</p>
</li>
<li><p><code>元素.offsetParent</code>       //     只读属性–<font color="green"><strong>距当前元素最近一个有定位属性的父元素节点</strong></font>：若无定位父级则默认会找到body(若在ie7及以下的浏览器中，该元素在没有定位的时候找的是body，有定位的时候则变成html)</p>
</li>
</ol>
<hr>
<p><font size="4" color="gree">练习：</font></p>
<p><font size="4">1. 创建一个cat对象，包含属性：name、sex和color。用delete删除name属性，给sex赋值为undefined，给color赋值为null。用hasOwnProperty()函数判断各个属性是否存在</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"cat"</span>,</span><br><span class="line">    <span class="string">"sex"</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="string">"color"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除name属性</span></span><br><span class="line"><span class="keyword">delete</span> cat.name;</span><br><span class="line"><span class="comment">// 属性存在则返回true，不存在则返回false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.hasOwnProperty(<span class="string">"name"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(cat.hasOwnProperty(<span class="string">"sex"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(cat.hasOwnProperty(<span class="string">"color"</span>));</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 分别用遍历和对象操作来完成数据的深拷贝</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"><span class="comment">// 遍历拷贝数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    arr2.push(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="comment">// 改变arr2的第一项值，检测arr2是否拷贝的是地址</span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="comment">// 对象操作拷贝数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br></pre></td></tr></table></figure>

<p><font size="4">3. 做一个列表ul，其每个li里面有个按钮，点击该按钮时隐藏其父元素li</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aBtn.length; i++) &#123;</span><br><span class="line">    <span class="comment">// console.log(aBtn[i].parentNode);</span></span><br><span class="line">    aBtn[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentNode.style.display = <span class="string">"none"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js表单验证</title>
    <url>/2019/08/26/js%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<ul>
<li><h5 id="必填或必选项目（验证表单数据是否为空？）"><a href="#必填或必选项目（验证表单数据是否为空？）" class="headerlink" title="必填或必选项目（验证表单数据是否为空？）"></a>必填或必选项目（验证表单数据是否为空？）</h5><p>下面的函数用来检查用户是否已填写表单中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true（意味着数据没有问题）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"myForm"</span> <span class="attr">onsubmit</span>=<span class="string">"return notNull()"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span> </span><br><span class="line">    姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">notNull</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oName = <span class="built_in">document</span>.forms[<span class="string">"myForm"</span>][<span class="string">"fname"</span>].value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (oName == <span class="literal">null</span> || oName == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"姓名不能为空！"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h5 id="Email验证："><a href="#Email验证：" class="headerlink" title="Email验证："></a>Email验证：</h5><p>下面的函数检查输入的数据是否符合电子邮件地址的基本语法。</p>
<p>意思就是说，输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"myForm"</span> <span class="attr">onsubmit</span>=<span class="string">"myFunction()"</span>&gt;</span></span><br><span class="line">    Email：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"femail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oEmail = <span class="built_in">document</span>.forms[<span class="string">"myForm"</span>][<span class="string">"femail"</span>].value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> atpos = oEmail.indexOf(<span class="string">"@"</span>);        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> dotpos = oEmail.lastIndexOf(<span class="string">"."</span>);        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (atpos &lt; <span class="number">1</span> || dotpos &lt; atpos+<span class="number">2</span> || dotpos+<span class="number">2</span> &gt;= x.length) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"不是有效的电子邮件地址！"</span>);        </span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;        </span></span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2019/08/25/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>二叉树：根     左     右</p>
<p>递归：1. 递归公式</p>
<pre><code>2. 终止条件</code></pre><p>二叉树中两个结点的公共祖先：</p>
<ol>
<li>站在root的角度</li>
<li>把二叉树分为三个部分：根左右</li>
<li>如果两个结点不在root的同一棵子树中，最近公共祖先一定是root</li>
<li>如果两个结点在root的同一棵子树中，把问题留给该边的孩子去解决（递归）</li>
<li>如果两个结点中有一个结点是root，则最近公共祖先一定是root</li>
</ol>
<p>二叉搜索树：</p>
<ol>
<li><p>如何从二叉搜索树中得到一个有序序列？</p>
<p>中序遍历</p>
</li>
<li><p>如果已经有一串有序序列了，能否组成双向链表？</p>
</li>
</ol>
<p>层序遍历：</p>
<ol>
<li>把根结点放到队列中</li>
<li>循环<ul>
<li>从队首取出结点</li>
<li>把该结点的左右孩子放到队列中</li>
</ul>
</li>
</ol>
<p>堆：</p>
<p>​    逻辑上：完全二叉树</p>
<p>​    物理上：数组</p>
<p>二叉树如何用数组保存？    层序遍历平铺在数组中</p>
<p>堆的基本功能：找最值</p>
<p>堆的两个重要操作：</p>
<ol>
<li><p>向下调整/堆化（heapify）</p>
<p>前提：除了要调整的位置之外，其他位置都满足堆的性质</p>
<p>操作： </p>
<ol>
<li><p>要调整的位置是叶子，则不需要调整</p>
<pre><code>2. 找最大孩子的下标
   3. 最大孩子的值和该位置的值比较，如果已经满足堆的性质了，则不需要调整
   4. 交换两个位置的值
   5. 继续调整最大孩子值（最大孩子处因为交换，可能不满足堆的性质了）</code></pre></li>
</ol>
</li>
<li><p>建堆   (createHeap)</p>
<p>[最后一个非叶子结点, 0]</p>
</li>
<li><p>堆的应用：</p>
<p>优先级队列</p>
<table>
<thead>
<tr>
<th></th>
<th align="center">时间复杂度</th>
<th align="center">空间复杂度</th>
<th align="center">稳定性</th>
</tr>
</thead>
<tbody><tr>
<td>插入排序</td>
<td align="center">O(n) | O(n)</td>
<td align="center"></td>
<td align="center">稳定</td>
</tr>
<tr>
<td>选择</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">不稳定</td>
</tr>
<tr>
<td>冒泡</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">稳定</td>
</tr>
<tr>
<td>堆排</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">不稳定</td>
</tr>
</tbody></table>
</li>
</ol>
<p>快排：（分治算法）</p>
<ol>
<li><p>确定基准值</p>
<ul>
<li>边界</li>
<li>随机</li>
<li>多数取中</li>
</ul>
</li>
<li><p>遍历整个待排序区间，把比基准值小的放左边，大的放右边</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>js 正则表达式基础语法</title>
    <url>/2019/08/20/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p><font color="blue"><strong>【概念】</strong></font>正则表达式是由普通字符及特殊字符组成的对字符串进行过滤的逻辑公式</p>
<ul>
<li><h5 id="正则表达式创建方式"><a href="#正则表达式创建方式" class="headerlink" title="正则表达式创建方式"></a>正则表达式创建方式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 字面量的方式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>;</span><br><span class="line"><span class="comment">// 2. 构造函数的方式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h5><ol>
<li><code>test()</code>方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = reg.test(str);</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js cookie基础操作</title>
    <url>/2019/08/19/js-cookie%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><font color="blue"><strong>【概念】</strong></font><code>cookie</code> ：<font color="red"><strong>（需要放在服务器端执行）</strong></font></p>
<blockquote>
<p>是指缓存在本地客户端的数据（保存在硬盘上的数据），能识别用户的身份（要和后端的session结合）</p>
</blockquote>
<blockquote>
<p>http是无状态的</p>
<p>客户端用cookie，服务器端用session</p>
<ol>
<li>首次请求，服务器端会分配一个sessionid（编号，相当于身份证号码），保存在session里，在响应时，把sessionid发给客户端，客户端保存在cookie里</li>
<li>第二次请求，客户端请求时，把sessionid带到服务器端，服务器端就能识别了</li>
</ol>
</blockquote>
<p><font color="blue"><strong>格式</strong></font></p>
<ol>
<li><p>先去后端验证用户名和密码是否正确</p>
</li>
<li><p>保存cookie；（就是使用<code>document</code>）</p>
<blockquote>
<p>path是设置当前cookie可以被那些路径下的html访问</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'键=值; expires=日期的GMT格式; path=可以访问的路径; domain=可以访问的域名'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取cookie；（）</p>
</li>
</ol>
<p><font color="blue"><strong>【功能】</strong></font><code>cookie</code>基本操作包括增、删、改、查四个部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询cookie</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"username=honey"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置cookie期限</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">oDate.setDate(oDate.getDate() + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"username=honey;expires="</span> + <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改cookie  同名的cookie会被覆盖</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"username=honey1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除cookie,即给cookie设置一个过去的时间</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">oDate.setDate(oDate.getDate() - <span class="number">1</span>); <span class="comment">// 无所谓减几</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"username=honey;expires="</span> + <span class="built_in">Date</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="cookie操作的封装"><a href="#cookie操作的封装" class="headerlink" title="cookie操作的封装"></a>cookie操作的封装</h5><ol>
<li><p><code>setCookie()</code>：建立cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params"> name, value, day, path, domain</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    oDate.setDate(oDate.getDate() + day);</span><br><span class="line">    <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + <span class="string">";expires="</span> + oDate.toGMTString(); <span class="comment">// escape():是把字符串进行百分号编码</span></span><br><span class="line">&#125;</span><br><span class="line">setCookie(<span class="string">"name1"</span>, <span class="string">"honey1"</span>, <span class="number">1</span>);</span><br><span class="line">setCookie(<span class="string">"name2"</span>, <span class="string">"honey2"</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>getCookie()</code>：获取cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie); <span class="comment">// unescape:解码</span></span><br><span class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">"; "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr1 = arr[i].split(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">if</span>(arr1[<span class="number">0</span>] == name) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr1[<span class="number">1</span>];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>removeCookie()</code>  删除cookie（cookie没办法直接删除，只能设置过去的时间）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    setCookie(name,<span class="number">1</span>,<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line">removeCookie(<span class="string">"name1"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(getCookie(<span class="string">"name1"</span>)); <span class="comment">//发现控制台没有name1了，删除成功！</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><h5 id="cookie基础应用：记住用户账户密码，第二次登陆直接点击登录即可"><a href="#cookie基础应用：记住用户账户密码，第二次登陆直接点击登录即可" class="headerlink" title="cookie基础应用：记住用户账户密码，第二次登陆直接点击登录即可"></a>cookie基础应用：记住用户账户密码，第二次登陆直接点击登录即可</h5><p>HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>七天免登录<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提前封装好的cookie操作</span></span><br><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name,value,day</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    oDate.setDate(oDate.getDate()+day);</span><br><span class="line">    <span class="comment">// 保存cookie</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + value + <span class="string">";expires="</span> + oDate; <span class="comment">// 时间点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="built_in">document</span>.cookie;</span><br><span class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">"; "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr1 = arr[i].split(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">if</span>(arr1[<span class="number">0</span>] == name) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr1[<span class="number">1</span>];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    setCookie(name,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span><br><span class="line"><span class="comment">// 判断cookie的usernam值是否存在</span></span><br><span class="line"><span class="keyword">if</span>(getCookie(<span class="string">"username"</span>)) &#123;</span><br><span class="line">    <span class="comment">// 赋值</span></span><br><span class="line">    aInput[<span class="number">0</span>].value = getCookie(<span class="string">"username"</span>);</span><br><span class="line">    aInput[<span class="number">1</span>].value = getCookie(<span class="string">"password"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击“登录”</span></span><br><span class="line">aInput[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = aInput[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">var</span> password = aInput[<span class="number">1</span>].value;</span><br><span class="line">    <span class="comment">// 如果点击了“七天免登录”</span></span><br><span class="line">    <span class="keyword">if</span>(aInput[<span class="number">2</span>].checked) &#123;</span><br><span class="line">        <span class="comment">// 七天过期</span></span><br><span class="line">        setCookie(<span class="string">"username"</span>,username,<span class="number">7</span>);</span><br><span class="line">        setCookie(<span class="string">"password"</span>,password,<span class="number">7</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
</ul>
<ul>
<li><h5 id="XSS（cross-site-script）：跨站脚本攻击"><a href="#XSS（cross-site-script）：跨站脚本攻击" class="headerlink" title="XSS（cross site script）：跨站脚本攻击"></a>XSS（cross site script）：跨站脚本攻击</h5><blockquote>
<p>用户写一些恶意的js代码，注入到网页，来执行一些恶意的行为，如：得到cookie信息</p>
</blockquote>
</li>
<li><h5 id="防止XSS攻击：（处理尖括号-lt-gt-，用转义字符：-amp-lt-和-amp-gt-代替-lt-和-gt-）"><a href="#防止XSS攻击：（处理尖括号-lt-gt-，用转义字符：-amp-lt-和-amp-gt-代替-lt-和-gt-）" class="headerlink" title="防止XSS攻击：（处理尖括号&lt;&gt;，用转义字符：&amp;lt;和&amp;gt;代替&lt;和&gt;）"></a>防止XSS攻击：（处理尖括号&lt;&gt;，用转义字符：<code>&amp;lt;</code>和<code>&amp;gt;</code>代替<code>&lt;</code>和<code>&gt;</code>）</h5></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 封装获取节点函数</title>
    <url>/2019/08/17/js-%E5%B0%81%E8%A3%85%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>封装一个函数，可以拥有几种获取元素节点的功能</p>
<p>【注】通过css选择器选择对应的选择器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">vArg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 对参数进行区分</span></span><br><span class="line">    <span class="keyword">switch</span>(vArg[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"#"</span>: <span class="comment">// id</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(vArg.substring(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"."</span>: <span class="comment">// className</span></span><br><span class="line">            <span class="keyword">return</span> elementByClassName(<span class="built_in">document</span>, vArg.substring(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// 对参数的前5个字符，进行判断</span></span><br><span class="line">            <span class="keyword">var</span> str = vArg.substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span>(str == <span class="string">"name="</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.getElementsByName(vArg.substring(<span class="number">5</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.getElementsByTagName(vArg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js DOM</title>
    <url>/2019/08/17/js-DOM/</url>
    <content><![CDATA[<ul>
<li><h5 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h5></li>
</ul>
<p><font color="blue"><strong>【概念】</strong></font>document object model，文档对象模型，是W3C标准，中立于平台和语言的接口，它允许程序和脚本动态的访问和更新文档的内容、结构和样式</p>
<p>HTML，CSS–页面内容    JS–页面行为操作  </p>
<p>DOM–打通HTML，CSS，JS壁垒的一个工具</p>
<p><font color="blue"><strong>【分类】</strong></font>DOM中节点种类一共有三种，在JS中所有节点都是对象</p>
<p>​    <div title="属性节点">测试div<div></div></div></p>
<ol>
<li>元素节点： <div></div></li>
<li>属性节点：title = “属性节点”</li>
<li>文本节点：测试div</li>
</ol>
<p><font color="red">【注】这些节点都有三个属性，分别为：<code>nodeName</code>、<code>nodeType</code>、<code>nodeValue</code></font></p>
<ul>
<li><h5 id="元素节点对象"><a href="#元素节点对象" class="headerlink" title="元素节点对象"></a>元素节点对象</h5><ul>
<li>查找元素节点的方法：<code>document.getElementById(id);</code>：通过当前元素节点的id，获取对应元素节点 </li>
</ul>
<p><font color="red">【注】<code>window.onload = function(){}</code>：在页面加载完成以后执行的函数</font></p>
<ul>
<li><p>元素节点属性</p>
<p>通过这个节点对象，访问它的一系列属性</p>
<ul>
<li><code>tagName</code>：获取元素节点的标签名</li>
<li><code>innerHTML</code>：获取元素节点标签间的内容，解析标签</li>
</ul>
</li>
<li><p>HTML属性的属性</p>
<p>访问这些属性<code>id</code>，<code>title</code>，<code>style</code>，<code>className</code>：</p>
<ul>
<li>元素节点.属性名</li>
<li>元素节点[属性名]</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><h5 id="attribute方法"><a href="#attribute方法" class="headerlink" title="attribute方法"></a>attribute方法</h5><p><code>set/getAttribute()</code> 设置/获取元素节点</p>
<p><code>removeAttribute()</code> 删除元素节点</p>
<p>【注】都是操作当前元素节点中某个属性的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改某一属性值的方法</span></span><br><span class="line"><span class="comment">// 方法1：点操作</span></span><br><span class="line">oDiv.title = <span class="string">"xxx"</span>;</span><br><span class="line"><span class="comment">// 方法2：attribute方法</span></span><br><span class="line">oDiv.setAttribute(<span class="string">"title"</span>, <span class="string">"xxx"</span>);</span><br></pre></td></tr></table></figure>

<p>上述两种方法的区别：</p>
<p>&lt;1&gt; <code>class</code>属性范围区别：点操作是通过<code>className</code>，而<code>set/getAttribute()</code>是通过<code>class</code></p>
<p>&lt;2&gt; <code>set/getAttribute()</code>支持用户自定义属性</p>
<p>&lt;3&gt; <code>removeAttribute()</code>删除元素节点，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除title属性</span></span><br><span class="line">oDiv.removeAttribute(<span class="string">"title"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h5 id="元素节点属性"><a href="#元素节点属性" class="headerlink" title="元素节点属性"></a>元素节点属性</h5><ol>
<li><code>childNodes</code> ：获取当前元素节点的所有的子节点，包括两种节点类型：元素节点和文本节点</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(oDiv.childNodes); <span class="comment">// 输出object NodeList</span></span><br><span class="line"><span class="comment">// object NodeList 装有当前元素节点所有的子节点</span></span><br><span class="line">alert(oDiv.childNodes.length); <span class="comment">// 输出子节点长度</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>ownerDocument</code>：返回该节点的文档对象根节点，返回的对象相当于document</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(box.ownerDocument === <span class="built_in">document</span>); <span class="comment">// true， 根节点</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h5 id="insertBefore-方法"><a href="#insertBefore-方法" class="headerlink" title="insertBefore()方法"></a>insertBefore()方法</h5><p><font color="blue"><strong>【格式】</strong></font>父节点.insertbefore(插入的节点, 旧节点)</p>
<p><font color="blue"><strong>【功能】</strong></font>将插入的节点插入到旧节点之前</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个&lt;strong&gt;将这个节点插入到span节点之前</span></span><br><span class="line"><span class="comment">// &lt;1&gt; 创建strong</span></span><br><span class="line"><span class="keyword">var</span> node = createElementWithTxt(<span class="string">"strong"</span>, <span class="string">"strong文本"</span>);</span><br><span class="line"><span class="keyword">var</span> oSpan = <span class="built_in">document</span>.getElementByTagName(<span class="string">"span"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// &lt;2&gt; 进行插入</span></span><br><span class="line">oSpan.parentNode.insertBefore(node, oSpan);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h5 id="元素节点操作方法"><a href="#元素节点操作方法" class="headerlink" title="元素节点操作方法"></a>元素节点操作方法</h5><ol>
<li><p><code>replaceChild()</code> ：</p>
<p><font color="blue"><strong>【格式】</strong></font><code>parent.replaceChild(newNode, oldNode);</code></p>
<p><font color="blue"><strong>【功能】</strong></font>用<code>newNode</code>替换<code>oldNode</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个strong，代替原有的div</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"strong"</span>);</span><br><span class="line">    oDiv.parent.replaceChild(node, oDiv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>cloneNode()</code>：</p>
<p><font color="blue"><strong>【格式】</strong></font><code>node.cloneNode()</code></p>
<p><font color="blue"><strong>【功能】</strong></font>克隆节点</p>
<p><font color="blue"><strong>【返回值】</strong></font>新克隆出来的节点</p>
<p><font color="blue"><strong>【参数】</strong></font><code>true</code>，默认是<code>false</code>，如果 传<code>true</code>，就会复制元素节点中的innerHTML</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将div添加到span节点的前面</span></span><br><span class="line"><span class="comment">// 方法一：原来的div被删除了</span></span><br><span class="line">oSpan.parentNode.insertBefore(oDiv, oSpan);</span><br><span class="line"><span class="comment">// 方法二：克隆div节点并插入</span></span><br><span class="line"><span class="keyword">var</span> node = oDiv.cloneNode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>removeChild()</code> ：</p>
<p><font color="blue"><strong>【格式】</strong></font><code>node.parentNode.moveChild();</code></p>
<p><font color="blue"><strong>【功能】</strong></font>删除节点</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js BOM_history对象和search处理</title>
    <url>/2019/08/17/js-BOM-history%E5%AF%B9%E8%B1%A1%E5%92%8Csearch%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<ul>
<li><h5 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h5><p><font color="blue"><strong>【定义】</strong></font><code>history</code>是window对象的属性，它保存这个用户上网的记录</p>
<p><font color="blue"><strong>【属性】</strong></font><code>history.length</code>：返回当前history对象中记录数，也就是历史记录的条数</p>
<p><font color="blue"><strong>【方法】</strong></font></p>
<pre><code>1. `history.back()`：返回上一条历史记录，类似于后退
2. `history.forward()`：前进到下一条历史记录，类似于前进
3. `history.go()`：参数为 0 时，重载当前页面；参数为正数时，前进对应数量的记录；参数为负数时，后退对应数量的记录</code></pre></li>
</ul>
<hr>
<ul>
<li><h5 id="search处理"><a href="#search处理" class="headerlink" title="search处理"></a>search处理</h5><p><font color="gree">例1~在web开发中，我们经常需要获取诸如<code>?id=5&amp;search=ok</code>这种类型的URL键值对，那么通过location，我们可以写一个函数来一一获取</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个存放键值对的数组</span></span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="comment">// 取出?号</span></span><br><span class="line">    <span class="keyword">var</span> str = location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 按&amp;字符串拆分数组</span></span><br><span class="line">    <span class="keyword">var</span> items = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> itemArray = items[i].split(<span class="string">"="</span>);</span><br><span class="line">        array[i] = itemArray[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="gree">例2~获取URL中的search，通过传入对应的key，返回key对应的value，如：传入id，返回5</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">search, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 找出key第一次出现的位置</span></span><br><span class="line">    <span class="keyword">var</span> start = search.indexOf(key);</span><br><span class="line">    <span class="keyword">if</span>(start == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// &lt;2&gt; 找出键值对，结束的位置</span></span><br><span class="line">        <span class="keyword">var</span> end = search.indexOf(<span class="string">"&amp;"</span>, start);</span><br><span class="line">        <span class="keyword">if</span>(end == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">//这是最后一个键值对</span></span><br><span class="line">            end = search.length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;3&gt; 将这个键值对提取出来</span></span><br><span class="line">    <span class="keyword">var</span> str = search.substring(start, end);</span><br><span class="line">    <span class="comment">// alert(str);</span></span><br><span class="line">    <span class="comment">// &lt;4&gt; key = value 获取value</span></span><br><span class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">"="</span>);</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> search = <span class="string">"?id=5&amp;search=ok"</span>;</span><br><span class="line">getValue(search, <span class="string">"search"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js BOM_location属性和方法</title>
    <url>/2019/08/16/js-BOM-location%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><h5 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h5><p><font color="blue"><strong>【定义】</strong></font> 浏览器最上方的地址栏输入框，它提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能</p>
<p><font color="blue"><strong>【属性】</strong></font> (组成一个url的各个部分) </p>
<p>​    <code>url</code>：统一资源定位符（相当于快递包上的一个地址）</p>
<ol>
<li><p><code>location.hash</code>：锚点，也就是url最后的#部分，实现页内跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取锚点</span></span><br><span class="line">alert(location.hash);   <span class="comment">// hash是锚点，也就是url最后的#部分，实现页内跳转</span></span><br><span class="line"><span class="comment">// 设置页面锚点</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        location.hash = <span class="string">"#3"</span>; <span class="comment">// 点击页面任意位置时，可以看到url最后加了#3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ul>
<ol start="2">
<li><p><code>host</code>：主机名端口号     浏览器的端口号，默认是8080，</p>
<p>IP：通过IP可以在全球范围内找到这台电脑所使用的网络的地址</p>
<p>端口号：正在使用网络的软件，在当前电脑内唯一的标识</p>
</li>
<li><p><code>hostname</code>：主机名，域名/IP</p>
<p>域名：就是给IP起的好记的名字</p>
</li>
<li><p><code>href</code>：整个url</p>
</li>
<li><p><code>pathname</code>：路径名</p>
</li>
<li><p><code>port</code>：端口号</p>
</li>
<li><p><code>protocal</code>：协议</p>
<ul>
<li><code>http</code>：网络协议</li>
<li><code>file</code>：本地文件协议</li>
</ul>
</li>
<li><p><code>search</code> ：查询字符串，跟在?后面的部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        location.search = <span class="string">"?xxx=yyy&amp;age=18"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>  <font color="green">补充：url：统一资源定位符</font>       包括以下几个部分:</p>
<p>   <code>protocol</code>(协议):host(主机名):port(端口号)/pathname(路径)?查询字符串(search)#锚点(hash)</p>
<p>  例~<a href="http://www.baidu.com:8080/code/xxx.html?username=xxx&amp;age=18#1" target="_blank" rel="noopener">http://www.baidu.com:8080/code/xxx.html?username=xxx&amp;age=18#1</a></p>
<hr>
<ul>
<li><h5 id="location对象的方法"><a href="#location对象的方法" class="headerlink" title="location对象的方法"></a>location对象的方法</h5><ol>
<li><p><code>assign()</code>：跳转到指定的url</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跳转到百度页面</span></span><br><span class="line">location.assign(<span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reload()</code>：重载当前的url</p>
<p><font color="red">如果传参(忽略缓存)，参数为true时，强制加载，即从服务器源头重新加载</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新当前页面（无参数时）</span></span><br><span class="line">location.reload();</span><br><span class="line"><span class="comment">// 强制加载（有参数时）</span></span><br><span class="line">location.reload(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>replace()</code>：用新的url替换当前页面，可以避免产生跳转前的历史记录</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js BOM_open()方法</title>
    <url>/2019/08/16/js-BOM-open-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><font color="blue"><strong>【调用】</strong></font><code>open()</code></p>
<p><font color="blue"><strong>【参数】</strong></font>（三个）</p>
<ol>
<li>要加载的URL</li>
<li>窗口的名称或窗口的目标</li>
<li>一串具有特殊意义的字符串</li>
</ol>
<p><font color="blue"><strong>【注意】</strong></font></p>
<ol>
<li>只有第一个参数，调用<code>open()</code>方法会打开新窗口，加载url</li>
<li>第二个参数是给打开的新窗口起一个名字，以后再去加载url，就在已经起好名字的目标窗口加载url</li>
<li>第三个参数是设置当前打开窗口的参数，比如：width、height</li>
</ol>
<p><font color="gree">例1~点击按钮打开百度页面</font></p>
<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 只有第一个参数</span></span><br><span class="line">        open(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">        <span class="comment">// 有两个参数</span></span><br><span class="line">        open(<span class="string">"http://www.baidu.com"</span>,<span class="string">"百度"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js BOM_系统对话框</title>
    <url>/2019/08/16/js-BOM-%E7%B3%BB%E7%BB%9F%E5%AF%B9%E8%AF%9D%E6%A1%86/</url>
    <content><![CDATA[<ul>
<li><h5 id="三种系统对话框"><a href="#三种系统对话框" class="headerlink" title="三种系统对话框"></a>三种系统对话框</h5></li>
</ul>
<ol>
<li><p><code>alert()</code>：直接弹出警告框</p>
</li>
<li><p><code>confirm()</code>：</p>
<p>【功能】弹出一个带有确定和取消按钮的警告框</p>
<p>【返回值】点击确定，返回true；点击取消，返回false</p>
</li>
<li><p><code>prompt()</code>：</p>
<p>【功能】弹出一个带输入框的提示框</p>
<p>【参数】（可以是两个） </p>
<ul>
<li>第一个参数：要在提示框上显示的内容</li>
<li>第二个参数：输入框内默认的值</li>
</ul>
<p>【返回值】点击确定，返回值是输入的内容；点击取消，返回值是null</p>
</li>
</ol>
<p>​                </p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js构造函数</title>
    <url>/2019/08/11/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<blockquote>
<p><font face="楷体">前面有两种创建对象的方法：1.对象字面量创建对象；2. new Object()创建对象； 但是这两种方法一次只能创建一个对象，但可能不同的对象里面很多的属性和方法是大量相同的，而我们只能复制，</font><font color="red" face="楷体"><strong>因此我们可以用构造函数的方法重复这些相同的代码</strong></font></p>
</blockquote>
<ul>
<li><h5 id="构造函数：把对象里面一些相同的属性和方法抽象出来封装到函数里面，主要用来初始化对象"><a href="#构造函数：把对象里面一些相同的属性和方法抽象出来封装到函数里面，主要用来初始化对象" class="headerlink" title="构造函数：把对象里面一些相同的属性和方法抽象出来封装到函数里面，主要用来初始化对象"></a>构造函数：把对象里面一些相同的属性和方法抽象出来封装到函数里面，主要用来初始化对象</h5></li>
<li><h5 id="构造函数的语法格式："><a href="#构造函数的语法格式：" class="headerlink" title="构造函数的语法格式："></a>构造函数的语法格式：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.属性 = 值;</span><br><span class="line">    <span class="keyword">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用构造函数要用new</span></span><br><span class="line"><span class="keyword">new</span> 构造函数名();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="blue"><strong>注意：</strong></font>1. 构造函数名首字母要大写</p>
<p>​            2. 构造函数不需要<code>return</code>就可以返回结果</p>
<p>​            3. 调用构造函数必须使用<code>new</code></p>
<p>​            4. 只要<code>new Star()</code>调用函数就可以创建一个对象<code>ldh {}</code></p>
<p>​            5. 构造函数的属性和方法前面必须添加<code>this</code></p>
<ul>
<li><h5 id="构造函数和对象的区别："><a href="#构造函数和对象的区别：" class="headerlink" title="构造函数和对象的区别："></a>构造函数和对象的区别：</h5><ol>
<li>构造函数（泛指）：是泛指的一大类，相当于Java中的类(class)；如：明星</li>
<li>对象（特指）：是一个具体的事物，看得见摸得着；如：刘德华 == {name: “刘德华”, age: 18, sex: “男”, sing: f}</li>
<li>利用构造函数创建对象的过程也称为对象的实例化</li>
</ol>
</li>
</ul>
<hr>
<p><font color="gree">例1：创建四大天王的对象</font></p>
<p>​    <font face="新宋体">分析：相同的属性：名字、年龄、性别</font></p>
<p>​                <font face="新宋体">相同的方法：唱歌</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age,sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params">sang</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用构造函数</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">"刘德华"</span>,<span class="number">18</span>,<span class="string">"男"</span>);<span class="comment">// 调用函数返回的是一个对象</span></span><br><span class="line">ldh.sing(<span class="string">"冰雨"</span>);</span><br><span class="line">zxy.sing(<span class="string">"李香兰"</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p><font color="gree">例2：利用构造函数创建两个英雄对象，函数中的公共部分包括：姓名属性(name)，类型属性(type)，血量属性(blood)和攻击方式(attack)</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name,type,blood</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.type = type;</span><br><span class="line">	<span class="keyword">this</span>.blood = blood;</span><br><span class="line">	<span class="keyword">this</span>.attack = <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> LianPo = <span class="keyword">new</span> Hero(<span class="string">"廉颇"</span>,<span class="string">"力量型"</span>,<span class="string">"500血量"</span>); <span class="comment">// 创建了廉颇的对象</span></span><br><span class="line"><span class="keyword">var</span> HouYi = <span class="keyword">new</span> Hero(<span class="string">"后羿"</span>,<span class="string">"射手型"</span>,<span class="string">"100血量"</span>); <span class="comment">// 创建了后羿的对象     </span></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> LianPo) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(LianPo[k]);</span><br><span class="line">&#125;</span><br><span class="line">LianPo.attack(<span class="string">"近战"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> HouYi) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(HouYi[k]);</span><br><span class="line">&#125;</span><br><span class="line">HouYi.attack(<span class="string">"远程"</span>);</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h5 id="new关键字执行过程："><a href="#new关键字执行过程：" class="headerlink" title="new关键字执行过程："></a><code>new</code>关键字执行过程：</h5><ol>
<li><code>new</code>构造函数可以在内存中创建一个新的空对象</li>
<li><code>this</code>就会指向这个新的对象</li>
<li>执行构造函数里面的代码，给这个新对象添加属性和方法</li>
<li>返回这个新对象（所以构造函数里不需要<code>return</code>）</li>
</ol>
</li>
<li><h5 id="遍历对象：for-in语句"><a href="#遍历对象：for-in语句" class="headerlink" title="遍历对象：for...in语句"></a>遍历对象：<code>for...in</code>语句</h5><ol>
<li><p>语法格式：<code>for(变量 in 对象)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// k是变量，得到的是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// ob[k]是对象,得到的是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：一般 <code>for...in</code>  里面的变量为 <code>k</code> 或者 <code>key</code></p>
</li>
</ol>
</li>
</ul>
<hr>
<ul>
<li><h5 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h5><ul>
<li><p>实例成员：构造函数内部通过<code>this</code>添加的成员，只能通过实例化的对象来访问</p>
</li>
<li><p>静态成员：在构造函数本身添加的成员，只能通过构造函数访问，即<code>构造函数.属性</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;  <span class="comment">// 实例成员</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="comment">/* this.sing = function() &#123;</span></span><br><span class="line"><span class="comment">        console.log('我会唱歌');</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">&#125;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh  = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line">Star.sex = <span class="string">'男'</span>;  <span class="comment">// 静态成员</span></span><br><span class="line"><span class="built_in">console</span>.log(Star.sex);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h5 id="构造函数的缺点"><a href="#构造函数的缺点" class="headerlink" title="构造函数的缺点"></a>构造函数的缺点</h5><ul>
<li>存在浪费内存的问题</li>
</ul>
</li>
</ul>
<hr>
<p><font size="5" color="gree">练习：</font></p>
<p>​    创建一个电脑对象，该对象要有颜色、重量、品牌、型号，可以看电影、听音乐、打游戏和敲代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Computer</span>(<span class="params">brand,type,color,weight</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    <span class="keyword">this</span>.action = <span class="function"><span class="keyword">function</span>(<span class="params">active</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这个对象可以"</span> + active);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Computer(<span class="string">"联想"</span>,<span class="string">"KONEW12"</span>,<span class="string">"灰色"</span>,<span class="string">"1.5kg"</span>);</span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]);</span><br><span class="line">&#125;</span><br><span class="line">obj.action(<span class="string">"看电影"</span>);</span><br><span class="line">obj.action(<span class="string">"听音乐"</span>);</span><br><span class="line">obj.action(<span class="string">"打游戏"</span>);</span><br><span class="line">obj.action(<span class="string">"敲代码"</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js预解析</title>
    <url>/2019/08/11/js%E5%9F%9F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>当变量没有var声明，直接赋值时，相当于全局变量，不会被销毁</p>
</blockquote>
<hr>
<ul>
<li><h5 id="JS引擎执行js分为两步：1-预解析；2-执行代码"><a href="#JS引擎执行js分为两步：1-预解析；2-执行代码" class="headerlink" title="JS引擎执行js分为两步：1.预解析；2.执行代码"></a><font face="宋体">JS引擎执行js分为两步：1.预解析；2.执行代码</font></h5><p>（1）<strong>预解析：js引擎会把js里所有的<code>var</code>和<code>function</code>提升到当前作用域的最前面</strong></p>
<p>（2）代码执行：按照代码书写的顺序<font color="blue"><strong>从上往下</strong></font>执行</p>
</li>
</ul>
<hr>
<ul>
<li><h5 id="预解析分为：变量预解析（变量提升）、函数预解析（函数提升）"><a href="#预解析分为：变量预解析（变量提升）、函数预解析（函数提升）" class="headerlink" title="预解析分为：变量预解析（变量提升）、函数预解析（函数提升）**"></a><font face="宋体">预解析分为：变量预解析（变量提升）、函数预解析（函数提升）**</font></h5><p>（1）<font color="green">变量提升：把所有的变量声明提升到当前的作用域最前面，<strong>但不提升赋值操作</strong></font></p>
<p>​    例：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun(); <span class="comment">// 报错  </span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">22</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在这种初始化变量的情况下，函数调用要在后面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分割线 */</span></span><br><span class="line"><span class="comment">//上面的代码相当于以下代码</span></span><br><span class="line"><span class="keyword">var</span> fun;</span><br><span class="line">fun(); <span class="comment">// 按顺序执行，上面并没有fun()这个函数，所以报错</span></span><br><span class="line">fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">22</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    （2）<font color="green">函数提升：把所有的函数声明提升到<strong>当前作用域</strong></font></p>
<p>​        例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn(); <span class="comment">// 输出11</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 在js眼里，函数声明是在fn()之前的</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><font color="gree" size="5">预解析案例：</font></p>
<p>​    <font color="purple">(1) <strong>案例一：以下代码结果是多少？</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">fun();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    预解析分析：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于执行了以下操作</span></span><br><span class="line"><span class="keyword">var</span> num; <span class="comment">// 不提升值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num; <span class="comment">// 函数内部的var提升到当前作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">// 按顺序执行，num没有赋值，所以结果是undefined</span></span><br><span class="line">    num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>

<hr>
<p>​    <font color="purple">(2) <strong>案例二：以下代码结果是多少？</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>​    预解析分析：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于执行了以下操作</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">// 输出undefined</span></span><br><span class="line">    num = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">// 输出20</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<hr>
<p>​    <font color="purple">(3) <strong>案例三：以下代码结果是多少？</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line">f1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    预解析分析：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于执行了以下操作</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 函数声明也要提到前面</span></span><br><span class="line">    <span class="keyword">var</span> b;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    b = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 9</span></span><br><span class="line">    a = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">18</span>;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure>

<hr>
<p>​    <font color="purple">(4) <strong>案例四：以下代码结果是多少？</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// 相当于var a = 9; b = 9; c = 9;也就是b和c没有var声明，直接赋值，相当于全局变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    预解析分析：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于执行了以下操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a,b,c;</span><br><span class="line">    a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 9</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 9</span></span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// 9</span></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 9 ,全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 9 ,全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 报错，没有被定义 （局部变量执行完就被销毁）</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3渐变(Gradients)</title>
    <url>/2019/08/06/CSS3%E6%B8%90%E5%8F%98(Gradients)/</url>
    <content><![CDATA[<blockquote>
<p><font face="黑体"><strong>CSS3 渐变可以让你在两个或多个指定的颜色之间显示平稳的过渡，它有两种渐变分别为线性渐变和径向渐变</strong></font></p>
</blockquote>
<p><strong>CSS3 定义了两种类型的渐变：</strong></p>
<ul>
<li><font color="orange"><strong>线性渐变（<code>Linear Gradients</code>）</strong></font>：向下/向上/向左/向右/对角方向</li>
<li><font color="orange"><strong>径向渐变（<code>Radial Gradients</code>）</strong></font>： 由它们的中心定义</li>
</ul>
<p><font face="黑体"><strong>浏览器支持：</strong></font> </p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="center"><img src="https://img.php.cn/upload/study/000/000/005/5c1b2e36deb6b882.png" alt="img"></th>
<th align="center"><img src="https://img.php.cn/upload/study/000/000/005/5c1b2e6204949924.png" alt="img"></th>
<th align="center"><img src="https://img.php.cn/upload/study/000/000/005/5c1b2e717ab31518.png" alt="img"></th>
<th align="center"><img src="https://img.php.cn/upload/study/000/000/005/5c1b2e7d1c68a591.png" alt="img"></th>
<th align="center"><img src="https://img.php.cn/upload/study/000/000/005/5c1b2e87a001d318.png" alt="img"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">浏览器类别</td>
<td align="center">IE浏览器</td>
<td align="center">谷歌浏览器</td>
<td align="center">火狐浏览器</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="left">linear-gradient</td>
<td align="center">10.0</td>
<td align="center">26.0    10.0            <code>-webkit-</code></td>
<td align="center">16.0      3.6        <code>-moz-</code></td>
<td align="center">6.1   5.1                <code>-webkit-</code></td>
<td align="center">12.1   11.1    <code>-o-</code></td>
</tr>
<tr>
<td align="left">radial-gradient</td>
<td align="center">10.0</td>
<td align="center">26.0     10.0             <code>-webkit-</code></td>
<td align="center">16.0      3.6       <code>-moz-</code></td>
<td align="center">6.1    5.1             <code>-webkit-</code></td>
<td align="center">12.1   11.1   <code>-o-</code></td>
</tr>
<tr>
<td align="left">repeating-linear-gradient</td>
<td align="center">10.0</td>
<td align="center">26.0     10.0            <code>-webkit-</code></td>
<td align="center">16.0       3.6      <code>-moz-</code></td>
<td align="center">6.1    5.1             <code>-webkit-</code></td>
<td align="center">12.1   11.1   <code>-o-</code></td>
</tr>
<tr>
<td align="left">repeating-radial-gradient</td>
<td align="center">10.0</td>
<td align="center">26.0      10.0          <code>-webkit-</code></td>
<td align="center">16.0        3.6    <code>-moz-</code></td>
<td align="center">6.1    5.1               <code>-webkit-</code></td>
<td align="center">12.1   11.1 <code>-o-</code></td>
</tr>
</tbody></table>
<hr>
<h5 id="1-线性渐变-linear-gradients"><a href="#1-线性渐变-linear-gradients" class="headerlink" title="1.  线性渐变(linear gradients)"></a>1.  线性渐变(<code>linear gradients</code>)</h5><p>​    为了创建一个线性渐变，必须至少定义两种颜色结点(颜色结点即想要呈现平稳过渡的颜色)。同时，也可以设置一个起点和一个方向（或一个角度）。</p>
<ul>
<li><p><font color="gree">线性渐变-从上到下（默认情况下）：</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(#03a9f4, #f71ab95e); <span class="comment">/* 标准的语法 */</span></span><br><span class="line">    <span class="comment">/* 以下三种均是为了适应浏览器而写，因为我用的是Google浏览器，所以下面只举适应谷歌浏览器的例子 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(#03a9f4, #f71ab95e); <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(#03a9f4, #f71ab95e); <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(#03a9f4, #f71ab95e); <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="gree">线性渐变-从左到右：</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(left, #03a9f4, #f71ab95e);<span class="comment">/* 标准写法，谷歌浏览器不兼容 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, #03a9f4, #f71ab95e);<span class="comment">/* 谷歌浏览器 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="gree">线性渐变-对角：</font>可以通过指定水平和垂直的起始位置来制作一个对角渐变</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(left top, #03a9f4, #f71ab95e);<span class="comment">/* 标准写法，谷歌浏览器不兼容 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, #03a9f4, #f71ab95e);<span class="comment">/* 谷歌浏览器 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="gree">线性渐变-自定义角度：</font>如果想要在渐变的方向上做更多的控制，可以自定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right等等）</p>
<p><font color="red">注意：很多浏览器(Chrome,Safari,fiefox等)使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(150deg, #03a9f4, #f71ab95e);<span class="comment">/* 标准写法 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(150deg, #03a9f4, #f71ab95e);<span class="comment">/* 谷歌浏览器 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="gree">线性渐变-使用多个颜色结点：</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(pink,#03a9f4, #f71ab95e);<span class="comment">/* 标准语法 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(pink,#03a9f4, #f71ab95e);<span class="comment">/* 谷歌浏览器 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="gree">使用透明度（transparent）：</font>CSS3 渐变也支持透明度，可用于创建减弱变淡的效果。为了添加透明度，我们使用 <code>rgba()</code>函数来定义颜色结点。<code>rgba()</code>函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：<u>0 表示完全透明，1 表示完全不透明</u>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(right,rgba(247,26,185,0.37 ),<span class="built_in">rgba</span>(3,169,244,0.8));<span class="comment">/* 标准语法 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(right,rgba(247,26,185,0.37 ),<span class="built_in">rgba</span>(3,169,244,0.8));<span class="comment">/* 谷歌浏览器 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="gree">重复的线性渐变：</font><code>repeating-linear-gradient()</code> 函数用于重复线性渐变</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-repeating-linear-gradient</span>(#03a9f4 30%, #f71ab95e 70%);<span class="comment">/* 谷歌浏览器 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h5 id="2-径向渐变-radial-gradient"><a href="#2-径向渐变-radial-gradient" class="headerlink" title="2. 径向渐变(radial-gradient)"></a>2. 径向渐变(<code>radial-gradient</code>)</h5><p>​    径向渐变(<code>radial-gradient</code>)由它的中心定义。<u>必须至少定义两种颜色结点(颜色结点即你想要呈现平稳过渡的颜色)。同时，也可以指定渐变的中心、形状（圆形或椭圆形）、大小(<code>closest-side</code>：最近；<code>farthest-corner</code>：最远)。</u></p>
<p><font color="red"><strong>默认情况下，渐变的中心是 center，渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）</strong></font></p>
<ul>
<li><p><font color="blue">默认情况下：</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(#03a9f4 30%, #f71ab95e 70%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="blue">设置径向渐变的大小以及形状：</font>shape 参数定义了形状，它可以是值 <code>circle</code>（圆形）或 <code>ellipse</code>（椭圆形）。默认值是<code>ellipse</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle, #03a9f4, #f71ab95e);<span class="comment">/*我试了一下，在谷歌浏览器里如果设置形状就没办法显示*/</span></span><br><span class="line">    <span class="comment">/* 其他浏览器 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(circle, closest-side,#03a9f4,#f71ab95e); <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-radial-gradient</span>(circle,closest-side,#03a9f4,#f71ab95e); <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">-moz-radial-gradient</span>(circle, closest-side,#03a9f4,#f71ab95e); <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="blue">size 参数定义了渐变的大小。它可以是以下四个值：</font></p>
<p><code>closest-side</code>：径向渐变的半径长度为从圆心到离圆心<strong>最近的边</strong></p>
<p><code>farthest-side</code>：径向渐变的半径长度为从圆心到离圆心<strong>最远的边</strong></p>
<p><code>closest-corner</code>：径向渐变的半径长度为从圆心到离圆心<strong>最近的角</strong></p>
<p><code>farthest-corner</code>：径向渐变的半径长度为从圆心到离圆心<strong>最远的角</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(60% 55%, closest-side,#03a9f4,#f71ab95e); <span class="comment">/* 标准的语法 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(40% 55%, closest-side,#03a9f4,#f71ab95e); <span class="comment">/* 谷歌浏览器 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="blue">重复的径向渐变：</font><code>repeating-radial-gradient()</code>函数用于重复径向渐变</p>
<p><font color="green">效果像一朵花一样很好看~</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-radial-gradient</span>(#03a9f4 40%,#f71ab95e 60%); <span class="comment">/* 标准的语法 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-repeating-radial-gradient</span>(#03a9f4 40%,#f71ab95e 60%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>html和css知识点</title>
    <url>/2019/08/01/html%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="HTML部分知识点总结"><a href="#HTML部分知识点总结" class="headerlink" title="HTML部分知识点总结"></a><strong>HTML部分知识点总结</strong></h1><ul>
<li><h4 id="块元素（将内容分块显示）：特立独行，不在一行中显示-eg：h1-h2-…-h6-p-blockquote-块元素在内容前后分别有一个默认的换行"><a href="#块元素（将内容分块显示）：特立独行，不在一行中显示-eg：h1-h2-…-h6-p-blockquote-块元素在内容前后分别有一个默认的换行" class="headerlink" title="块元素（将内容分块显示）：特立独行，不在一行中显示    eg：h1,h2,…,h6,p,blockquote . 块元素在内容前后分别有一个默认的换行"></a>块元素（将内容分块显示）：特立独行，不在一行中显示    eg：h1,h2,…,h6,p,blockquote . 块元素在内容前后分别有一个默认的换行</h4><h4 id="内联元素（显示在所在的段落中）：随波逐流-eg：q-a-em"><a href="#内联元素（显示在所在的段落中）：随波逐流-eg：q-a-em" class="headerlink" title="内联元素（显示在所在的段落中）：随波逐流   eg：q,a,em"></a>内联元素（显示在所在的段落中）：随波逐流   eg：q,a,em</h4></li>
</ul>
<ul>
<li><h4 id="link：利用外部样式表为本页面增加样式（不再需要style）-eg：新建一个lounge-css文件"><a href="#link：利用外部样式表为本页面增加样式（不再需要style）-eg：新建一个lounge-css文件" class="headerlink" title="link：利用外部样式表为本页面增加样式（不再需要style）  eg：新建一个lounge.css文件"></a>link：利用外部样式表为本页面增加样式（不再需要style）  eg：新建一个lounge.css文件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"test/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"lounge.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><h4 id="em-：斜体；strong：加粗；b：加粗（强调文本）"><a href="#em-：斜体；strong：加粗；b：加粗（强调文本）" class="headerlink" title="em ：斜体；strong：加粗；b：加粗（强调文本）"></a>em ：斜体；strong：加粗；b：加粗（强调文本）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>我是一个斜体标签<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="q：短引用（段落中的引用）；blockquote：长引用（引用独立的文字）"><a href="#q：短引用（段落中的引用）；blockquote：长引用（引用独立的文字）" class="headerlink" title="q：短引用（段落中的引用）；blockquote：长引用（引用独立的文字）"></a>q：短引用（段落中的引用）；blockquote：长引用（引用独立的文字）</h4></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>千里之行，始于足下<span class="tag">&lt;<span class="name">\q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>我是一个长引用<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="br：换行"><a href="#br：换行" class="headerlink" title="br：换行"></a>br：换行</h4></li>
<li><h4 id="code：显示计算机程序代码"><a href="#code：显示计算机程序代码" class="headerlink" title="code：显示计算机程序代码"></a>code：显示计算机程序代码</h4></li>
<li><h4 id="li：列表元素；ol：有序列表；ul：无序列表（不与p标签写在一起，都是块元素）"><a href="#li：列表元素；ol：有序列表；ul：无序列表（不与p标签写在一起，都是块元素）" class="headerlink" title="li：列表元素；ol：有序列表；ul：无序列表（不与p标签写在一起，都是块元素）"></a>li：列表元素；ol：有序列表；ul：无序列表（不与p标签写在一起，都是块元素）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Walla, WA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Magic city, ID<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bountiful, UT<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Last chance, CO<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="StarBuzzCoffee-com是域名（范围大）；www-StarBuzzCoffee-com是网站名（范围小）"><a href="#StarBuzzCoffee-com是域名（范围大）；www-StarBuzzCoffee-com是网站名（范围小）" class="headerlink" title="StarBuzzCoffee.com是域名（范围大）；www.StarBuzzCoffee.com是网站名（范围小）"></a>StarBuzzCoffee.com是域名（范围大）；<a href="http://www.StarBuzzCoffee.com是网站名（范围小）" target="_blank" rel="noopener">www.StarBuzzCoffee.com是网站名（范围小）</a></h4></li>
<li><h4 id="链接页面的方式：a-相对路径：只能链接同一网站的页面-b-URL：通常用来链接其他网站"><a href="#链接页面的方式：a-相对路径：只能链接同一网站的页面-b-URL：通常用来链接其他网站" class="headerlink" title="链接页面的方式：a.相对路径：只能链接同一网站的页面    b.URL：通常用来链接其他网站"></a>链接页面的方式：a.相对路径：只能链接同一网站的页面    b.URL：通常用来链接其他网站</h4></li>
<li><h4 id="为链接增加标题以便访问：a-herf-””-title-””-当鼠标移到链接上，停留一秒，就可以看到这个工具提示"><a href="#为链接增加标题以便访问：a-herf-””-title-””-当鼠标移到链接上，停留一秒，就可以看到这个工具提示" class="headerlink" title="为链接增加标题以便访问：a herf=”” title=””     当鼠标移到链接上，停留一秒，就可以看到这个工具提示"></a>为链接增加标题以便访问：a herf=”” <u><em>title=””</em></u>     当鼠标移到链接上，停留一秒，就可以看到这个工具提示</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Read the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://wickedlysmart.com/buzz"</span> <span class="attr">title</span>=<span class="string">"Read all about caffeine on the Buzz"</span>&gt;</span>Caffeine Buzz<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="使用id属性为超链接a创建目标"><a href="#使用id属性为超链接a创建目标" class="headerlink" title="使用id属性为超链接a创建目标"></a>使用id属性为超链接a创建目标</h4></li>
<li><h4 id="用id链接到元素：要链接到页面中的一个特定目标，只需在链接最后加一个-，再加上目标标志符"><a href="#用id链接到元素：要链接到页面中的一个特定目标，只需在链接最后加一个-，再加上目标标志符" class="headerlink" title="用id链接到元素：要链接到页面中的一个特定目标，只需在链接最后加一个#，再加上目标标志符"></a>用id链接到元素：要链接到页面中的一个特定目标，只需在链接最后加一个#，再加上目标标志符</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html#chai"</span>&gt;</span>See Chai Tea<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="使用target打开新窗口"><a href="#使用target打开新窗口" class="headerlink" title="使用target打开新窗口"></a>使用target打开新窗口</h4></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://wickedlysmart.com/buzz"</span> <span class="attr">title</span>=<span class="string">"Read all about caffeine on the Buzz"</span>&gt;</span>Caffeine Buzz<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="调整图像大小：width和height"><a href="#调整图像大小：width和height" class="headerlink" title="调整图像大小：width和height"></a>调整图像大小：width和height</h4><p>src：引入和替代</p>
<p>href：引用和链接</p>
<p>alt：当图片无法识别时的提示</p>
<p>title：鼠标点击图片时的提示</p>
<p>target=”_black”：在新窗口打开新页面</p>
<p>target=”_self”：在原来的窗口打开页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/red.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="W3C验证工具：http-validator-w3-org"><a href="#W3C验证工具：http-validator-w3-org" class="headerlink" title="W3C验证工具：http://validator.w3.org"></a>W3C验证工具：<a href="http://validator.w3.org" target="_blank" rel="noopener">http://validator.w3.org</a></h4></li>
<li><p>绝对路径：相对于计算机的路径</p>
</li>
<li><p>相对路径：一般使用</p>
</li>
<li><p>背景定位常用指令：水平方向Left center right；垂直方向top center bottom</p>
</li>
</ul>
<h1 id="css知识点汇总"><a href="#css知识点汇总" class="headerlink" title="css知识点汇总"></a><strong>css知识点汇总</strong></h1><h3 id="注：在CSS中，不需要给元素两边加尖括号-lt-gt-，所有元素都叫做选择器"><a href="#注：在CSS中，不需要给元素两边加尖括号-lt-gt-，所有元素都叫做选择器" class="headerlink" title="注：在CSS中，不需要给元素两边加尖括号&lt;&gt;，所有元素都叫做选择器"></a><em>注：在CSS中，不需要给元素两边加尖括号&lt;&gt;，所有元素都叫做选择器</em></h3><ul>
<li><h4 id="把css放入html："><a href="#把css放入html：" class="headerlink" title="把css放入html："></a>把css放入html：</h4><p>在head元素中增加开始和结束style标记，css规则要放在style里</p>
</li>
<li><h4 id="margin-left-margin-right：左右外边距，占页面的20"><a href="#margin-left-margin-right：左右外边距，占页面的20" class="headerlink" title="margin-left, margin-right：左右外边距，占页面的20%"></a>margin-left, margin-right：左右外边距，占页面的20%</h4></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin-left</span>: 20%;</span><br><span class="line"><span class="selector-tag">margin-right</span>: 20%;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="border：定义页面主体周围的边框-虚线：dotted，实线：solid，颜色为黑色"><a href="#border：定义页面主体周围的边框-虚线：dotted，实线：solid，颜色为黑色" class="headerlink" title="border：定义页面主体周围的边框   虚线：dotted，实线：solid，颜色为黑色"></a>border：定义页面主体周围的边框   虚线：dotted，实线：solid，颜色为黑色</h4></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dotted</span> <span class="selector-tag">black</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="padding：在页面主体周围创建一些内边距"><a href="#padding：在页面主体周围创建一些内边距" class="headerlink" title="padding：在页面主体周围创建一些内边距"></a>padding：在页面主体周围创建一些内边距</h4></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="font-family：定义文本使用的字体"><a href="#font-family：定义文本使用的字体" class="headerlink" title="font-family：定义文本使用的字体"></a>font-family：定义文本使用的字体</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="color：设置文字颜色"><a href="#color：设置文字颜色" class="headerlink" title="color：设置文字颜色"></a>color：设置文字颜色</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="border-bottom：加下划线-eg：在h1标题下加下划线"><a href="#border-bottom：加下划线-eg：在h1标题下加下划线" class="headerlink" title="border-bottom：加下划线    eg：在h1标题下加下划线"></a>border-bottom：加下划线    eg：在h1标题下加下划线</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="盒子模型-内容-内填充-外边距-边框"><a href="#盒子模型-内容-内填充-外边距-边框" class="headerlink" title="盒子模型=内容+内填充+外边距+边框"></a>盒子模型=内容+内填充+外边距+边框</h4></li>
</ul>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>The Operation Of Hexo</title>
    <url>/2019/08/01/hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h4 id="The-Step-Of-Upload"><a href="#The-Step-Of-Upload" class="headerlink" title="The  Step Of Upload"></a>The  Step Of Upload</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>js字符串和数组方法</title>
    <url>/2019/07/27/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4></li>
</ul>
<ol>
<li><p>前面我们学习了字符串，<font color="orange"><strong>用字面量方式声明一个字符串</strong>：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'  nihao'</span>;</span><br><span class="line">str.length;  <span class="comment">//获取字符串的长度</span></span><br><span class="line">str.charAt(<span class="number">2</span>); 获取传入下标序号处的字符(ES5中可以用str[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：如果不传默认值为”0”，当传入的下标超出字符串长度时返回”null”</font></p>
</li>
<li><p>字符串其他方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.charCodeAt(<span class="number">2</span>);  <span class="comment">//获取传入下标序号处的字符的Unicode编码值，如果不传值默认值为"0"</span></span><br><span class="line"><span class="built_in">String</span>.fromCharCode(); <span class="comment">//传入Unicode编码值返回对应的字符，可以传多个编码，用','分割</span></span><br><span class="line"></span><br><span class="line">str.indexOf(); <span class="comment">//获取()中字符在字符串中从左向右第一次出现的下标</span></span><br><span class="line">str.lastIndexOf(); <span class="comment">//获取()中字符在字符串中从右向左第一次出现的下标</span></span><br><span class="line"><span class="comment">//上面两个方法可以传多个连续的字符，未找到返回-1，第二个可选参数为开始位置的下标(负数和不写默认是从0/最后开始)</span></span><br><span class="line"></span><br><span class="line">str.substring();  <span class="comment">//截取两个参数之间的字符串，传入的两个参数会自动检测大小，按照从小到大的顺序截取，不写和负数默认从0开始，注：包括首位，不包括尾位</span></span><br><span class="line">str.slice();  <span class="comment">//同上，但不会自动检测参数大小，参数为负数时从后向前计算(最后一个字符为-1，依次向前-2，-3...)</span></span><br><span class="line"><span class="comment">//被截取的字符串包含第一个参数位置的字符，不包括第二个参数位置的字符，如果只有一个参数则是从第一个参数截取到字符串结尾</span></span><br><span class="line"></span><br><span class="line">str.toUpperCase();  <span class="comment">//把字符串的字母字符转换成大写</span></span><br><span class="line">str.toLowerCase();  <span class="comment">//把字符串的字母字符转换成小写</span></span><br><span class="line"></span><br><span class="line">str.split(<span class="string">'.'</span>); <span class="comment">//用参数的字符将字符串分割成数组，第二个可选参数限制生成数组的长度(超出的部分会被舍去)</span></span><br><span class="line"><span class="comment">//不传参会返回只有一个数据(该字符串)的数组；分割每个字符需要传一个空字符串''；分隔符在左右也会在数组(开头/结尾)生成空字符</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<ul>
<li><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4></li>
</ul>
<ol>
<li><p><font color="orange"><strong>数组的声明方式</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];  <span class="comment">//字面量写法，推荐这种写法</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//构造函数实例化写法</span></span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>); <span class="comment">// 数组长度为2，数组内容为空</span></span><br></pre></td></tr></table></figure>

<p>构造函数实例写法在参数只有一个且是数字它会理解为长度，是字符串它会理解为内容，所以用推荐第一种写法</p>
</li>
<li><p>如果定义后的数组重新定义长度，那么数组会变成新的长度，多余的数据舍去，增多的数据为空(字符串length重新设置不会改变长度)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.length = <span class="number">2</span>;  <span class="comment">//[1,2]</span></span><br><span class="line">arr.length = <span class="number">0</span>;  <span class="comment">//快速清空一个数组</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">4</span>;   <span class="comment">//[1,2, ,4];</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组其他方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.join(<span class="string">''</span>); <span class="comment">// 用参数的字符把数组里的内容连成字符串，split的反义词</span></span><br><span class="line">arr.push(); <span class="comment">// 向数组后添加数据</span></span><br><span class="line">arr.unshift(); <span class="comment">// 向数组前添加数据</span></span><br><span class="line"><span class="comment">// 添加方法返回值为新数组的长度</span></span><br><span class="line"></span><br><span class="line">arr.pop();  <span class="comment">// 从数组后删除数据</span></span><br><span class="line">arr.shift(); <span class="comment">// 从数组前删除数据</span></span><br><span class="line"><span class="comment">// 删除方法返回值为被删除的数据</span></span><br><span class="line"></span><br><span class="line">arr.splice(); <span class="comment">// 数组的删除、替换和添加方法，根据参数作用不同</span></span><br><span class="line">arr.splice(a,b); <span class="comment">// 删除：a为删除的起点位置，b为删除数据的数量，只有删除的时候会有返回值(既被删除的数据，但是装在数组里)</span></span><br><span class="line">arr.splice(a,b,c,...n); <span class="comment">// 替换：a为替换的起点位置，b为删除数据的数量，c及c后面的所有参数为替换后的新数据</span></span><br><span class="line">arr.splice(a,<span class="number">0</span>,c,...n); <span class="comment">// 添加：a为添加的起点位置，0为不删除数据，c及c后面的所有参数为添加的新数据</span></span><br><span class="line"></span><br><span class="line">arr.sort();  <span class="comment">// 排序：按照数据字符串的Unicode 编码大小把内容按照顺序进行排列，不能直接排数字。</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;  <span class="comment">// 用高阶函数排序数字</span></span><br><span class="line">    <span class="keyword">return</span> a-b/b-a;      <span class="comment">// 正序/反序</span></span><br><span class="line">&#125;)</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;  <span class="comment">// 乱序排列数字</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random()<span class="number">-0.5</span>; <span class="comment">// 随机得到正负值 </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">arr.reverse();  <span class="comment">// 倒序，将数组反向排列</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.concat(arr1,arr2...);  <span class="comment">// 数组拼接：将arr1、arr2...拼接在arr后面，结果为新数组</span></span><br><span class="line">arr.indexOf(); <span class="comment">// 同字符串的indexOf，找出参数在数组中从左向右第一次的出现的下标</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 判断输入框内容是否都为数字(用Unicode)</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">2. 加密和解密：让一段字符串在两个p标签里显示加密后的乱码和还原回来的字符串</font></p>
<p>​    HTML:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    JS：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">        aBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line">        aP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br><span class="line">        </span><br><span class="line">        aBtn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str = oInput.value;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">                aP[<span class="number">0</span>].innerHTML += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        aBtn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str = aP[<span class="number">0</span>].innerHTML;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">                aP[<span class="number">1</span>].innerHTML += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">3. 找到字符串’同学们在新学期里有新学期的样子，并开始了新学期的学习’中每个’学期’的位置和出现的次数。</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"同学们在新学期里有新学期的样子，并开始了新学期的学习"</span>;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">"新学期"</span>;</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(str.indexOf(s,i) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            arr.push(str.indexOf(s,i));</span><br><span class="line">            i = str.indexOf(s,i) + s.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">4. 使一段文字在点击按钮时变成20个字符+’……’，再次点击按钮后展开还原，按钮也要在”展开”和”收缩”来回切换</font></p>
<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第十三届大会上电话是多少第十三届大会上电话是多少</span><br><span class="line">        第十三届大会上电话是多少第十三届大会上电话是多少</span><br><span class="line">        第十三届大会上电话是多少第十三届大会上电话是多少</span><br><span class="line">        第十三届大会上电话是多少第十三届大会上电话是多少第十三届大会上电话是多少</span><br><span class="line">        第十三届大会上电话是多少第十三届大会上电话是多少第十三届大会上电话是多少第十三届大会上电话是多少</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>收起<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line">        oP.inner = oP.innerHTML;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a) &#123;</span><br><span class="line">                oP.innerHTML = oP.innerHTML.substring(<span class="number">0</span>, <span class="number">20</span>) + <span class="string">"..."</span>;</span><br><span class="line">                oBtn.innerHTML = <span class="string">"展开"</span>;</span><br><span class="line">                a = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                oP.innerHTML = oP.inner;</span><br><span class="line">                oBtn.innerHTML = <span class="string">"收起"</span>;</span><br><span class="line">                a = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">5. 设置几个颜色（红、黄、蓝、绿、黑），在输入框中输入文字，点击按钮后在p标签中生成背景颜色不同的文字</font></p>
<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>生成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="string">"red"</span>,<span class="string">"orange"</span>,<span class="string">"yellow"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"pink"</span>];</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            oP.innerHTML = <span class="string">"&lt;span&gt;"</span> + oInput.value.split(<span class="string">""</span>).join(<span class="string">"&lt;/span&gt;&lt;span&gt;"</span>) + <span class="string">"&lt;/span&gt;"</span>;</span><br><span class="line">            <span class="keyword">var</span> aSp = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aSp.length; i++) &#123;</span><br><span class="line">                    aSp[i].style.color = arr[i % arr.length];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">6. 做一个点击查找一段字符（将所需查找的字段显示为高亮）和替换一段字符（将被替换的字段显示为高亮）的效果</font></p>
<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line">        反倒是基本上的痕迹打飞机客户端附近的客户发的</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>查找<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>替换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span><br><span class="line">    <span class="keyword">var</span> aBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>)[<span class="number">0</span>];</span><br><span class="line">    oP.inner = oP.innerHTML;</span><br><span class="line">    aBtn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = aInput[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (oP.inner.indexOf(str) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            oP.innerHTML = oP.inner.split(str).join(<span class="string">"&lt;span&gt;"</span> + str + <span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">            <span class="keyword">var</span> aSpan = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aSpan.length; i++) &#123;</span><br><span class="line">                aSpan[i].style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"没有查找到该字符！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    aBtn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = aInput[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (oP.inner.indexOf(str) &gt;= <span class="number">0</span> &amp;&amp; str) &#123;</span><br><span class="line">            oP.innerHTML = oP.inner.split(str).join(<span class="string">"&lt;span&gt;"</span> + aInput[<span class="number">1</span>].value + <span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">            <span class="keyword">var</span> aSpan = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aSpan.length; i++) &#123;</span><br><span class="line">                aSpan[i].style.backgroundColor = <span class="string">"blue"</span>;</span><br><span class="line">                aSpan[i].style.color = <span class="string">"white"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">7. 每点击一次就将<code>[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;]</code>的最后一位放到第一位，如：<code>[&#39;5&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;]</code></font></p>
<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>];</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"原数组为："</span> + arr);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 删除最后一个值的同时把最后一个值加到首位</span></span><br><span class="line">            arr.unshift(arr.pop());</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"点击后："</span> + arr);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">8. 数组去重（去掉数组的重复数据）如：将<code>var arr =[1,2,2,2,2,3,3,4,4,4,2,3]</code> 变成[1,2,3,4]</font></p>
<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>排序并去掉重复项<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"原数组为："</span> + arr);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 将原数组进行排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"按从小到大排序："</span> + arr);</span><br><span class="line">            <span class="comment">// 去掉重复项</span></span><br><span class="line">            <span class="keyword">var</span> arr1 = []; <span class="comment">// 新数组用来存储去掉重复项后的字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; arr.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[k] != arr[k+<span class="number">1</span>]) &#123;</span><br><span class="line">                    arr1.push(arr[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"去掉重复项后："</span> + arr1);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">9. 把数组<code>[&#39;345px&#39;,&#39;23px&#39;,&#39;10px&#39;,&#39;1000px&#39;]</code>按照数据数字的从大到小的顺序排列</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">10. 把一个字符串<code>var str = &quot;abcdef&quot;</code>变成倒序</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"abcdef"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"原字符串："</span> + str);</span><br><span class="line">        <span class="keyword">var</span> str1 = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"翻转后："</span> + str1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">11. 随机生成7个1~50之间不重复的整数，并存在一个数组中</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">// 检查是否重复</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="number">50</span> - <span class="number">1</span>)) + <span class="number">1</span>; <span class="comment">// 生成随机数</span></span><br><span class="line">        <span class="comment">// 循环判断随机数是否重复</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == arr[i]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 随机数不重复，加到数组中</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">            arr.push(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"生成的随机数数组为："</span> + arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js计时器和动画</title>
    <url>/2019/07/27/js%E8%AE%A1%E6%97%B6%E5%99%A8%E5%92%8C%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<ul>
<li><h4 id="获取元素样式"><a href="#获取元素样式" class="headerlink" title="获取元素样式"></a>获取元素样式</h4></li>
</ul>
<ol>
<li><p><code>元素.style.width</code>获取的样式是元素的行间样式(不管该样式是否有效)，若样式时通过选择器写成内部或外链样式时就无法获取了</p>
</li>
<li><p><font color="green"><strong>计算元素有效的样式</strong></font>的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getComputedStyle(元素).width; <span class="comment">//标准浏览器</span></span><br><span class="line">元素.currentStyle.width; <span class="comment">//IE8及以下浏览器</span></span><br></pre></td></tr></table></figure>

<p>处理浏览器兼容后封装代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.currentStyle ? obj.currentStyle[attr] : getComputedStyle(obj)[attr]; </span><br><span class="line">&#125;</span><br><span class="line">getStyle(元素,<span class="string">'样式名'</span>);  <span class="comment">//调用，获得我们需要元素的样式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="red">注意的问题：</font></p>
<ul>
<li>获取的样式是带有单位的<code>(100px)</code>，需配合<code>parseInt</code>或者<code>parseFloat</code>方法获得数字结果</li>
<li>不能获取像<code>background</code>这种复合样式，只能用<code>backgroundColor</code>等非复合样式分别获取</li>
<li>由于是计算的结果，获取的颜色格式不同(如<code>red</code>和<code>rgb(255,0,0)</code>都是红色)，因此结果不能用做判断，可以用做赋值</li>
<li>传参的字符串里面不能出现空格，否则变成未定义</li>
<li>未设置的样式不要获取，有的浏览器会将未设置的样式值设置为<code>auto</code>，导致结果出现错误</li>
</ul>
</li>
</ol>
<p><strong>例~按钮控制div元素移动</strong></p>
<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.currentStyle ? obj.currentStyle[attr] : getComputedStyle(obj)[attr]; </span><br><span class="line">&#125;</span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    oDiv.style.left = <span class="built_in">parseFloat</span>(getStyle(oDiv,<span class="string">"left"</span>))+<span class="number">10</span>+<span class="string">"px"</span>;</span><br><span class="line">    oDiv.style.top = <span class="built_in">parseFloat</span>(getStyle(oDiv,<span class="string">"top"</span>))+<span class="number">10</span>+<span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>移动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h4 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h4></li>
</ul>
<ol>
<li><p><font color="orange"><strong>循环计时器：每隔传入的毫秒时间执行一次传入的函数</strong></font></p>
<ul>
<li><p>对比循环：不同点——循环计时器带有时间概念，而循环的所有重复执行的代码是瞬间完成的，没有时间概念；相同点——它们都在重复执行代码</p>
</li>
<li><p><font color="green"><strong>语法：<code>setInterval(函数,毫秒);</code></strong></font>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; <span class="comment">//这里可以是函数名(有名函数)，也可以是匿名函数</span></span><br><span class="line">    <span class="built_in">document</span>.title = i; </span><br><span class="line">    i++;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>注意：计时器是我们学习的第三种函数调用的方法；计时器时间一般写20ms或以上，太短浏览器可能反应不过来，导致速度比预想的要慢</p>
</li>
<li><p><font color="green"><strong>停止循环计时器的方法：<code>clearInterval()</code></strong></font>，用法是先创建一个接受计时器返回值的变量<code>timer</code>，在需要停止计时器的地方使用<code>clearInterval()</code>并传入变量<code>timer</code>就可以了，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;  <span class="comment">//计时器的返回值就是一个序号</span></span><br><span class="line">    <span class="built_in">document</span>.title = i;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span>(i===<span class="number">10</span>)&#123;</span><br><span class="line">        clearInterval(timer);  <span class="comment">//停止对应序号的计时器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：多次开启计时器时，若每次开启前没有关闭之前的计时器会导致我们timer里保存的是最后一个计时器的返回值，从而只能关闭最后一个计时器，解决方法就是每次调用时先关闭之前的计时器(尤其计时器是由用户控制的时候)</font></p>
</li>
</ul>
</li>
<li><p><font color="orange"><strong>延时计时器：延时传入的毫秒时间执行一次传入的函数</strong></font></p>
<ul>
<li><font color="green"><strong>语法：<code>setTimeout(函数,毫秒);</code></strong></font></li>
<li>循环计时器和延时计时器都要等一段时间后才执行第一次代码，若需要立即调用一次则需要在页面刷新后直接调用一次函数</li>
<li><font color="green"><strong>对应的延时计时器的清除方法：<code>clearTimeout(timer);</code></strong></font></li>
<li>用<code>clearTimeout()</code>停止延时计时器后，若延时计时器的函数还未调用，那么函数便不会被执行了</li>
<li>延时计时器配合递归可以做出和循环计时器一样的效果，并且比循环计时器拥有更好的性能</li>
</ul>
</li>
</ol>
<p>面试题~</p>
<hr>
<ul>
<li><h4 id="管理和封装计时器"><a href="#管理和封装计时器" class="headerlink" title="管理和封装计时器"></a>管理和封装计时器</h4></li>
</ul>
<ol>
<li>封装一个<code>doMove</code>函数，用来做动画效果</li>
<li>用计时器移动元素时需要注意：<ul>
<li>判断终点位置时不能用==，若总长不能整除步长会停不下来；如果用&gt;=虽然会停下来，但不能直接赋值，该限制应该在赋值之前，否则在视觉上有个超过终点后的后退效果</li>
<li>每次开启计时器时应该注意先清除之前的计时器</li>
<li><code>timer</code>定义成自定义属性<code>(oDiv.timer)</code>，并在定义时清除一下这个自定义属性，<code>clearInterval</code>可以清除<code>null</code>和未定义，这样做的好处是不靠任何外面的变量，为的是后面的封装</li>
<li>封装的过程我们要分清代码中哪些数据是变化的，并把他们变成参数</li>
<li>事件和计时器调用函数时函数名是不能加()的(因为函数名+()就变成返回值了)，如果需要传参必须将该事件调用改成调用匿名函数，然后在匿名函数里面直接调用该函数的办法</li>
<li>传入的正值和负值对用户来说并不友好，用户还要根据方向来判断需要传入值得正负，我们可以把代码改成判断当前位置和目标点位置来确定</li>
<li>我们在封装时的大量判断代码在方便用户的同时提高用户体验，而且也方便自己后来使用</li>
</ul>
</li>
<li>回调函数：就是一个函数执行完毕后再执行的另外一个函数。在封装的函数内部回调函数不一定有，因此我们一般做一个判断，如果有回调则执行，没有回调则什么都不会发生</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 一个img标签，每隔1.5秒自动切换一张图片，并且鼠标移入时让自动切换停止，鼠标离开继续切换（准备四张图片）</font></p>
<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oImg = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">var</span> arr = [<span class="string">"img/1.png"</span>,<span class="string">"img/2.png"</span>,<span class="string">"img/3.png"</span>,<span class="string">"img/4.png"</span>];</span><br><span class="line">   <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       oImg.src = arr[i++];</span><br><span class="line">       i == arr.length &amp;&amp; (i=<span class="number">0</span>);</span><br><span class="line">   &#125;,<span class="number">1000</span>)</span><br><span class="line">   oImg.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">       clearInterval(timer);</span><br><span class="line">   &#125;</span><br><span class="line">   oImg.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">       timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       oImg.src = arr[i++];</span><br><span class="line">       i == arr.length &amp;&amp; (i=<span class="number">0</span>);</span><br><span class="line">   &#125;,<span class="number">1000</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"390"</span> <span class="attr">height</span>=<span class="string">"480"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font size="4">2. 页面刷新1.5秒后弹出一个广告，并在右上角加个关闭按钮。要求弹窗展示2秒后自动消失，若在那之前点击了关闭按钮则立即关闭弹窗并停止延时计时器</font></p>
<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    oDiv.style.display = <span class="string">"block"</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setTimeout(hiddenDiv,<span class="number">2000</span>);</span><br><span class="line">    oSpan.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        hiddenDiv();</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">1500</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hiddenDiv</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    oDiv.style.display = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gray;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">3. QQ显示详细内容效果(显示内容后延迟消失效果)，从展示内容上离开后0.6秒消失</font></p>
<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">aDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">var</span> timer = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    aDiv[<span class="number">0</span>].style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    aDiv[<span class="number">0</span>].style.display = <span class="string">"none"</span>;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">&#125;</span><br><span class="line">aDiv[<span class="number">1</span>].onmouseover = aDiv[<span class="number">0</span>].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    fn1();</span><br><span class="line">&#125;</span><br><span class="line">aDiv[<span class="number">1</span>].onmouseout = aDiv[<span class="number">0</span>].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    timer = setTimeout(fn2,<span class="number">600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">550px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: yellow;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">220px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font size="4">4. 在页面上布局平铺20个50X50红色的方块，点击我们的浏览器的窗口时让每个方块每隔200毫秒以每30毫秒7像素的速度掉下来一个，直到所有的方块掉到500的位置</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js时间对象和倒计时</title>
    <url>/2019/07/27/js%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    <content><![CDATA[<ul>
<li><h4 id="时间对象"><a href="#时间对象" class="headerlink" title="时间对象"></a>时间对象</h4></li>
</ul>
<ol>
<li><p><strong>获取当前时间</strong>(既计算机读到这句函数时)系统的时间对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myTime  = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//object</span></span><br><span class="line"><span class="built_in">Date</span>() <span class="comment">//直接调用也会返回一个当前时间的字符串(无论传什么参数)</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：时间对象是对象类型，而获取的时间是数字类型：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iYear = myTime.getFullYear(); <span class="comment">//获取年</span></span><br><span class="line"><span class="keyword">var</span> iMonth = myTime.getMonth()+<span class="number">1</span>; <span class="comment">//获取月，月份是0-11的数字，需要在结果上+1</span></span><br><span class="line"><span class="keyword">var</span> iDate = myTime.getDate(); <span class="comment">//获取日</span></span><br><span class="line"><span class="keyword">var</span> iWeek = myTime.getDay(); <span class="comment">//获取星期，星期是0-6的数字，需要转换一下显示方式才能用</span></span><br><span class="line"><span class="keyword">var</span> weeks = [<span class="string">"星期日"</span>,<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>];</span><br><span class="line"><span class="keyword">var</span> sWeek = weeks[iWeek];</span><br><span class="line"><span class="keyword">var</span> iHours = myTime.getHours(); <span class="comment">//获取时</span></span><br><span class="line"><span class="keyword">var</span> iMin = myTime.getMinutes(); <span class="comment">//获取分</span></span><br><span class="line"><span class="keyword">var</span> iSec = myTime.getSeconds(); <span class="comment">//获取秒</span></span><br><span class="line"><span class="keyword">var</span> iMsec = myTime.getMilliseconds(); <span class="comment">//获取毫秒</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>时间对象上还能获取的特殊值string类型，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sDate = myTime.toLocaleDateString(); <span class="comment">//获取年月日(字符串)</span></span><br><span class="line"><span class="keyword">var</span> sTime = myTime.toLocaleTimeString(); <span class="comment">//获取时分秒(字符串)</span></span><br><span class="line"><span class="keyword">var</span> sAllTime = myTime.toLocaleString();  <span class="comment">//获取年月日时分秒(字符串)</span></span><br></pre></td></tr></table></figure>

<p>但往往上面得到的未必是我们需要的格式，因此<strong>一般都是将前面获取的所有数字进行拼接成时间字符串</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tFormat(iYear) +<span class="string">'/'</span>+tFormat(iMonth)+<span class="string">'/'</span>+tFormat(iDate)+<span class="string">' '</span>+sWeek+<span class="string">' '</span>+tFormat(iHours)+<span class="string">':'</span>+tFormat(iMin)+<span class="string">':'</span>+tFormat(iSec);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tFormat</span>(<span class="params">n</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">10</span> ? <span class="string">"0"</span>+n : <span class="string">""</span>+n; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：通常时间格式使用的数字应该是两位数，因此需要把所有的个位数前面补’0’，我们可以自己封装一个小于10前面加0的函数tFormat</font></p>
</li>
<li><p><strong>时间戳</strong>：是1970日1月1日0时0分0秒到现在的时间的毫秒数，下面三个方法等价：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); </span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().valueOf();</span><br><span class="line"><span class="built_in">Date</span>.now();  <span class="comment">//ES5的方法</span></span><br></pre></td></tr></table></figure>

<p>用途：可以用来判断一段程序运行的时间差，或者每次需要得到一个不同的数字时使用</p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h4></li>
</ul>
<ol>
<li><p>用在团购，抢购等网站，<strong>原理是现在的时间点(一直在变)与终点(不会变)两个时间的差就是倒计时(毫秒)</strong></p>
</li>
<li><p>如果在实例化时间对象时给其传参就可以设置一个时间对象，有</p>
</li>
<li><p>如下几种格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iNew = <span class="keyword">new</span> <span class="built_in">Date</span>(毫秒数); <span class="comment">//将毫秒数的对应时间返回，可以是一个负数，表示1970年1月1日之前的时间。</span></span><br><span class="line"><span class="keyword">var</span> iNew = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08-01'</span>);<span class="comment">//假设用户处于格林尼治国际标准时的时区。ES6规定凡是没有指定时区时认为用户处于本地时区。</span></span><br><span class="line"><span class="keyword">var</span> iNew = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">48</span>,<span class="number">12</span>); <span class="comment">//数字形式，这里的月也是当前月份-1</span></span><br><span class="line"><span class="keyword">var</span> iNew = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'September 1,2016 9:48:12'</span>); <span class="comment">//字符串形式</span></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">'January 26, 2011 13:51:50'</span>); <span class="comment">//如果要把一个时间字符串转换成毫秒数需要用Date.parse方法  </span></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">'2011-10-10'</span>);  <span class="comment">//如果Date.parse解析失败则返回NaN</span></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">'2011-10-10T14:48:00'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>另外一种方式是<strong>直接在当前时间对象上设置新时间(该类方法返回的是设置后时间的时间戳)</strong>，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iNow = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">iNow.setDate(<span class="number">15</span>); <span class="comment">//将时间设置为本月15日</span></span><br><span class="line">iNow.setDate(iNow.getDate()+<span class="number">5</span>); <span class="comment">//设置日期为当前日期后5天</span></span><br><span class="line">iNow.setFullYear()　　　　<span class="comment">//设置当前年份(四位数字，月日是可选参数)</span></span><br><span class="line">iNow.setHours()　　　　　 <span class="comment">//设置当前小时数(24小时制,0-23)</span></span><br><span class="line">iNow.setMilliseconds()　　<span class="comment">//设置当前毫秒数</span></span><br><span class="line">iNow.setMinutes()　　　　 <span class="comment">//设置当前分钟数</span></span><br><span class="line">iNow.setMonth()　　　　　 <span class="comment">//设置当前月份(注意从0开始:0-Jan,1-Feb...)</span></span><br><span class="line">iNow.setSeconds()　　　　 <span class="comment">//设置当前秒数</span></span><br></pre></td></tr></table></figure>

<p>这些参数如果超出了正常范围，会被自动折算。比如，如果月设为15，就表示下一年的4月；设置为-2，就表示上一年的11月。</p>
</li>
<li><p>计算时间差，无论用哪种方法设置了未来时间，用未来时间-当前时间就是两者时间差(毫秒)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">--	    alert( myDate &gt; today ? <span class="string">"今天在2018年9月1日之前"</span> : <span class="string">"今天在2018年9月1日之后"</span> ); <span class="comment">//两个时间对象比较大小</span></span><br><span class="line">    <span class="keyword">var</span> t = (iNew - iNow)/<span class="number">1000</span>; <span class="comment">//计算差值，用math.floor向下取整</span></span><br><span class="line">    <span class="keyword">var</span> iD = <span class="built_in">Math</span>.floor(t/<span class="number">86400</span>); <span class="comment">//毫秒转天</span></span><br><span class="line">    <span class="keyword">var</span> iH = <span class="built_in">Math</span>.floor(t%<span class="number">86400</span>/<span class="number">3600</span>); <span class="comment">//毫秒转时</span></span><br><span class="line">    <span class="keyword">var</span> iM = <span class="built_in">Math</span>.floor(t%<span class="number">3600</span>/<span class="number">60</span>); <span class="comment">//毫秒转分</span></span><br><span class="line">    <span class="keyword">var</span> iS = t%<span class="number">60</span>; <span class="comment">//毫秒转秒</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><font color="red" size="4"><strong>倒计时完整思路：</strong></font></p>
<ol>
<li><p>核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但是不能拿时分秒相减，比如05分减去25分，结果会是负数</p>
</li>
<li><p>用时间戳来做。剩余时间的毫秒数 = 用户输入时间总的毫秒数 - 现在时间总的毫秒数</p>
</li>
<li><p>把剩余的时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）</p>
</li>
<li><p>转换公式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d = <span class="built_in">parseInt</span>(总秒数/ <span class="number">60</span>/<span class="number">60</span> /<span class="number">24</span>); <span class="comment">// 计算天数</span></span><br><span class="line">h = <span class="built_in">parseInt</span>(总秒数/ <span class="number">60</span>/<span class="number">60</span> %<span class="number">24</span>); <span class="comment">// 计算小时</span></span><br><span class="line">m = <span class="built_in">parseInt</span>(总秒数/ <span class="number">60</span> %<span class="number">60</span>); <span class="comment">// 计算分钟</span></span><br><span class="line">s = <span class="built_in">parseInt</span>(总秒数 %<span class="number">60</span>); <span class="comment">// 计算当前秒</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><font color="red" size="4"><strong>倒计时效果：</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times就是剩余时间总的秒数(/1000表示毫秒转换为秒)</span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times/ <span class="number">60</span> /<span class="number">60</span> /<span class="number">24</span>); <span class="comment">// 计算天数</span></span><br><span class="line">    <span class="comment">// 前面补0</span></span><br><span class="line">    d = d &lt; <span class="number">10</span> ? <span class="string">'0'</span> + d : d;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times/ <span class="number">60</span> /<span class="number">60</span> %<span class="number">24</span>); <span class="comment">// 计算小时</span></span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">'0'</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times/ <span class="number">60</span> %<span class="number">60</span>); <span class="comment">// 计算分钟</span></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times%<span class="number">60</span>); <span class="comment">// 计算秒</span></span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">'0'</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> (d + <span class="string">"天"</span> + h + <span class="string">"时"</span> + m + <span class="string">"分"</span> + s + <span class="string">"秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countDown(<span class="string">"2019-8-23 07:00:00"</span>));</span><br></pre></td></tr></table></figure>

<hr>
<p><font size="5" color="gree">练习：</font></p>
<p><font size="4">1. 小明情人节给女朋友做了一段js，并定了饭店，可女朋友没有去，请问原因是什么：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">if</span> (oTime.getMonth() === <span class="number">2</span> &amp;&amp; oTime.getDate() === <span class="number">14</span>) &#123;</span><br><span class="line">    alert(<span class="string">'亲爱的，我预定了晚餐，晚上6点在餐厅见！'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 用任意方法设置一个未来时间：今天五天之后，6小时后</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">oTime.setDate(oTime.getDate()+<span class="number">5</span>);</span><br><span class="line">oTime.setHours(oTime.getHours()+<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oTime);</span><br></pre></td></tr></table></figure>

<p><font size="4">3. 用计时器把当前时间的时分秒每1秒钟在页面的p标签中展示一次时间格式(xx:xx:xx的格式)，做出一个时钟效果，第一秒页面也要展示一次时间</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>)[<span class="number">0</span>];</span><br><span class="line">clock();</span><br><span class="line">setInterval(clock,<span class="number">1000</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clock</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> iTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> iHours = iTime.getHours(); <span class="comment">//获取时</span></span><br><span class="line">        <span class="keyword">var</span> iMin = iTime.getMinutes(); <span class="comment">//获取分</span></span><br><span class="line">        <span class="keyword">var</span> iSec = iTime.getSeconds(); <span class="comment">//获取秒</span></span><br><span class="line">        oP.innerHTML = add0(iHours) + <span class="string">":"</span> + add0(iMin) + <span class="string">":"</span> + add0(iSec);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add0</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num&lt;<span class="number">10</span> ? <span class="string">"0"</span>+ num : <span class="string">""</span> + num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">4. 设置一个未来时间，做一个秒杀倒计时，而且显示的所有数字和“:”用图片显示</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><font size="4">5. 倒计时：距离放假还有<em>:</em>:* </font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oSpan = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"span"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> oTimeNew = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    oTimeNew.setHours(<span class="number">16</span>);</span><br><span class="line">    oTimeNew.setMinutes(<span class="number">30</span>);</span><br><span class="line">    oTimeNew.setSeconds(<span class="number">0</span>);</span><br><span class="line">    clock();</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(clock,<span class="number">1000</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clock</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = (oTimeNew - <span class="keyword">new</span> <span class="built_in">Date</span>())/<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">var</span> iH = <span class="built_in">Math</span>.floor(t%<span class="number">86400</span>/<span class="number">3600</span>); <span class="comment">//毫秒转时</span></span><br><span class="line">        <span class="keyword">var</span> iM = <span class="built_in">Math</span>.floor(t%<span class="number">3600</span>/<span class="number">60</span>); <span class="comment">//毫秒转分</span></span><br><span class="line">        <span class="keyword">var</span> iS = t%<span class="number">60</span>; <span class="comment">//毫秒转秒 --&gt;</span></span><br><span class="line">        oSpan.innerHTML = add0(iH) +  <span class="string">":"</span> + add0(iM) + <span class="string">":"</span> + add0(iS);</span><br><span class="line">        t == <span class="number">0</span> &amp;&amp; clearIntervaltimer(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add0</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num&lt;<span class="number">10</span> ? <span class="string">"0"</span>+ num : <span class="string">""</span> + num;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js特殊函数和运算符</title>
    <url>/2019/07/27/js%E7%89%B9%E6%AE%8A%E5%87%BD%E6%95%B0%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<ul>
<li><h4 id="自执行-立即执行-自调用-函数"><a href="#自执行-立即执行-自调用-函数" class="headerlink" title="自执行(立即执行/自调用)函数"></a>自执行(立即执行/自调用)函数</h4></li>
</ul>
<ol>
<li><p>自执行函数语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;…&#125;)();</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;…&#125;())</span><br></pre></td></tr></table></figure>

<p>这两种自执行函数的写法，在函数体后面加括号就能立即调用，这个函数必须是函数表达式，不能是函数声明</p>
</li>
<li><p>自执行函数可以正常传参，第一个括号是形参的位置，第二个括号是实参的位置；它的内部也是域，变量是局部变量，很多框架里使用自执行函数来防止全局变量的污染；我们也可以用自执行函数将循环for中的i锁定在自执行函数内，我们之前则是使用自定义属性来实现类似的效果的</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> a = <span class="number">10</span>;	</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">b</span>)</span>&#123;  <span class="comment">//var b = a = 10;</span></span><br><span class="line">    alert(b);	</span><br><span class="line">&#125;)(a);</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4></li>
</ul>
<ol>
<li><p>Math.floor()：向下取整(下舍去)</p>
</li>
<li><p>Math.ceil()：向上取整(上进入)</p>
</li>
<li><p>Math.round()：四舍五入</p>
</li>
<li><p>Math.abs()：取绝对值</p>
</li>
<li><p>Math.max()：比较(取大)</p>
</li>
<li><p>Math.min()：比较(取小)</p>
</li>
<li><p>Math.sin()： 正弦函数(参数为弧度)</p>
</li>
<li><p>Math.cos()： 余弦函数(参数为弧度)</p>
</li>
<li><p>Math.tan()： 正切函数(参数为弧度)</p>
</li>
<li><p>Math.PI： 圆周率(无理数pi)</p>
</li>
<li><p>Math.sqrt(x)： x的平方根(开方)</p>
</li>
<li><p>Math.pow(x,y)： x的y次方(ES7中用x**y表示)</p>
</li>
<li><p>Math.random()：0~1的一个随机数，下面是几个随机整数的公式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random())    <span class="comment">//让结果在0和1随机出现</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*a)  <span class="comment">//让结果在0到a的整数中随机</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(a-b)+b)    <span class="comment">//让结果在b到a的整数中随机	b大a小</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Num.toPrecision(x)</code>： 将Num固定为x位数字(小数多余部分会四舍五入，整数多余部分会用科学计数法后四舍五入)</p>
</li>
<li><p><code>Num.toFixed(x)</code>： 将Num的小数部分取x位有效数字(多余部分会四舍五入，不足部分会补0)</p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="高阶函数和递归函数"><a href="#高阶函数和递归函数" class="headerlink" title="高阶函数和递归函数"></a>高阶函数和递归函数</h4></li>
</ul>
<ol>
<li><p>函数其实都指向某个变量。<font color="orange"><strong>函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数：</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y, f</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y); </span><br><span class="line">&#125; <span class="comment">//这里的f相当于函数表达式：var f = Math.abs</span></span><br><span class="line">add(<span class="number">-5</span>, <span class="number">6</span>, <span class="built_in">Math</span>.abs);  <span class="comment">//11 （取绝对值）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>所谓的递归函数就是在函数体内调用本函数</strong></font>。使用递归函数一定要注意，处理不当就会进入死循环。递归函数只有在特定的情况下使用 ，比如阶乘问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params">num</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (num&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> num * recursion(num<span class="number">-1</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="red">但我们把函数指针改变并修改原指针时会出错，原因是递归调用的时候原指针已改变了。解决办法是在函数内部调用当前函数用arguments.callee代替函数名，callee属性的初始值就是正被执行的 Function 对象。它是 arguments 对象的一个成员，表示对函数对象本身的引用。</font></p>
</li>
<li><p>但是访问 arguments 是个很昂贵的操作，因为它是个很大的对象，每次递归调用时都需要重新创建。影响现代浏览器的性能，还会影响闭包。因此我们在使用递归的时候还是用函数名的写法，同时避免上面例子的写法就可以了</p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4></li>
</ul>
<ol>
<li>算术：+(加)、-(减)、*(乘)、/(除)、%(求余)</li>
<li>三元运算：a ? b : c既if/else特殊写法，等同于if ( a ){ b }else( c )</li>
<li>赋值：=(将=右边的值赋给左边)、+=(将+=左右两边求和后赋给左边)、-=、*=、/=、%=(后面的如同+=)</li>
<li>判断：&lt;、&gt;、&lt;=、&gt;=、==、!=、===、!==，=== 和 !== 只有在相同类型下,才会比较其值，类型不同直接返回布尔值</li>
<li>逻辑：&amp;&amp;——逻辑”与”操作；||——逻辑”或”操作；!——取反操作<ul>
<li>a&amp;&amp;b逻辑”与”定义：从左向右读到false就返回(后面数据不会继续判断)，如所有数据都是ture则返回最后一个(因此都为true时返回的是true)</li>
<li>a||b逻辑”或”定义：从左向右读到true就返回(后面数据不会继续判断)，如所有数据都是false则返回最后一个(因此都为false返回的是false)</li>
<li>注意：虽然返回结果是根据布尔值决定的，但js的逻辑运算返回的是数据，而不是布尔值，这与其他编程语言不一样(如PHP返回的就永远是布尔值)</li>
</ul>
</li>
<li>运算优先级：()可以让其内部表达式先执行，如算式或逻辑运算等</li>
</ol>
<hr>
<p><font size="5" color="gree">练习：</font></p>
<p><font size="4">1. 封装一个函数，要求参数传入班级人数n，返回值为随机学号(该学号必须为整数且大于等于1，小于等于总人数n)</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        b[i] = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(<span class="number">1</span>-n)+n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn1(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 菲波那切数列：1、1、2、3、5、8、13、21，写一个函数，参数为数列的位数，弹出值？</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>)</span>&#123;<span class="comment">//var n;</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n<span class="number">-2</span>)+fibonacci(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">8</span>));  <span class="comment">//21</span></span><br></pre></td></tr></table></figure>

<p><font size="4">3. 以下逻辑计算后，变量a，b，c的值分别为多少：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">''</span> || <span class="literal">null</span> || <span class="number">3</span> || <span class="number">4</span>;		<span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span> &amp;&amp; <span class="number">5</span> &amp;&amp; <span class="literal">null</span> &amp;&amp; <span class="string">'0'</span>;		<span class="comment">//null</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">5</span> &amp;&amp; <span class="literal">false</span> || <span class="number">4</span> &amp;&amp; <span class="literal">null</span>;	<span class="comment">//null</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">5</span> &amp;&amp; (<span class="literal">false</span> || <span class="number">4</span>) &amp;&amp; <span class="literal">null</span>;	<span class="comment">//null</span></span><br></pre></td></tr></table></figure>

<p><font size="4">4. 做一个按钮切换新闻的效果，每次显示5条(要求设置一个新闻数组，里面有18条新闻)</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"新闻1"</span>,<span class="string">"新闻2"</span>,<span class="string">"新闻3"</span>,<span class="string">"新闻4"</span>,<span class="string">"新闻5"</span>,<span class="string">"新闻6"</span>,<span class="string">"新闻7"</span>,<span class="string">"新闻8"</span>,<span class="string">"新闻9"</span>,<span class="string">"新闻10"</span>,<span class="string">"新闻11"</span>,<span class="string">"新闻12"</span>,<span class="string">"新闻13"</span>,<span class="string">"新闻14"</span>,<span class="string">"新闻15"</span>,<span class="string">"新闻16"</span>,<span class="string">"新闻17"</span>,<span class="string">"新闻18"</span>];</span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> aBtn = oDiv.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">Math</span>.ceil(arr.length/<span class="number">5</span>);i++)&#123;</span><br><span class="line">    str += <span class="string">"&lt;button&gt;第"</span> + (i+<span class="number">1</span>) + <span class="string">"页&lt;/button&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">oDiv.innerHTML = str;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aBtn.length;i++)&#123;</span><br><span class="line">    aBtn[i].index = i;</span><br><span class="line">    aBtn[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        fn1(<span class="keyword">this</span>.index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//创建li并且每次显示5条</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=a*<span class="number">5</span>;i&lt;=a*<span class="number">5</span>+<span class="number">4</span>&amp;&amp;i&lt;arr.length;i++)&#123;</span><br><span class="line">       str += <span class="string">"&lt;li&gt;"</span> + arr[i] + <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    oUl.innerHTML = str; </span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p><font size="4">5. 分别使用三元运算、数学方法和逻辑运算3个方法完成下面问题：封装一个函数，要求参数n小于100时，返回值为n，参数大于等于100时，返回值为100(n为大于0的整数)</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//三元运算</span></span><br><span class="line">    <span class="keyword">return</span> n&lt;<span class="number">100</span> ? n : <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//数学方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min(n,<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//逻辑运算</span></span><br><span class="line">    <span class="keyword">return</span> n&lt;<span class="number">100</span> &amp;&amp; n ||<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">6. 用js创建22个li元素，背景颜色设置为var arr=[“red”,”black”,”blue”,”yellow”,”green”]中的颜色循环，然后为每个li元素再加上鼠标移入时背景变灰，移开时变回去的效果</font></p>
<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">"red"</span>,<span class="string">"black"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>,<span class="string">"green"</span>];</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> aLi = oUl.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">22</span>;i++)&#123;</span><br><span class="line">    str += <span class="string">"&lt;li&gt;&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">oUl.innerHTML = str;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aLi.length;i++)&#123;</span><br><span class="line">    aLi[i].index = i;</span><br><span class="line">    aLi[i].style.backgroundColor = arr[i%<span class="number">5</span>];</span><br><span class="line">    aLi[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">"grey"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    aLi[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.backgroundColor = arr[<span class="keyword">this</span>.index%<span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js获取作用域的数据和闭包</title>
    <url>/2019/07/27/js%E8%8E%B7%E5%8F%96%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<ul>
<li><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4></li>
</ul>
<ol>
<li><p>虽然有作用域链让我们在低级域从高级域中拿值，但是两个函数(同级域)或在高级域从低级域拿值却做不到，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">     <span class="keyword">var</span> a = <span class="string">'abc'</span>; </span><br><span class="line"> &#125; <span class="comment">//在全局里a找不到</span></span><br><span class="line">fn1();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>我们可以用全局变量从低级域中拿值，通过传参到另一个函数内拿值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b =<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">     <span class="keyword">var</span> a = <span class="string">'abc'</span>; </span><br><span class="line">    b = a;</span><br><span class="line"> &#125;</span><br><span class="line">fn1();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>除此之外还可以用闭包，要理解闭包，首先必须理解js特殊的变量作用域。js语言的特殊之处，就在于通过作用域链函数内部可以直接读取全局变量。另一方面，在函数外部无法读取函数内的局部变量。</p>
</li>
<li><p>用闭包如何从外部读取局部变量，我们可以在函数的内部，再定义一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    	alert(n); </span><br><span class="line">    &#125;</span><br><span class="line">    f2(); <span class="comment">// 999</span></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure>

<p><font color="orange">f2被包在函数f1内部，f1内的所有局部变量对f2都是可见的。反过来就不行，f2内的局部变量对f1就是不可见了。</font>这就是js特有的”链式作用域”结构，子对象会一级一级地向上寻找所有父对象的变量。</p>
</li>
<li><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量了，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(n); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = f1(); </span><br><span class="line">result();</span><br></pre></td></tr></table></figure>
</li>
<li><p>闭包的概念：上面代码中f2函数被声明在f1函数内(很多书中也管f2叫闭包，其实是一个意思)，就是闭包。</p>
</li>
<li><p>闭包的最大用处有两个：</p>
<ul>
<li><p>可以读取函数内部的变量；</p>
</li>
<li><p>让这些变量的值始终保持在内存中，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nAdd;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">	nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        n+=<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        alert(n); </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=f1();</span><br><span class="line">result(); <span class="comment">//n=999</span></span><br><span class="line">nAdd();</span><br><span class="line">result(); <span class="comment">//n=1000</span></span><br></pre></td></tr></table></figure>

<p>f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1和它的局部变量也始终在内存中，不会在调用结束后，被垃圾回收机制回收</p>
</li>
</ul>
</li>
<li><p>使用闭包的注意点：</p>
<ul>
<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题。解决方法是，在退出函数之前，将不使用的局部变量全部删除(将闭包内部的变量设置为null，让变量失去引用，会被系统自动回收)。</li>
<li>闭包会导致在父函数外部，能够改变父函数内部变量的值。所以，如果你把父函数当作对象(object)使用，把闭包当作它的公用方法(Public Method)，把内部变量当作它的私有属性(private value)，一定要小心，不要随便改变父函数内部变量的值。(这些概念会在后面说明)</li>
</ul>
</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">查看下面代码，说出结果：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    name : <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;;<span class="comment">//this是window</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object.getNameFunc()());  <span class="comment">//the	window  直接调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    name : <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> that.name;	<span class="comment">//this是object</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object.getNameFunc()()); <span class="comment">//My	Object	对象调用</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js函数的返回值和arguments对象</title>
    <url>/2019/07/26/js%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8Carguments%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ul>
<li><h4 id="函数的创建形式"><a href="#函数的创建形式" class="headerlink" title="函数的创建形式"></a>函数的创建形式</h4></li>
</ul>
<ol>
<li><p>函数声明：使用function关键字声明一个函数，再指定一个函数名。叫做函数声明：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span> (<span class="params"></span>) </span>&#123;…&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数表达式：使用function关键字声明一个函数，但未给函数命名，最后将匿名函数赋予一个变量，叫函数表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fnName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;…&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>匿名函数：使用function关键字声明一个函数，但未给函数命名，所以叫匿名函数，匿名函数属于函数表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;…&#125;;</span><br></pre></td></tr></table></figure>

<p>匿名函数有很多作用，赋予一个变量则创建函数，赋予一个事件则成为事件处理程序或创建闭包等等</p>
</li>
<li><p>函数声明和函数表达式的执行顺序：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fnName();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>正常，因为预解析’提升’了函数声明的函数，函数可在函数声明之前调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fnName();</span><br><span class="line"><span class="keyword">var</span> fnName=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>报错，变量fnName预解析时被初始化为undefined，还未保存对函数的引用，因此<font color="red">函数表达式的函数必须在函数表达式赋值之后调用</font></p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4></li>
</ul>
<ol>
<li><p>函数内return关键字后面的值就是返回值，用函数名()就可以得到函数的返回值，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(fn1());  <span class="comment">//弹出100</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>return关键字后面的值可以是任何数据类型：字符串、数字、布尔值、函数、对象([]/{}/null)、未定义，用typeof(fn1());就可以判断返回值的类型</p>
</li>
<li><p>返回函数时，实际上就是返回了该函数的引用，再加上()就可以调用这个函数了(因此下面fn2()相当于返回值函数的函数名)，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn2()(); <span class="comment">//前面fn2()是fn2的返回值，后面的()代表调用该返回值</span></span><br></pre></td></tr></table></figure>

<p>注意：这种定义到另一个函数内部的函数并返回其实就是闭包</p>
</li>
<li><p>也可以给上面两个函数分别<strong>传参</strong>，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        alert( a + b );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn2(<span class="number">20</span>)(<span class="number">10</span>); <span class="comment">//a和b应该分别对应什么</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>利用传参和返回值可以封装很多效果，如jq里面的$就是用这种方式来实现的，我们也可以这样累积出来一个js库，反复使用</p>
</li>
<li><p><font color="red">返回值需要注意的事项：</font></p>
<ul>
<li>只有函数代码块里才可以用return，如果一个函数没有return或return后无返回值，则会返回一个未定义</li>
<li>return返回值之后的任何代码都不会执行</li>
</ul>
</li>
</ol>
<hr>
<ul>
<li><h4 id="arguments（实参的集合）"><a href="#arguments（实参的集合）" class="headerlink" title="arguments（实参的集合）"></a>arguments（实参的集合）</h4></li>
</ul>
<ol>
<li><p>当函数没有设置形参时，但调用的时候却传了实参，那么实参依然会被传入函数，但是没有形参，于是被保存在了arguments(<strong>实参的集合，也是类数组的一种</strong>)里，可以对其使用.length、[]等</p>
</li>
<li><p>当函数的参数数量不确定的时候，就非常适合使用arguments</p>
</li>
<li><p><font color="red"><strong><code>arguments.length</code>是函数实参的数量</strong>，而函数名的长度<code>(fn1.length)</code>则是形参的数量</font></p>
</li>
<li><p>arguments与形参同值：当你设置了形参，并改变了该形参的值，那么该形参对应的arguments的值也同时发生变化；反之你修改了arguments的值，那么该值对应的形参也会发生变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);  <span class="comment">//输出10</span></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);   <span class="comment">//输出20</span></span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 封装函数，数字参数n，每次调用时返回一个1到n的数组</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    	arr.push(i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn1(<span class="number">6</span>));<span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>

<p><font size="4">2. 封装函数，传两个数字参数a和b，每次调用时返回一个从小到大的数组</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b ? [a,b] : [b,a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"按从小到大排序结果为："</span> + fn1(<span class="number">-3</span>,<span class="number">-5</span>));<span class="comment">//返回[-5,-3]</span></span><br></pre></td></tr></table></figure>

<p><font size="4">3. 封装函数，要求：参数的数量任意，简单的加减法计算器，要求：最后一个参数为”+”或”-“，返回第一个参数与后面参数依次加法或者减法的结果</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> iNum = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">switch</span>(a)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">                   iNum += <span class="built_in">arguments</span>[i];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">                   iNum -= <span class="built_in">arguments</span>[i];</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> iNum;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(fn1(<span class="string">"+"</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line">   <span class="built_in">console</span>.log(fn1(<span class="string">"-"</span>,<span class="number">20</span>,<span class="number">6</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js函数的参数和作用域</title>
    <url>/2019/07/26/js%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<ul>
<li><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4></li>
</ul>
<ol>
<li><p>函数在声明和调用时，有个小括号，这里就是放置参数的地方：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;  <span class="comment">//相当于在函数的内部 var a</span></span><br><span class="line">    alert(a);</span><br><span class="line">&#125;;  </span><br><span class="line">fn1(<span class="number">100</span>);   <span class="comment">//函数调用的时候为a赋值 a = 100</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：函数声明时的a叫做形参：形式上的参数，用一个变量代表值的参数，只会出现在函数声明的时候；函数调用里的100叫做实参，给函数实际传递的参数值，只会出现在函数被调用的时候</font></p>
</li>
<li><p>因为形参相当于变量，因而实参可以存任何数据类型：数字、字符串、布尔值、函数、对象、未定义等；参数可以有多个，参数之间用”,”分割，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn1(<span class="number">100</span>,<span class="string">"px"</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    alert(a+b); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数的封装：由顺序、选择和循环三种基本结构组成，功能相对独立的一个模块，如下，根据参数的类型函数会执行不同的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">100</span>;<span class="comment">//数字</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="string">"num"</span>;<span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>);&#125;<span class="comment">//函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">typeof</span>(a))&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'number'</span>: alert(a+<span class="number">20</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'string'</span>: alert(a.charAt(<span class="number">2</span>)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'function'</span>: a();<span class="comment">//调用函数</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">console</span>.log(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">fn1(m);<span class="comment">//函数调用</span></span><br><span class="line">fn1(n);</span><br><span class="line">fn1(c);</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数的封装的注意事项：</p>
<ul>
<li>尽量保证HTML代码结构一致(否则很难重用代码)</li>
<li>需要把核心程序实现，再用函数包裹起来</li>
<li>把每组中不同的值找出来，通过传参分别实现效果</li>
<li>运算符号是不能作为参数传递的，只能在函数内部通过判断的方式来分别执行</li>
</ul>
</li>
</ol>
<hr>
<ul>
<li><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4></li>
</ul>
<ol>
<li><p>域：空间、范围、区域。如：js必须放在script里，css放在style里，它的作用就是(在一个范围内)读和写</p>
</li>
<li><p>浏览器有读js的解析器，当进入script标签后：</p>
<ul>
<li>第1步–预解析：找到全局的var和function(变量提升)，先检查function函数名和内容并储存，当发现重名时，后面的函数覆盖前面的函数；再检查var的变量储存并初始化值undefind，但是发现重名时会跳过储存(不管重复的是变量名还是函数名)</li>
<li>第2步–逐行读代码：变量被赋值之前的值是初始化时的undefind，直到读到=、+、-、*、/、%、++、–、！等表达式才会获得新值，而读到函数声明时则什么都不会做，直到函数被调用才会执行其内容代码</li>
</ul>
</li>
<li><p>看一个例子，并分别分析下面代码中的alert(a)都弹出什么：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(a);  <span class="comment">//1、第一次弹出a，再声明变量a  弹出function a()&#123; alert(4); &#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">alert(a);  <span class="comment">//2、第一次弹出a，再为a赋值		弹出1</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">alert(a);  <span class="comment">//3、多次弹出a，再中间多次声明变量和函数a	</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">alert(a);		<span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">2</span>); &#125;</span><br><span class="line">alert(a);	<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">alert(a);		<span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">4</span>); &#125;</span><br><span class="line">alert(a);			<span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<p>注意：没有var的写法只存在于面试中，我们写的代码中不允许出现</p>
</li>
<li><p>在script标签里定义的变量是全局变量和函数，若写有两个script标签则是2个域，每个域的解析独立进行：上面script标签输出不了下面script声明的变量；下面script标签可以输出上面script声明的变量</p>
</li>
<li><p>另外一个函数的内部也是一个域，因此函数被调用时也会第一时间开始域解析，函数内部的变量是局部变量，该变量会在函数调用结束时销毁。注意：函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量。</p>
</li>
<li><p>作用域链：在一个域内没有找到某变量时，会由里到外，自上到下去更高级的域中去寻找，继续分析下面代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;   <span class="comment">//1、函数内外都声明有a变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; alert(a); <span class="keyword">var</span> a = <span class="number">2</span>; &#125;</span><br><span class="line">fn1();</span><br><span class="line">alert(a);</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;   <span class="comment">//2、全局声明a变量，函数未声明a变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; alert(a); a = <span class="number">2</span>; &#125;</span><br><span class="line">fn1();</span><br><span class="line">alert(a);</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;   <span class="comment">//3、全局声明a变量，函数有a形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123; alert(a); a = <span class="number">2</span>; &#125; </span><br><span class="line">fn1();</span><br><span class="line">alert(a);</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;   <span class="comment">//4、全局声明a变量，函数未声明a变量，调用有a实参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; alert(a); a = <span class="number">2</span>; &#125;</span><br><span class="line">fn1(a);</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：if(){}和for(){}的花括号不是域；匿名函数的{}里是一个域；当js出现错误的时候，如果不是代码写错了，那就是代码的解析机制想错了</p>
</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 封装一个函数，3个参数（a , b , c），如果参数a的结果为”+”，则输出b和c的和；如果参数a的结果为”-“，则输出b和c的差</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">switch</span>(a)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"+"</span>: <span class="built_in">console</span>.log(b+c);<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"-"</span>: <span class="built_in">console</span>.log(b-c);<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="string">"+"</span>,<span class="number">5</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>做一个根据图片数量生成对应数量按钮，并通过点击按钮控制图片的切换，用传参的方式封装函数，要求并在页面中设置两个图片切换，区别1图片数量不同，区别2切换的方式不同(一个hover效果，一个click效果)</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级-十一、使用Apache部署静态网站</title>
    <url>/2019/07/23/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E5%8D%81%E4%B8%80%E3%80%81%E4%BD%BF%E7%94%A8Apache%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<center><font size="5">十一、使用Apache部署静态网站</font></center>
1. web网站服务又称为www服务（world    wide    web）

<ol start="2">
<li><p><strong>web服务原理</strong>：是一种被动服务，只有接收了互联网中其他计算机发出的请求后才会响应，然后web服务器才会使用HTTP（超文本传输协议）或HTTPS（超文本安全传输协议）将指定文件传送到客户机的浏览器上解析后成为网页</p>
</li>
<li><p><strong>常见的web服务程序</strong></p>
<p>(1) IIS7：Internet  information  services  7，是Windows系统中默认web服务程序，第一款图形化的网站管理工具</p>
<p>(2) Apache：是一种跨平台的安全性广泛被认可的且拥有快速、可靠、简单的API扩展的web部署软件，是一种常用的web服务软件</p>
<p>(3) Nginx：是一款轻量级的网站服务软件，性能稳定、功能丰富，系统资源占用率低、内存占用少且并发能力强</p>
</li>
<li><p><strong>网站组成</strong></p>
<p>(1) 页面源程序：又称为web页，通过网页编写软件编写的网页源文件，HTML，css，脚本等</p>
<p>(2) 主机空间：用于存放网页源代码并能够将网页内容展示给用户</p>
<p>​    A. 虚拟主机：在一台服务器中分出一定的磁盘空间供用户放置网站、存放数据等，仅提供基础的网站访问等简单功能，成本较低，节省维护时间，降低运维费用，适用于小型企业</p>
<p>​    B. VPS：在一台服务器中虚拟出多个“逻辑计算机设备”，每一个用户面对的都是一台“独立”服务器，可以安装操作系统，部署功能服务软件，适用于小型企业</p>
<p>​    C. 云服务器（ECS）：整合硬件、计算、存储、网络、服务等功能，能够弹性的进行计算服务，使用时同VPS，区别ECS是建立在一个大型计算机集群基础之上，每个服务器都有镜像，保证安全性，用户只需按量付费</p>
<p>​    D. 独立服务器：租赁服务器，托管服务器，自行购买维护服务器</p>
<p>​        (a) 塔式服务器</p>
<p>​        (b) 机架式服务器：U：是一种表示机架式服务器外部尺寸的单位，是unit的缩略语，厚度以4.445cm为基本单位，1U就是4.445cm，2U则是1U的2倍为8.89cm</p>
<p>(3) 域名及域名解析</p>
</li>
<li><p><strong>安装Apache服务器程序</strong></p>
<p>(1) <font color="red"><strong>注意：Apache为服务名称，其软件名称为<code>httpd</code></strong></font></p>
<p>(2) 过程：</p>
<p>​    A. 搭建DVD光盘yum仓库</p>
<p>​        (a) <code>mount    /dev/sr0    /media</code></p>
<p>​            (若找不到媒体，在虚拟机右下角点击光盘图标单右后点击连接)</p>
<p>​        (b) <code>cd    /etc</code></p>
<p>​                <code>mv    yum.repos.d    yum.repos.d.back</code></p>
<p>​                <code>mkdir    yum.repos.d</code></p>
<p>​                <code>cd    yum.repos.d</code></p>
<p>​        (c) <code>vim    DVD.repo</code>    输入以下内容：</p>
<p>​            <code>[DVD]</code></p>
<p>​            <code>baseurl=file:///media</code></p>
<p>​            <code>enabled=1</code></p>
<p>​            <code>gpgcheck=0</code></p>
<p>​        (d) <code>yum    makecache</code></p>
<p>​    B. 安装httpd服务程序：<code>yum    install    -y    httpd</code></p>
<p>​    C. 启动httpd服务程序：<code>systemctl    start    httpd</code></p>
<p>​    D. 开机启动httpd服务程序：<code>systemctl    enable    httpd</code></p>
<p>​    E. 检测httpd安装是否成功：点击Linux浏览器，地址栏中输入127.0.0.1</p>
</li>
<li><p><strong>httpd服务程序的配置</strong></p>
<p>(1) 配置目录</p>
<p>​    A. 服务目录：<code>/etc/httpd</code></p>
<p>​    B. 配置文件：<code>/etc/httpd/conf/httpd.conf</code></p>
<p>​    C. 网站数据：<code>/var/www/html</code></p>
<p>​    D. 访问日志：<code>/var/log/httpd/access.log</code></p>
<p>​    E. 错误日志：<code>/var/log/httpd/error_log</code></p>
<p>(2) 主配置文件分析</p>
<p>​    A. 路径：<code>/etc/httpd/conf/httpd.conf</code></p>
<p>​    B. 打开方式：<code>vim    /etc/httpd/conf/httpd.conf</code></p>
<p>​    C. 结构分析：</p>
<p>​        (a) 注释行：#开头，起到声明的作用</p>
<p>​        (b) 全局配置：对所有网页程序都生效</p>
<p>​        (c) 局部配置：以&lt;&gt;作为定界符，只在局部网页或功能下生效</p>
<p>​    D. 主要参数：</p>
<p>​        (a) ServerRoot ：服务目录</p>
<p>​        (b) ServerAdmin：管理员邮箱</p>
<p>​        (c) User：运行服务的用户</p>
<p>​        (d) Group：运行服务的工作组</p>
<p>​        (e) ServerName：网站服务器的域名</p>
<p>​        (f) DocumentRoot：网站数据目录</p>
<p>​        (g) Listen：监听的IP地址与端口号（80）</p>
<p>​        (h) DirectoryIndex：默认的索引页页面</p>
<p>​        (i) ErrorLog：错误日志文件</p>
<p>​        (j) CustomLog：访问日志文件</p>
<p>​        (k) Timeout：网页超时时间，默认为300秒</p>
<p>​        (l) Include：需要加载的其他文件</p>
<p>(3) 部署个人网站</p>
<p>​    A. 放置个人网页</p>
<p>​        (a) 在/下建立目录：<code>mkdir    /web1</code></p>
<p>​        (b) 在图形化界面中将Windows的web页复制粘贴到Linux的/web1目录中</p>
<p>​    B. 修改http配置文件的网页默认存储目录</p>
<p>​        (a) <code>vim    /etc/httpd/conf/httpd.conf</code></p>
<p>​        (b) 定位第119行，将<code>DocumentRoot    &quot;/var/www/html&quot;</code>中的<code>&quot;/var/www/html&quot;</code>改为<code>&quot;/web1&quot;</code></p>
<p>​        (c) 定位第124行<code>&lt;Directory    &quot;var/www&quot;&gt;</code>中的<code>&quot;var/www&quot;</code>改为<code>&quot;/web1&quot;</code></p>
<p>​        (d) 保存退出</p>
<p>​        (e) 重启httpd服务：<code>systemctl    restart    httpd</code></p>
<p>​    C. 关闭防火墙：<code>systemctl    stop    filewalld</code></p>
<p>​    D. 关闭SELinux</p>
<p>​        (a) SELinux：Security-Enhanced    Linux，美国国际安全局在Linux社区帮助下开发的一个“强制访问控制的安全子系统”，用于让系统中的各个服务进程都收到约束，即仅能访问到所需要的文件</p>
<p>​        (b) 常用命令：</p>
<p>​            ◆ 查询当前SELinux状态：<code>getenforce</code></p>
<p>​            ◆ 模式一：<code>Enforcing</code>    ，    安全策略强制启用模式，将会拦截服务的不合法请求</p>
<p>​            ◆ 模式二：<code>Permissive</code>    ，    遇到服务越权访问只会发出警告而不强制拦截</p>
<p>​            ◆ 模式三：<code>Disabled</code>    ，    对于越权的行为不警告，也不拦截</p>
<p>​            ◆ 关闭SELinux：<code>setenforce    0</code></p>
<p>​    E. 输入ip    addr查看本机IP，通过IP地址在浏览器中查看网页</p>
<p>(4) 设置手动强制域名解析</p>
<p>​    A. 在Windows中定位文件：C:\Windows\System32\drivers\etc\hosts</p>
<p>​    B. 点击hosts文件后单击右键以记事本打开</p>
<p>​    C. 在最后一行添加一行记录：</p>
<p>​        (a) 格式：IP    域名</p>
<p>​        (b) 例：192.168.122.1    <a href="http://www.ylx.com" target="_blank" rel="noopener">www.ylx.com</a></p>
<p>​        (c) 保存退出</p>
<p>​    D. 在Windows中打开浏览器输入上述域名也可访问网站</p>
<p>​    E. <font color="red">注意：以上方法仅限于实验，实际工作中需要购买DNS域名解析服务及域名</font></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级-十、操作系统基础知识</title>
    <url>/2019/07/23/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E5%8D%81%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<center><font size="5">十、操作系统基础知识</font></center>

<ol>
<li><p><strong>概念</strong>：管理计算机软硬件资源，提供系统设备接口及工作界面</p>
<p>(1) 管理者作用</p>
<p>​    A. 管理硬件资源</p>
<p>​        (a) 管理CPU运算时间</p>
<p>​        (b) 管理内存的存储空间</p>
<p>​    B. 提供使用方法</p>
<p>​        (a) 工作界面：图形化界面（GUI）、命令行界面（CLI）</p>
<p>​        (b) 提供接口</p>
<p>​            ◆ 软件接口：API</p>
<p>​            ◆ 硬件接口</p>
</li>
<li><p><strong>操作系统功能</strong></p>
<p>(1) 进程管理：管理CPU运行时间（轮转、同步、死锁等）</p>
<p>(2) 内存管理：管理内存存储空间（申请、释放、扩展、安全等）</p>
<p>(3)  设备管理：管理除了CPU、内存之外的所有设备（磁盘等）</p>
<p>(4) 文件管理：文件系统（FAT32    NTFS）</p>
<p>(5) 用户界面管理：提供shell界面及方式</p>
<p>(6) 网络管理：网络创建、地址规划、连接等</p>
</li>
<li><p><strong>Linux系统架构</strong></p>
<p>(1) 组成：硬件、内核、系统调用、应用程序（从外到内）</p>
<p>(2) 图：</p>
<p><img src="/2019/07/23/Linux运维初级-十、操作系统基础知识/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563861498556.png" alt="1563861498556"></p>
<p>(3) kernel结构：</p>
<p>​    A. 图：</p>
<p>​    <img src="/2019/07/23/Linux运维初级-十、操作系统基础知识/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563861579000.png" alt="1563861579000"></p>
<p>​    B. <code>system    call    interface</code>（SCI）：系统调用接口，由一系列的预先编写好的函数库构成，系统调用把应用程序的请求传给内核调用相应的内核函数完成所需的处理，将处理结果返回给应用程序</p>
<p>​    C. <code>PM</code> ：进程管理，创建销毁进程，管理进程的执行</p>
<p>​    D. <code>MM</code> ：内存管理，管理内存空间的申请、回收等功能，并完成地址映射转换</p>
<p>​    E. <code>VFS</code> ：虚拟文件系统，位于应用程序与实际多种文件系统之间，为文件系统提供了一个通用的接口抽象，如图：</p>
<p>​    <img src="/2019/07/23/Linux运维初级-十、操作系统基础知识/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563862132844.png" alt="1563862132844"></p>
<p>​    </p>
<p>​    F. NS ：网络堆栈，遵循模TCP/IP本身的分层体系结构，提供和管理网络连接，提供对多种网络通信标准的访问并支持许多网络硬件</p>
<p>​    G. DD ：硬件设备驱动，提供大量预制设备驱动程序，识别管理外部硬件设备</p>
</li>
<li><p><strong>Linux系统的基本组成</strong></p>
<p>(1) 组成：内核  +  根文件系统</p>
<p>(2) 内核：是Linux的整个核心，确切的说内核即是Linux，其他程序都是通过调度内核来实现其功能</p>
<p>(3) 根文件系统：根目录及文件系统</p>
</li>
<li><p><strong>Linux系统启动流程</strong></p>
<p>(1) 系统自检</p>
<p>​    A. 作用：当按下开机键后，立刻加电，自检程序会检查硬件设备的状态是否正常，重点检查CPU及内存</p>
<p>​    B. 自检失败：内存损坏、接触不良，键盘未安装，CPU异常</p>
<p>(2) 加载主引导记录</p>
<p>​    A. 确定引导设备：硬盘、光盘、U盘、网络</p>
<p>​    B. 从引导介质中加载引导程序</p>
<p>​    C. 使用Bootloader（引导加载器）进行引导</p>
<p>(3) 加载内核</p>
<p>(4) 加载根文件系统</p>
<p>(5) 启动初始化进程及后续服务</p>
<p>​    A. 内核文件加载以后，就开始运行第一个程序systemd，它的作用是初始化系统环境，由于systemd是第一个运行的程序，它的进程编号（pid）就是1，其他所有进程都从它衍生，都是它的子进程</p>
<p>​    B. 配置文件：/usr/lib/systemd/system</p>
<p>​                            /etc/systemd/system</p>
<p>(6) 加载终端：6个终端</p>
<p>​    A. 1个GUI，5个tty</p>
<p>​    B. 6个tty</p>
<p>(7) 开始登录</p>
<p>​    A. 图形化界面登录</p>
<p>​    B. 命令行登录界面</p>
<p>​    C. 远程登录</p>
<p>(8) 加载环境变量</p>
<p>(9) 显示命令提示符，等待用户输入命令</p>
</li>
<li><p><strong>网络基本概念</strong></p>
<p>(1) 概念：以资源共享为根本目的，遵循相同通信协议，以大量自治计算机组成的资源集合</p>
<p>(2) 组成：</p>
<p>​    A. 广域网（WAN）：直径大于50KM以上的远程网络</p>
<p>​    B. 城域网（MAN）：使用双环型结构的作用于一个城市的网络集合</p>
<p>​    C. 局域网（LAN）：直径小于5km以内的网络，易于创建、修改、扩展</p>
<p>(3) TCP/IP协议：</p>
<p>​    A. 网络模型：四层</p>
<p>​    B. 结构：</p>
<table>
<thead>
<tr>
<th align="center">应用层       4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">传输层       3</td>
</tr>
<tr>
<td align="center">互联层        2</td>
</tr>
<tr>
<td align="center">物理层        1</td>
</tr>
</tbody></table>
<p>​    C. 作用：</p>
<p>​        (a) 应用层：创建网络连接，管理连接，相应用户的网络服务（软件）</p>
<p>​        (b) 传输层：使用TCP或UDP传输报文（传输方式）</p>
<p>​        (c) 互联层：使用IP地址进行路由转发，路由选择（传输设备）</p>
<p>​        (d) 物理层：使用二进制透明传输比特流（传输介质）</p>
<p>(4) <font color="orange"><strong>IP地址：</strong></font>（IDDR）</p>
<p>​    A. 作用：用于互联网上表示唯一的连接</p>
<p>​    B. 注意：</p>
<p>​        (a) 一个IP地址只能表示一个主机位置</p>
<p>​        (b) 一个主机可以拥有多个IP地址</p>
<p>​    C. 组成：</p>
<p>​        (a) 32位二进制组成，点分十进制表示</p>
<p>​        (b) 例：二进制形态：    1100    0000    1010    1000    0000    0001    0000    0001</p>
<p>​                    点分十进制形态：192.168.1.1</p>
<p>​        (c) IP地址=网络号+主机号，上例中192.168.1为网络号，主机号为1</p>
<p>​    D. 分类：</p>
<p>​        (a) 原则：将IP的网络：主机号字段按照1:3、2:2、3:1的方式划分成以下五种类别的IP地址</p>
<p>​        (b) 类别：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">第一字节范围</th>
<th align="center">NET:HOST</th>
<th align="center">主机数</th>
<th align="center">应用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A类</td>
<td align="center">1-126</td>
<td align="center">1:3</td>
<td align="center">16777214</td>
<td align="center">大型网络</td>
</tr>
<tr>
<td align="center">B类</td>
<td align="center">128-191</td>
<td align="center">2:2</td>
<td align="center">65534</td>
<td align="center">中型网络</td>
</tr>
<tr>
<td align="center">C类</td>
<td align="center">192-223</td>
<td align="center">3:1</td>
<td align="center">254</td>
<td align="center">小型网络</td>
</tr>
<tr>
<td align="center">D类</td>
<td align="center">留</td>
<td align="center">作</td>
<td align="center">它</td>
<td align="center">用</td>
</tr>
<tr>
<td align="center">E类</td>
<td align="center">留</td>
<td align="center">作</td>
<td align="center">它</td>
<td align="center">用</td>
</tr>
</tbody></table>
<p>​        E. 实际LAN的IP地址规划</p>
<p>​            (a) 常见Router的IP地址：<font color="red">192.168.1</font>.1或<font color="red">192.168.0</font>.1</p>
<p>​            (b) IP地址处于同一网络互通原则：网络号必须相同</p>
<p>​            (c) 实际主机IP地址范围：192.168.1.2–192.168.1.254</p>
<p>​            (d) 习惯客户机升序设置IP，服务器倒序设置IP</p>
<p>​    (5) 子网掩码：（NETMASK）</p>
<p>​        A. 组成：32位二进制，点分十进制表示，由左向右为连续1，再是连续0，如：255.255.255.0拆分为二进制：1111    1111    1111    1111    1111    1111    0000    0000（1和0不能交叉）</p>
<p>​        B. 作用：子网掩码中数字1对应的IP地址数字表示网络号，数字0对应的IP地址数字表示主机号</p>
<p>​        C. <font color="orange"><strong>网络地址</strong>：</font></p>
<p>​            (a) 组成：网络号+0</p>
<p>​            (b) 例：192.168.1.0    10.0.0.0</p>
<p>​            (c) 作用：表示该网络的名称，用于区分网络，IP地址的网络地址不同不能通信</p>
<p>​            (d) 计算IP地址的网络地址：IP地址与子网掩码二进制状态下按位相与，如：192.168.10.1 &amp;255.255.255.0结果为192.168.10.0（1&amp;任意数=任意数本身）</p>
<p>​        D. ==标准子网掩码：==</p>
<p>​            (a) A类：255.0.0.0        /8</p>
<p>​            (b) B类：255.255.0.0        /16</p>
<p>​            (c) C类：255.255.255.0        /24（一个255是8个1，一共24个1）</p>
<p>​        E. ==子网掩码简略写法：==</p>
<p>​            (a) 格式：/数字</p>
<p>​            (b) 数字：子网掩码中二进制状态下由左向右连续1的个数，共32位，剩余补0</p>
<p>​            (c) 例：192.168.10.129/24</p>
<p>​                ◆ IP地址：192.168.10.129</p>
<p>​                ◆ 子网掩码：255.255.255.0</p>
<p>​    (6) 网关地址（GATEWAY）：一般为路由器或服务器的地址</p>
<p>​    (7) 域名解析：</p>
<p>​        A. 原因：计算机设备只识别IP地址，不识别域名网址，对于使用者由于域名网址便于使用和记忆则愿意使用域名网址</p>
<p>​        B. 作用：在互联网中存在着一种既独立又协作的域名解析服务器来完成域名与IP的相互转换映射</p>
<p>​        C. 分类：</p>
<p>​            (a) 正向解析：域名-&gt;IP</p>
<p>​            (b) 反向解析：IP-&gt;域名</p>
<p>​        D. 常见的域名解析服务器地址：</p>
<p>​            (a) 默认：路由IP地址（192.168.1.1）</p>
<p>​            (b) 8.8.8.8    （Google公司）</p>
<p>​            (c) 114.114.114.114    （工信部）</p>
</li>
<li><p><strong>HTTP协议</strong></p>
<p>(1) 超文本传输控制协议</p>
<p>(2) 作用：传输web页</p>
<p>(3) 端口：80</p>
<p>(4) 架构：客户机/服务器（C/S）</p>
<p>(5) URL：统一资源定位符格式，用于表示网址</p>
<p>​    A. 例：HTTP://<a href="http://www.baidu.com/index.html" target="_blank" rel="noopener">www.baidu.com/index.html</a></p>
<p>​    B. 结构：协议名://域名/文件名</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级-九、软件下载及安装</title>
    <url>/2019/07/22/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E4%B9%9D%E3%80%81%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<center><font size="5">九、软件下载及安装</font></center>

<ol>
<li><p><strong>安装方式</strong></p>
<p>(1) 原码安装</p>
<p>​    A. 原理：软件编写者或厂商编写放出的原始代码文本文件</p>
<p>​    B. 方式：解压缩Tarball文件，并且安装前需要进行检测操作系统、设定编辑环境参数、编译、设置等工作再进行安装</p>
<p>​    C. 特点：软件安装自由，可以制定相关功能，但操作量大，麻烦，对安装人员的技术要求较高</p>
<p>(2) RPM安装</p>
<p>​    A. RPM ：Red    Hat    Package    Manager （红帽软件管理器）</p>
<p>​    B. 原理：软件发布者在他自己的系统中编译好用户所需的软件，再进行发布交由用户使用，由于软件制作者使用的硬件和使用者是一样的，则省略的原码的相关步骤</p>
<p>​    C. 特点：简化安装步骤，但必须设置好软件安装的依赖性</p>
<p>(3) YUM安装</p>
<p>​    A. 原理：将RPM安装的软件及依赖软件的相关信息组成数据库存储在网络服务器中，用户安装软件时会首先查询该服务器的数据库，将安装软件及依赖软件一同打包下载</p>
<p>​    B. 特点：软件安装简单，但无法自定义软件</p>
</li>
<li><p><strong>RPM软件安装</strong></p>
<p>(1) 过程</p>
<p>​    A. 读取RPM包头中的数据，进行查询软件依赖性</p>
<p>​    B. 依赖性若满足则安装软件</p>
<p>​    C. 若不满足则安装失败</p>
<p>(2) 要求</p>
<p>​    A. 软件编译打包的环境必须与用户使用的环境相同</p>
<p>​    B. 软件安装依赖性必须满足</p>
<p>​    C. 卸载软件时最底层软件不能先卸载，否则系统会出错</p>
<p>(3) RPM文件</p>
<p>​    A. RPM文件：扩展名为*.rpm，已经编译可以直接安装，但不能修改其中参数，不能重新编译</p>
<p>​    B. SRPM文件：扩展名为*.src.rpm，未编译的原码文件，不可以直接执行，但可以根据当前环境和需求进行参数修改</p>
<p>​    C. RPM软件包的名称解释</p>
<p>​        (a) 例：<code>python-iniparse    -0.4    -9    .el7.x86_64.rpm</code></p>
<p>​        (b) <code>python-inipars</code>e ：软件名称</p>
<p>​        (c) <code>-0.4</code> ：版本号</p>
<p>​        (d) <code>-9</code> ：编译次数</p>
<p>​        (e) <code>.el7.x86_64.rpm</code> ：适用的平台</p>
<p>​        (f) 注意：</p>
<p>​            ◆ <code>x86_64</code> ：64位平台</p>
<p>​            ◆ <code>i386</code> ：32位平台</p>
<p>​            ◆ <code>noarch</code> ：通用平台，64位及32位都可使用</p>
<p>(4)<font color="orange"> <strong>RPM软件安装命令</strong></font></p>
<p>​    A. 格式：rpm    -参数    软件名称.rpm</p>
<p>​    B. 参数：</p>
<p>​        (a) -i ：安装软件</p>
<p>​        (b) -v ：查看安装信息</p>
<p>​        (c) -h ：显示安装进度</p>
<p>​        (d) –nodeps ：发生安装依赖时，强制安装，但可能安装后的软件无法使用</p>
<p>​        (e) –force ：安装时提示已安装，则覆盖安装</p>
<p>​        (f) -q ：查询软件是否安装</p>
<p>​    C. 例：手动安装gcc软件：<strong>（非常麻烦）</strong></p>
<p>​        (a) 新建待安装软件包目录：mkdir    ~/gcc</p>
<p>​        (b) 挂载光盘：<code>mount    /dev/sr0    /media</code></p>
<p>​        (c) 进入软件包目录：<code>cd    /media/Packages</code></p>
<p>​        (d) 拷贝7个依赖软件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp    mpfr-3.1.1-4.el7.x86_64.rpm     ~/gcc</span><br><span class="line">cp    libmpc-1.0.1-3.el7.x86_64.rpm     ~/gcc</span><br><span class="line">cp    kernel-headers-3.10.0-693.el7.x86_64.rpm   ~/gcc</span><br><span class="line">cp    glibc-headers-2.17-196.el7.x86_64.rpm      ~/gcc</span><br><span class="line">cp    glibc-devel-2.17-196.el7.x86_64.rpm        ~/gcc</span><br><span class="line">cp    cpp-4.8.5-16.el7.x86_64.rpm     ~/gcc</span><br><span class="line">cp    gcc-4.8.5-16.el7.x86_64.rpm     ~/gcc</span><br></pre></td></tr></table></figure>

<p>​        (e) <code>cd    ~/gcc</code></p>
<p>​        (f) 按下列顺序安装软件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm  -ivh   mpfr-3.1.1-4.el7.x86_64.rpm</span><br><span class="line">rpm  -ivh   libmpc-1.0.1-3.el7.x86_64.rpm</span><br><span class="line">rpm  -ivh   kernel-headers-3.10.0-693.el7.x86_64.rpm</span><br><span class="line">rpm  -ivh   glibc-headers-2.17-196.el7.x86_64.rpm</span><br><span class="line">rpm  -ivh   glibc-devel-2.17-196.el7.x86_64.rpm</span><br><span class="line">rpm  -ivh   cpp-4.8.5-16.el7.x86_64.rpm</span><br><span class="line">rpm  -ivh   gcc-4.8.5-16.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>​            (g) 检测gcc ：<code>rpm    -q    gcc</code></p>
<p>(5) RPM软件卸载</p>
<p>​    A. 格式：<code>rpm    -e    软件名.rpm</code></p>
<p>​    B. 注意：</p>
<p>​        (a) 软件安装时有依赖性，卸载时依然有依赖性，应从最上层软件开始卸载，否则会出现问题</p>
<p>​        (b) 若强行卸载则会破坏rpm的软件数据库，从而导致系统异常</p>
<p>​        (c) 修复rpm数据库的方式：<code>rpm    --rebuilddb</code></p>
</li>
<li><p><strong>YUM软件安装</strong></p>
<p>(1) YUM原理：Linux系统将软件编译好之后放到服务器中，并将该软件的依赖关系记录成表格也存储到服务器中，用户下载软件时会将该软件的信息下载到本地并与RPM数据库作比对，分析依赖软件的状态，一次性打包下载所有软件</p>
<p>(2) YUM仓库：记录软件依赖性等信息的数据库</p>
<p>(3)<font color="orange"> <strong>YUM常用命令</strong>：</font></p>
<p>​    A. <font color="red"><strong>浏览</strong></font>：</p>
<p>​        (a) <code>yum    repolist    all</code>    ：列出所有yum软件仓库</p>
<p>​        (b) <code>yum    list    all</code>    ：列出仓库中所有软件包</p>
<p>​        (c) <code>yum    info    软件包名称</code>    ：，列出软件包安装信息</p>
<p>​    B. <font color="red"><strong>安装</strong></font>：</p>
<p>​        (a) <code>yum    install    软件包名</code>    ：安装软件包</p>
<p>​        (b) <code>yum    install    -y    软件包名</code>    ：安装并确认</p>
<p>​            ◆ <code>yum    install    java</code></p>
<p>​            ◆ <code>yum    install    -y    python</code></p>
<p>​    C. <font color="red"><strong>更新</strong></font>：</p>
<p>​        (a) <code>yum    update</code>    ：升级所有软件</p>
<p>​        (b) <code>yum    update    软件包名</code>    ：升级更新指定软件</p>
<p>​        (c) 例：<code>yum    update    kernel</code></p>
<p>​                    <code>yum    update    bash</code></p>
<p>​    D. <font color="red"><strong>卸载</strong></font>：<code>yum    remove    软件包名</code></p>
<p>​    E. <font color="orange"> *yum命令安装下载RPM包：</font></p>
<p>​        (a) 格式1：<code>yum    install    软件包名.rpm</code></p>
<p>​        (b) 格式2：<code>yum    installl    URL/软件包名.rpm</code></p>
<p>​    安装wps Linux版：</p>
<p>​    网址：<a href="https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office-11.1.0.8722-1.x86_64.rpm" target="_blank" rel="noopener">https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office-11.1.0.8722-1.x86_64.rpm</a></p>
<p>​    <code>yum    install    https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office-11.1.0.8722-1.x86_64.rpm</code></p>
<p>(4) <font color="orange"> <strong>YUM安装软件包组</strong>：</font></p>
<p>​    A. 命令格式：</p>
<p>​        (a) <code>yum    grouplist</code>    ：列出所有可以使用的包组</p>
<p>​        (b) <code>yum    grouplist    包组名</code>    ：列出软件包组的软件信息</p>
<p>​        (c) <code>yum    groupinstall    包组名</code>    ：安装软件包组</p>
<p>​        (d) <code>yum    groupremove    包组名</code>    ：卸载软件包组</p>
<p>​    B. 意义：安装大型项目时，所需的软件很多，此时通过单个软件安装非常麻烦，如：GNOME    x-WINDOWS等大型软件，可以通过软件包组进行安装</p>
<p>​    C. <strong>安装图形化界面</strong></p>
<p>​        (a) 查询：<code>yum    grouplist</code></p>
<p>​        (b) 安装：<code>yum    groupinstall    GNOME    Desktop</code></p>
<p>​        (c) 启动：<code>startx</code></p>
<p>(5) yum配置文件分析：</p>
<p>​    A. 路径：<code>/etc/repos.d/CentOS-Base.repo</code></p>
<p>​    B. 分析：</p>
<p>​        (a) <code>[base]</code> ：表示yum软件库的名称，[]不能省略，内容任意，但不能相同</p>
<p>​        (b) <code>name</code> ：描述软件库意义，可省略</p>
<p>​        (c) <code>mirrorlist=</code> ：映射方式，可省略</p>
<p>​        (d) <code>baseurl =</code> ：<font color="red">表示软件库的域名网址，非常重要！</font></p>
<p>​        (e) <code>enable=1</code>  ：启用该库，<code>enable=0</code> ：不启用</p>
<p>​        (f) <code>gpgcheck=1</code> ：检查软件的数字签名，<code>gpgcheck=0</code> ：不检查</p>
<p>​        (g) <code>gpgkey=</code> ：检查数字签名时所需的公钥文件位置，不检查数字签名时，可省略</p>
<p>​        (h)注意：其他库如：升级库（update）、附加库（extras）意义同此库（base）</p>
<p>​    C. <strong>利用本地光盘镜像搭建yum仓库：（断网可用）</strong></p>
<p>​        (a) 挂载本地光盘：<code>mount    /dev/sr0    /media</code></p>
<p>​        (b) 清空yum缓存：<code>yum    clean    all</code></p>
<p>​        (c) <code>cd    /etc</code></p>
<p>​        (d) 备份原有配置文件目录：<code>mv    yum.repos.d    yum.repos.d.back</code></p>
<p>​        (e) 新建配置文件目录：<code>mkdir    yum.repos.d</code></p>
<p>​        (f) <code>cd    yum.repos.d</code></p>
<p>​        (g) 新建yum配置文件：<code>vim    DVD.repo</code>    输入以下内容：</p>
<p>​                <code>[DVD]</code></p>
<p>​                <code>baseurl=file:///media</code></p>
<p>​                <code>enabled=1</code></p>
<p>​                <code>gpgcheck=0</code></p>
<p>​                保存退出</p>
<p>​        (h) 新建yum缓存：<code>yum    makecache</code></p>
<p>​        (i) 查看是否启用：<code>yum    repolist    all</code></p>
<p>​        (j) 尝试下载安装软件：<code>yum    install    tftp</code></p>
</li>
</ol>
<p>   ​    </p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>js布尔值和自定义属性</title>
    <url>/2019/07/21/js%E5%B8%83%E5%B0%94%E5%80%BC%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<ul>
<li><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4></li>
</ul>
<ol>
<li><font color="orange"><strong>布尔值类型:</strong></font><ul>
<li><code>Boolean(value)</code>把值转换成Boolean型</li>
<li>Boolean方法和之前的Number方法和String方法进行数值类型转换时，都将创建一个新值，存放由原始值直接转换成的值。</li>
<li>在进行比较时，也会得到一个布尔值，如&gt;、&lt;、或都会让字符串和数字的比较结果正确显示，<font color="red">但两个字符串不行(因为字符串是没有固定大小的原始类型)</font>，如：’10’&gt;9和’10’&gt;’9’，前者为true后者为false，字符串之间的比较是从左向右一位一位的比较unicode编码大小</li>
<li>!取反，布尔值的隐形转换方法，取反之前若转换布尔值为真，则取反后的结果一定是布尔值且为假</li>
<li><strong>==</strong>如果两边<strong>数值相同</strong>(即使不同类型，如：’2’和2(，就相等，在判断前将两边转换成了数字</li>
<li><strong>===</strong>会判断<strong>类型</strong>，<font size="4">类型不同即使数值相同也返回false</font></li>
</ul>
</li>
<li><font color="orange"><strong>布尔值转换规则：</strong></font><ul>
<li>数据类型–<strong>数字</strong>：<strong>除了NaN和0都是真</strong></li>
<li>数据类型–<strong>字符串</strong>：<strong>所有非空字符串都是真</strong></li>
<li>数据类型–<strong>布尔值</strong>：<strong>true和false</strong></li>
<li>数据类型–对象(<strong>函数</strong>)：<strong>true</strong></li>
<li>数据类型–对象(<strong>element</strong>)：能找到的就是true，找不到的是false(找不到的就是null)；</li>
<li><strong>数据类型–对象([]和{})：true</strong></li>
<li>数据类型–对象(<strong>null</strong>) ：<strong>false</strong></li>
<li>数据类型–未定义(<strong>undefined</strong>)：<strong>false</strong></li>
</ul>
</li>
<li><font color="orange"><strong>比较：</strong></font>比较会在判断前==将两边转换成数字==然后比较其值，<font color="red"><strong>但是有几种情况比较特殊</strong></font><ul>
<li>如果两边有<code>null</code>和<code>undefined</code>时，不会发生转换数字的，因此null和undefined只与自己和对方相等</li>
<li>由于字符串没有固定大小，因此转数字会变成NaN，所以它也不会发生数字类型转换，而是从左向右一位一位的比较unicode编码大小</li>
<li>由于对象转换数字也是NaN，因此如果两边都为对象的时候也不会发生数字类型转换，而是按照对象在内存中的地址比较，<strong>地址相同即相等</strong>，否则不等</li>
</ul>
</li>
</ol>
<p><font color="green"><strong>数据类型转换的注意事项：</strong></font></p>
<ol>
<li><p>不要用<code>new Number()/Boolean()/String()</code>等构造函数实例化的方式去创建包装对象，因为这样创建出来的是object类型</p>
</li>
<li><p>判断Array（数组是数组）使用<code>Array.isArray(arr)</code></p>
</li>
<li><p>判断null请使用<code>myVar === null</code></p>
</li>
<li><p>number对象(非变量(调用<code>toString()</code>报SyntaxError：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">123.</span>toString(); <span class="comment">// 报SyntaxError</span></span><br><span class="line"><span class="comment">//遇到这种情况，要特殊处理一下：</span></span><br><span class="line"><span class="number">123.</span>.toString(); <span class="comment">// '123', 注意是两个点！</span></span><br><span class="line">(<span class="number">123</span>).toString(); <span class="comment">// '123'</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<ul>
<li><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4></li>
</ul>
<ol>
<li><p>人为给元素上定义本来不存在的属性就是自定义属性，自定义属性一般根据语义去取名，语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.自定义属性 = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>注意：自定义属性的操作如同原本属性一样</p>
</li>
<li><p>可以为元素添加任意数量的自定义属性，它是js向html添加值的方式之一</p>
</li>
<li><p>使用范例：索引值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    元素[i].index = i;  <span class="comment">//为每一个对象建立"匹配"/"对应"关系</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：后面循环几乎都会用到索引值</p>
</li>
<li><p>循环中的问题，如果在循环时绑定事件函数，循环是在页面刷新时执行的，而函数执行时循环已经结束，这时i的值已经变成最后一个数字，在函数内使用就是出现问题。</p>
</li>
<li><p>解决方法就是使用自定义属性，将i的值在循环时保存下来，在函数内部需要的时候使用该自定义属性</p>
</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p><font size="4">1. 如何让’10’&gt;’9’正确的比较出大小，试着用多种方法来实现</font></p>
<p>看下面代码说出结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>==<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>==<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"123"</span>==<span class="string">"0123"</span>);</span><br><span class="line"><span class="built_in">console</span>.log([]==[]);</span><br><span class="line"><span class="built_in">console</span>.log([]==![]);</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 做3个按钮，起始value为0，每次点击时对应按钮的value值+1</font></p>
<p><font size="4">3. 在上题的基础上增加一个数组[“A”,”B”,”C”,”D”]，要求每个按钮在点击时，让其value值显示为数组数据的循环(A-&gt;B-&gt;C-&gt;D-&gt;A循环)</font></p>
<p><font size="4">4. 在点击按钮(3个)时用索引值把arr(3个)里的数据输入到p(3个)标签里</font></p>
<p><font size="4">5. 写一个img标签并将其图片信息和图片数量等进行布局；按照图片数量动态生成按钮，并写个数组保存图片信息；设置active的样式为红色背景白色字体，第一个按钮的class=”active”，并在点击其他按钮时切换active；尽量使用函数去把代码合并，并在点击按钮时用索引值的一一对应来做当图片切换时同步切换图片信息和图片的数量</font></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）Markdown语法</title>
    <url>/2019/07/20/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="本文转自：简书"><a href="#本文转自：简书" class="headerlink" title="本文转自：简书"></a>本文转自：简书</h2><h2 id="作者：高鸿祥"><a href="#作者：高鸿祥" class="headerlink" title="作者：高鸿祥"></a>作者：高鸿祥</h2><h2 id="链接：https-www-jianshu-com-p-191d1e21f7ed"><a href="#链接：https-www-jianshu-com-p-191d1e21f7ed" class="headerlink" title="链接：https://www.jianshu.com/p/191d1e21f7ed"></a>链接：<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a></h2><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前面加#来表示<br> 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br> <em>这是倾斜的文字</em><br> <strong>这是斜体加粗的文字</strong><br> <del>这是加删除线的文字</del></p>
<hr>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br> n个…<br> 貌似可以一直加下去，但没神马卵用</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>效果如下：<br> 可以看到，显示效果是一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="img"></p>
<p>blockchain</p>
<p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank" rel="noopener">简书</a><br> <a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p>
<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><ul>
<li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5></li>
</ul>
<p>语法：<br> 无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5></li>
</ul>
<p>语法：<br> 数字加点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>1.列表内容<br> 2.列表内容<br> 3.列表内容</p>
<ul>
<li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5></li>
</ul>
<p><strong>上一级和下一级之间敲三个空格即可</strong></p>
<ul>
<li>一级无序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<hr>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td align="center">骂</td>
<td align="right">三弟</td>
</tr>
</tbody></table>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
</blockquote>
<p>示例：</p>
<p>单行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`create database hero;`</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>单行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database hero;</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">  echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure>

<p>```</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>js数据类型详解和数据类型转换</title>
    <url>/2019/07/20/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<ul>
<li><h4 id="数据类型详解"><a href="#数据类型详解" class="headerlink" title="数据类型详解"></a>数据类型详解</h4></li>
</ul>
<ol>
<li><strong>未定义：<code>undefined</code></strong>，如 <code>var n</code> ; 就是一种状态，通常指出错了，出现的情况：<ul>
<li>当变量定义但未赋值时，该变量的值被格式化为<code>undefined</code>；</li>
<li>对一个没有声明的变量调用<code>typeof</code>时，返回值也是<code>undefined</code>；</li>
<li>当函数无明确返回值时，返回值也是<code>undefiend</code></li>
</ul>
</li>
<li><strong>空对象：<code>null</code></strong><code>，如 var n = null</code>; 不存在的<code>object</code>，通常是人为设置的空<ul>
<li>虽然<code>null</code>判断类型为对象，但是它不能添加自定义属性</li>
<li>表示尚未存在的对象，如果函数要返回对象，那么找不到该对象时，返回的值通常是<code>null</code></li>
</ul>
</li>
<li><strong>字符串类型：<code>string</code></strong>，如 <code>var s =&quot;nihao&quot;</code>; 由零或多个 16位 Unicode 字符组成的字符序列<ul>
<li><code>string</code>是唯一没有固定大小的原始类型，字符串的字面量声明可以由双引号””或单引号’’组成</li>
<li><code>length</code>属性：输出字符串的长度，空格也算长度</li>
<li><code>charAt()</code>方法：输出()里下标处的字符（在最新的js版本中支持使用数组的[]来获取下标处的字符，s[i]）</li>
</ul>
</li>
<li><strong>布尔值：<code>boolean</code></strong>，如 <code>var b = true;</code> 只有<code>true</code>和<code>false</code>两个值。在if判断的条件和for循环的两个;之间都是布尔值，这些需要布尔值的地方会自动被转换</li>
<li><strong>数字类型：<code>number</code></strong>，如 <code>var i = 100;</code> 不区分整形和浮点，<code>number</code>可以表示32位的整数，也可以表示64位的浮点数。</li>
<li><strong>对象类型：<code>object</code></strong>（包括<code>Array</code>、<code>Function</code>、<code>Date</code>、<code>Json</code>等），如 <code>var obj1 = {};</code><ul>
<li>对象（<code>object</code>）是js的基本数据类型之一。它是一种复合值：把多个值（原始值或者其他对象）聚合在一起，并通过名字（key）访问这些值。</li>
<li>对象也可看做是属性的无序集合，每个属性都是一个名/值对。属性名是字符串，因此我们可以把对象看成是从字符串到值的映射</li>
<li><code>object</code>可以像我们页面元素一样<font color="orange"><strong>添加自定义属性</strong></font>，如：<code>obj.abc = 123;</code> 或 <code>obj={&quot;abc&quot; : 123};</code></li>
<li>我们之前获取元素通过点操作（<code>obj .name</code>）和通过中括号操作（<code>obj[&quot;name&quot;]</code>）同样适用于所有对象</li>
<li>当一个函数被一个对象所拥有，那么该函数也被称为方法，同时该函数被调用时内部的this指向会指向该对象</li>
</ul>
</li>
</ol>
<hr>
<ul>
<li><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4></li>
</ul>
<ol>
<li><p>如页面元素的<code>block</code>、<code>inline</code>这些类型，当我们需要相应的类型时就要进行数据类型转换</p>
</li>
<li><p><strong>在JavaScript中，boolean值，数字和字符串的原始值都是伪对象</strong>，这意味着它们实际上具有属性和方法，如：”blue”.length;</p>
</li>
<li><p><strong>转换字符串类型</strong>：</p>
<ul>
<li><p>三种值类型（字符串、数组和布尔值）都具有<font color="green"><strong><code>toString</code>方法，可以将自身转换为字符串</strong></font>，如Number的<code>toString</code>方法:</p>
<p><font color="red">注意：null和undefined没有toString方法</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(iNum.toString());  <span class="comment">//输出字符串"10"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="green"><strong><code>String()</code>强制类型转换</strong></font>与<code>toString()</code>方法的唯一不同之处在于，<font color="red">对null或undefined值强制类型转换可以生成字符串而不引发错误</font>，如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="literal">null</span>.toString();   <span class="comment">//错误</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">String</span>(<span class="literal">null</span>);      <span class="comment">//得到"null"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>与上面强制类型转换（即显形转换）对应的<font color="green"><strong>字符串的隐形转换+（字符串连字符）</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"100"</span>; </span><br><span class="line">alert(s + <span class="number">100</span>) ; <span class="comment">//输出"100100"</span></span><br><span class="line">alert(<span class="literal">null</span> + <span class="string">"1"</span>);		<span class="comment">//将数字1本身转换为字符串</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：由于+是字符串连接符，因此我们要做数字相加时，必须保证加号两边的都是数字</font></p>
</li>
</ul>
</li>
<li><p><strong>转换数字类型</strong>：</p>
<ul>
<li><p><font color="green"><strong><code>Number()</code>方法，尽可能的将传入的值整体转换成数字。</strong></font>其转换规则为：</p>
<ul>
<li>数据类型–字符串：””（空）和” “（空格）都会转换成0；数字字符串会转换成对应数字；<font color="blue">非数字字符串转换成<code>NaN</code>（not a number），NaN != NaN</font></li>
<li>数据类型–布尔值：true和false会变成1和0</li>
<li>数据类型–空对象：null会被变成0</li>
<li>数据类型–对象(函数、json和其他对象)：NaN</li>
<li>数据类型–未定义：undefined（未定义）会变成NaN</li>
<li>数据类型–数组：如果为空转换成0；只有一个数据（字符串、null或undefined）时字符串会根据之前的规则一样去转，<strong>空、null和undefined会转换成0</strong>；有多个数据时转成NaN</li>
</ul>
<p>使用方法如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"100"</span>;</span><br><span class="line">alert（<span class="built_in">Number</span>（s）+<span class="number">100</span>）;  <span class="comment">//输出结果为数字200</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>));	<span class="comment">//输出结果是0</span></span><br><span class="line">cnsole.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>));	<span class="comment">//输出结果是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"100px"</span><span class="number">-1</span>));	<span class="comment">//输出结果为NaN</span></span><br></pre></td></tr></table></figure>

<p><code>Number</code>不合适的地方：当一个字符串是<code>var b = &quot;100px&quot;</code>，会变成NaN，因此转换字符串时Number用的比较少，而一般用下面两个方法</p>
</li>
<li><p><font color="green"><strong><code>parseInt()</code>：将字符串转换成整数</strong></font>，转换规则为：</p>
<ul>
<li><p><strong>会从左到右依次判断每个字符，碰到非数字后会将前面的数字输出(会认识一些特殊符号，如+-空格)</strong></p>
</li>
<li><p>若数据不是字符串会返回NaN</p>
</li>
<li><p>只会保留整数，小数点和其后面的部分会被舍去</p>
</li>
<li><p>最好写成<code>parseInt(b,10)</code>，后面代表10进制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="string">"fff"</span>;</span><br><span class="line"><span class="comment">/* 将16进制数转换为十进制数 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(i,<span class="number">16</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><font color="green"><strong><code>parseFloat()</code>：与<code>parseInt</code>一样，但是会保留第1个小数点后面的数字</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i1  = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> i2 = <span class="string">"10.01"</span>;</span><br><span class="line"><span class="keyword">var</span> i3 = <span class="string">"100px"</span>;</span><br><span class="line"><span class="comment">//字符串转数字的强制类型转换</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(i3));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(i2));</span><br></pre></td></tr></table></figure>
</li>
<li><p>除上面的强制类型转换方法，<font color="orange"><strong>+(正号)、-(负号)、-、*、/、%、++、–</strong></font>也会让数字字符串和数字字符串或数字的运算结果变成数字类型，既<font color="orange"><strong>数字类型的隐形转换</strong></font><br><font color="blue"><strong>注意：+在两边有字符串时会变成字符串的隐性转换，但是作为正号或者两边没有字符串时，也是数字类型的隐形转换</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"10"</span>;</span><br><span class="line"><span class="comment">/* 表示a加正c，也就是把字符串10转换为数字10 */</span></span><br><span class="line"><span class="built_in">console</span>.log(a+ +c);		<span class="comment">//输出结果为数字20</span></span><br><span class="line"><span class="built_in">console</span>(<span class="string">"100px"</span><span class="number">-1</span>);		<span class="comment">//输出结果为NaN，跟number方法一样</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>无论是哪种转换方法，<font color="red">转换数字失败就会返回NaN，NaN（not a number）它是转换数字类型转换失败的产物，但依然变成了number类型</font>，它一旦出现代表你的代码进行了非法的操作</p>
</li>
<li><p><font size="4">NaN转换布尔类型为false，它与它本身不相等（而其他所有类型与自己都相等）</font></p>
</li>
<li><p><code>isNaN():is not a number</code>，用来判断一个<strong>number类型</strong>是不是非数字，不是数字返回true，是数字则返回false。若判断的值不是number类型，会找Number判断，如果转换后的结果是NaN则返回true</p>
</li>
</ul>
</li>
</ol>
<hr>
<p><font size="5" color="gree">练习：</font></p>
<p><font size="4">1. 做一个input输入框和按钮，判断输入值是不是都是由数字字符组成的字符串，当判断的结果是数字时，再弹出是不是整数</font></p>
<p>​    a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"确定"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    b. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</span><br><span class="line"><span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span><br><span class="line">oBtn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// if(parseFloat(oBtn1.value)== oBtn1.value)</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Number</span>(oBtn1.value) == <span class="built_in">Number</span>(oBtn1.value))</span><br><span class="line">    &#123;</span><br><span class="line">        alert(<span class="string">"是数字字符组成的字符串"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(oBtn1.value) == oBtn1.value)&#123;</span><br><span class="line">           alert(<span class="string">"是整数"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">           alert(<span class="string">"不是整数"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         alert(<span class="string">"不是数字字符组成的字符串"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">2. 看下面题，说出结果：</font></p>
<p>1 + “23”;         结果：123</p>
<p>null * 0;         结果：0</p>
<p>true + “ “;         结果：true空格</p>
<p>true * “ “;         结果：0</p>
<p>undefined + 0;     结果：NaN</p>
<p>20 + -“20”;             结果：0</p>
<p>20 + +”20”            结果：40</p>
<p><font size="4">3. 有一个数组arr = [ ‘100px’, ‘abc’-6, [], -98765, 34, -2, 0, ‘300’, , function(){alert(1);}, null, document, [], true, ‘200px’-30,’23.45元’, 5, <em>Number</em>(‘abc’), function(){ alert(3); }, ‘xyz’-90 ];    </font></p>
<p>要求：    1、找到arr里所有的数字：-98765, 34, -2, 0, 5</p>
<pre><code>2、找到可以转成数字的：&apos;100px&apos;, -98765, 34, -2, 0, &apos;300&apos;, &apos;23.45元&apos;,  5 

3、把转成数字以后，最大值判断出来：300

4、把 NaN 所在的位置找出来：1 14 17  19&lt;/font&gt;</code></pre><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [ <span class="string">'100px'</span>, <span class="string">'abc'</span><span class="number">-6</span>, [], <span class="number">-98765</span>, <span class="number">34</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="string">'300'</span>, , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>);&#125;, <span class="literal">null</span>, <span class="built_in">document</span>, [], <span class="literal">true</span>, <span class="string">'200px'</span><span class="number">-30</span>,<span class="string">'23.45元'</span>, <span class="number">5</span>, <span class="built_in">Number</span>(<span class="string">'abc'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">3</span>); &#125;, <span class="string">'xyz'</span><span class="number">-90</span> ];</span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"><span class="keyword">var</span> arr3 = [];</span><br><span class="line"><span class="keyword">var</span> find = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">	<span class="comment">// 找到arr里所有的数字</span></span><br><span class="line">	<span class="keyword">if</span>((<span class="keyword">typeof</span>(arr[i]) == <span class="string">"number"</span>) &amp;&amp; !<span class="built_in">isNaN</span>(arr[i]))&#123;</span><br><span class="line">		arr1.push(arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 找到可以转成数字的</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(arr[i])) )&#123;</span><br><span class="line">		arr2.push(arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//把 NaN 所在的位置找出来</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNaN</span>(<span class="built_in">Number</span>(arr[i])) &amp;&amp; (<span class="keyword">typeof</span>(arr[i]) == <span class="string">"number"</span>))&#123;</span><br><span class="line">		find.push(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr1)&#123;</span><br><span class="line">	arr2.push(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转成数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr2)&#123;</span><br><span class="line">	arr3[i] = <span class="built_in">parseFloat</span>(arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把转成数字以后，最大值判断出来：300</span></span><br><span class="line"><span class="keyword">var</span> max = arr3[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr3.length;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(max&lt;arr3[i])&#123;</span><br><span class="line">		max = arr3[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="built_in">console</span>.log(find);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js流程控制、JSON和this</title>
    <url>/2019/07/20/js%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81JSON%E5%92%8Cthis/</url>
    <content><![CDATA[<ul>
<li><h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4></li>
</ul>
<ol>
<li><p>流程控制就是程序代码执行顺序：顺序结构：按照书写顺序来执行，是程序中最基本的流程结构；循环：<code>[do ]while/for[ in]</code>；判断：<code>if/switch</code></p>
</li>
<li><p><code>while</code>的循环和<code>for</code>循环的写法区别：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;   <span class="comment">//while方法</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">    alert(i); </span><br><span class="line">    i++;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;  <span class="comment">//do while方法</span></span><br><span class="line"><span class="keyword">do</span>&#123;  <span class="comment">//先执行do里的在判断，因此至少会执行一次</span></span><br><span class="line">   alert(i); </span><br><span class="line">   i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  <span class="comment">//for方法</span></span><br><span class="line">    alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>switch</code>判断和<code>if</code>判断的写法区别：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(str)&#123;   <span class="comment">//switch方法</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">"js"</span>: <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"html"</span>: <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: alert(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(str==<span class="string">"js"</span>)&#123;  <span class="comment">//if方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">"html"</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    alert(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字：<code>case</code> (判断变量的值)；<code>break</code>(跳出，上面判断成功后不再继续判断后续)、 <code>default</code>(否则，上面判断都未通过时执行)；<code>continue</code>(跳过)例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="comment">//当i为4的时候跳出该循环，若用continue则是跳过后续代码，继续循环</span></span><br><span class="line">    alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<ul>
<li><strong><code>JSON</code>对象</strong></li>
</ul>
<ol>
<li><p><code>JSON</code>是JavaScript Object Notation的缩写：它被发明之前一直是用XML来传递数据，一种纯文本格式，本身不复杂，但加上各种规范以后变得非常复杂。</p>
</li>
<li><p>道格拉斯·克罗克福特(Douglas Crockford)在2002年发明了JSON这种超轻量级的数据交换格式。它基于ECMAScript的一个子集，采用完全独立的文本格式，但是也使用了类似于C语言家族的习惯(包括C、C++、C#、Java、JavaScript、Perl、Python等)，这些特性使JSON成了理想的数据交换语言。易于阅读和编写，同时也易于机器解析和生成，并能提升网络传输速率。由于JSON非常简单，很快风靡Web世界。</p>
</li>
<li><p>json的语法：<code>key==&gt;value</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"cromwell"</span>, </span><br><span class="line">    <span class="string">"say"</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>“:”前面是属性名，后面可以是任何数据格式(例子中是字符串和函数)，<font color="red"><code>json.name</code>可输出该属性的值，<code>json.say()</code>可调用该函数，</font>非常方便。注意：定义的属性名称在严格模式下必须使用””，兼容性和安全性好；<code>json[]</code>调用数据的时候和对象的属性写法相同既：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">json[<span class="string">"name"</span>];  <span class="comment">//获取json属性name的值</span></span><br><span class="line">json.name = <span class="string">"新值"</span>; <span class="comment">//可以用来改写json的name属性的值，赋值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用<code>json</code>可以包括数组，数组也可以包括<code>json</code>，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[&#123;<span class="string">"name"</span>:<span class="string">"abc"</span>,<span class="string">"age"</span>:<span class="number">20</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"bcd"</span>,<span class="string">"age"</span>:<span class="number">30</span>&#125;]; <span class="comment">//数组嵌套json</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;<span class="string">"a"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">"b"</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;;  		<span class="comment">//json嵌套数组</span></span><br></pre></td></tr></table></figure>

<p>这时我们如果想拿到<code>name</code>的值”abc”就要写成<code>arr[0].name</code>了</p>
</li>
<li><p><strong>for in循环</strong>：<font color="orange">我们获取一下json的length发现json没有长度，因此无法使用for循环遍历json</font>。for循环里使用数字i作为循环的变量对应下标，而for in循环则使用<code>attr</code>就是属性名称来对应j<code>son</code>的属性名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</span><br><span class="line">       alert(attr+<span class="string">":"</span>+json[attr])</span><br><span class="line">   &#125;;</span><br><span class="line"><span class="comment">//window和document就是两个带有很多属性的对象，我们可以输出一下看看</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>   <font color="red">注意：数组用<code>for</code>和<code>for in</code>都可以遍历，用for in时属性名称就是下标；嵌套式的json和数组需要for in和for循环配合来遍历</font></p>
<hr>
<ul>
<li><h4 id="this是什么？"><a href="#this是什么？" class="headerlink" title="this是什么？"></a>this是什么？</h4></li>
</ul>
<ol>
<li><p>全局对象的<code>this</code>，是一个比较特殊的存在。<strong>全局环境中的<code>this</code>，指向window</strong>。</p>
</li>
<li><p>在函数<code>(fn1)</code>内部的this分成三种情况：</p>
<ul>
<li><p>直接调用：<strong><code>fn1()</code></strong>，其内部的<code>this</code>会指向<code>undefined</code>。但是在默认非严格模式中，当<code>this</code>指向<code>undefined</code>时，它会被自动指向全局对象既window</p>
</li>
<li><p>事件调用：<strong><code>obj.事件=fn1</code></strong>，<font color="gree">内部的this指向调用函数的该对象</font></p>
</li>
<li><p>调用某对象拥有的函数：<strong><code>obj.fn1()</code></strong>，那么该函数在调用时，<font color="gree">内部的this指向该对象</font>，该写法也称为函数表达式，写法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;  <span class="comment">//函数表达式</span></span><br><span class="line">obj.fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;  <span class="comment">//函数表达式</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<hr>
<p><font color="gree" size="5">练习：</font></p>
<p>​    <font size="4">1. 把<code>JSON</code>嵌套式的数组和<code>JSON</code>遍历出来</font></p>
<p>​        JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组嵌套json   </span></span><br><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">        <span class="string">"a"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="string">"b"</span> : <span class="number">2</span>,</span><br><span class="line">        <span class="string">"c"</span> : <span class="number">3</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">"d"</span> : <span class="number">4</span>,</span><br><span class="line">        <span class="string">"e"</span> : <span class="number">5</span>,</span><br><span class="line">    &#125;];</span><br><span class="line"><span class="comment">//json嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">"arr1"</span> : [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>],</span><br><span class="line">        <span class="string">"arr2"</span> : [<span class="string">"d"</span>,<span class="string">"e"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//先遍历数组，再</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> arr[i])&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arr[i][attr]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;obj[attr].length;i++)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(attr+ <span class="string">":"</span> + obj[attr][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>​    <font size="4">2. 创建一个全局属性(<code>var a = &quot;tw&quot;</code>)，创建一个对象(<code>obj</code>)即其属性(<code>obj.a = &quot;to&quot;</code>)和方法(<code>obj.saya = function(){console.log(this.a)}</code>)，说出调用该方法时<code>this</code>是谁</font></p>
<p>​        JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js数组和循环</title>
    <url>/2019/07/20/js%E6%95%B0%E7%BB%84%E5%92%8C%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<ul>
<li><h4 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h4></li>
</ul>
<ol>
<li><p><font color="orange">声明一个数组的变量：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [];  <span class="comment">//字面量写法</span></span><br><span class="line">ar arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>();  <span class="comment">//构造函数实例化写法</span></span><br></pre></td></tr></table></figure>

<p>注意：第一种写法等号右边就可以认为是字面量，字面量就是可以通过该值来判断它的类型；构造函数会在后面详细说明</p>
</li>
<li><p>数组是数据仓库，可以放任意多个任意数据类型的数据，甚至是其他数组；数据之间用”,”分隔；数组也是对象的一种，属性length为数组数据的数量，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"第一个数据"</span>,<span class="string">"第二个数据"</span>,<span class="string">"第三个数据"</span>]; <span class="comment">//可以通过arr[下标]来获取对应位置的数据</span></span><br></pre></td></tr></table></figure>

<p>注意：js中(包括数组)，在计数的时候都是从0开始，所以arr[0]==&gt;”第一个数据”</p>
</li>
<li><p><font color="orange">数组的添加和修改方法：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.push(<span class="string">"第四个数据"</span>);  <span class="comment">//从数组最后添加新数据("第四个数据")</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"第零个数据"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<ul>
<li><h4 id="类数组-伪数组"><a href="#类数组-伪数组" class="headerlink" title="类数组(伪数组)"></a>类数组(伪数组)</h4></li>
</ul>
<ol>
<li><p><font color="orange"><strong>用标签名来获取元素</strong>：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">""</span>);</span><br></pre></td></tr></table></figure>

<p>注意：<strong>该方法获得的不是一个元素</strong>，因此不能直接拿来操作，<strong>可以用数组的[下标]来拿到你想操作的对象</strong></p>
<p><font color="green">例~  获取p元素：</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>)[<span class="number">0</span>];	<span class="comment">//获取p元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>它不是数组，却和数组很像，是类数组(也叫伪数组)的一种，<font color="orange"><strong>伪数组可以被转化成数组</strong></font>，语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call()  <span class="comment">//把类数组放在括号里并用变量接收数组结果</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>该方法(<code>document.getElementByTagName</code>)与<code>document.getElementById</code>的区别：</p>
<ul>
<li><code>document.getElementById</code>：<ul>
<li><font color="red">前面必须是<code>document</code></font>；</li>
<li>获取的只有一个元素(id在同一个页面中也是<strong>唯一</strong>的)；</li>
<li>无法选中动态创建的元素(如通过<code>innerHTML</code>生成的标签)</li>
</ul>
</li>
<li><code>document.getElementsByTagName</code><ul>
<li><font color="red">前面可以是另一个元素</font>；</li>
<li><code>ByTagName</code>获取的可能是多个(无论是一个和多个都会变成类数组)，需要加上[]和数字或者遍历(既循环)来控制；</li>
<li><code>ByTagName</code>可以选中动态创建的元素</li>
</ul>
</li>
</ul>
</li>
<li><p>另外特殊标签选取：在页面中<strong>唯一的标签</strong>如body、title：可以用<code>document.body</code>和<code>document.title</code>获取到该元素。<font color="blue">注意：虽然<code>html</code>也是唯一标签，但是必须通过<code>document.documentElement</code>才能获取</font></p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4></li>
</ul>
<ol>
<li><p>当我们需要重复执行某些代码或连续执行的代码有数字在变化时，就可以使用循环，语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;反复执行的代码块......&#125;</span><br></pre></td></tr></table></figure>

<p>注意：()里用两个;将其分成3个部分，第一个部分是初始变量，第二个为判断条件(为真就会继续循环)，第三个为变量的变化</p>
</li>
<li><p><font color="orange"><strong>循环经常被用做给数组或类数组遍历</strong></font>，如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aDiv.length;i++)&#123;</span><br><span class="line">    aDiv[i]......  <span class="comment">//aDiv的每个数据执行某代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="green">注意：不要漏写[]，否则就变成让数组或类数组执行某代码了</font></p>
</li>
<li><p><font color="gree">例~我们先用for循环和<code>body.innerHTML</code>属性为body添加100个按钮，并一点一点增加数量</font>，你会发现下面写法会使电脑速度越来越慢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML += <span class="string">"&lt;input type='button' value='按钮'/&gt;"</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>原因就是循环去修改DOM树的做法在数量过多时太耗性能，可以<font color="purple"><strong>先循环将要添加的字符串预先连接后保存到str变量里，再一次修改DOM树就可以了</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;  <span class="comment">//用字面量的写法创建一个空字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    str += <span class="string">"&lt;input type='button' value='按钮'/&gt;"</span>; <span class="comment">//在循环中反复拼接字符串</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML =str;  <span class="comment">//最后一次性将字符串添加到body里</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript的for循环如果要遍历一个嵌套的数组，需要用两次for循环来遍历数据，执行第一个for时变量需小于<code>arr.length</code>，而执行第二个for时变量则需要小于<code>arr[i].length</code>，最后输出arr[i][j]：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;  <span class="comment">//第一次遍历出的arr[i]也都是数组，因此开启第二个循环</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;  <span class="comment">//遍历arr[i]，将其中的数据都遍历出来</span></span><br><span class="line">      arr[i][j]......</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：多个并列的for循环可以用相同的变量i，但是循环的嵌套就必须要换变量名了(如上面的j)</font></p>
</li>
</ol>
<hr>
<p><font size="4"><strong>附：</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil();	<span class="comment">//向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor();	<span class="comment">//向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.round();	<span class="comment">//四舍五入</span></span><br></pre></td></tr></table></figure>

<hr>
<p><font size="5" color="gree">练习：</font></p>
<p>​    <font size="4">1. （循环的DOM操作）在页面的body里创建20个li元素，让他们呈现一个楼梯效果 </font></p>
<p>​        a.HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">list-style</span>: none;</span><br><span class="line">   <span class="attribute">background-color</span>: green;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        c.JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</span><br><span class="line"><span class="comment">/* 获取所有的li元素 */</span></span><br><span class="line"><span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">/* 生成li元素 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">   str += <span class="string">"&lt;li&gt;&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">oUl.innerHTML = str;</span><br><span class="line"><span class="comment">/* 再用循环设置定位 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">   aLi[i].style.left = i*<span class="number">50</span> + <span class="string">"px"</span>;</span><br><span class="line">   aLi[i].style.top =i*<span class="number">50</span> + <span class="string">"px"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <font size="4">2. 将上题的li元素减少为7个，且呈现V形</font></p>
<p>​        JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</span><br><span class="line"><span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">   str += <span class="string">"&lt;li&gt;&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">oUl.innerHTML = str;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">   aLi[i].style.left = i*<span class="number">50</span> + <span class="string">"px"</span>; </span><br><span class="line">   <span class="keyword">if</span>(i&lt;<span class="number">4</span>)&#123;</span><br><span class="line">      aLi[i].style.top =i*<span class="number">50</span> + <span class="string">"px"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      aLi[i].style.top = aLi[<span class="number">6</span>-i].style.top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <font size="4">3. 动态创建50个li，每行显示10个li，每两个li间距1像素</font></p>
<p>​        a.HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">   <span class="attribute">list-style</span>: none;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: green;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        c. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</span><br><span class="line"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line">   str += <span class="string">"&lt;li&gt;&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">oUl.innerHTML = str;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;oLi.length;i++)&#123;</span><br><span class="line">    <span class="comment">/* 每一列的个位数相等，只需要取余获得个位数即可 */</span></span><br><span class="line">   oLi[i].style.left = i%<span class="number">10</span> * <span class="number">51</span>+ <span class="string">"px"</span>;</span><br><span class="line">    <span class="comment">/* 每一行的十位数相等，只需要除运算获得十位数即可 */</span></span><br><span class="line">   oLi[i].style.top = <span class="built_in">Math</span>.floor(i/<span class="number">10</span>) * <span class="number">51</span> +<span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>4. **var arr1 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];var arr2 = [&quot;d&quot;,&quot;e&quot;]得到var arr = [&quot;ad&quot;,&quot;ae&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;cd&quot;,&quot;ce&quot;]**</code></pre><p><font size="4">4. var arr1 = [“a”,”b”,”c”];var arr2 = [“a”,”e”]得到var arr = [“ad”,”ae”,”bd”,”be”,”cd”,”ce”]，要求不能有重复项</font></p>
<p>​    JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"d"</span>,<span class="string">"e"</span>];</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr1.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr2.length;j++)&#123;</span><br><span class="line">       <span class="keyword">if</span>(arr1[i] == arr2[j])&#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">          arr.push(arr1[i]+arr2[j]);</span><br><span class="line">       &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js数据类型和判断</title>
    <url>/2019/07/19/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<ul>
<li><h4 id="关键字、保留字和ECMAScript标准"><a href="#关键字、保留字和ECMAScript标准" class="headerlink" title="关键字、保留字和ECMAScript标准"></a>关键字、保留字和ECMAScript标准</h4></li>
</ul>
<ol>
<li><p>class也是页面元素的属性之一，我们可以通过赋予元素不同的class来改变样式，但<font color="orange"><strong>js元素的class属性</strong></font>写法却与其他的属性不同：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.class  	   <span class="comment">//报错</span></span><br><span class="line">元素.className  <span class="comment">//正确写法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字：js里用到的语法单词(如：function var)</p>
</li>
<li><p>保留字：js里保留的单词(如：class )</p>
</li>
<li><p>不要使用关键字和保留字来给变量命名，但是可以和其他单词组合使用，比如classOne</p>
</li>
<li><p>className可以用来解决兼容问题，例如没有style.float的这种写法，style.styleFloat是ie写法；style.cssFloat是其他浏览器写法，那么我们设置元素的浮动时就可以用给元素添加class或移除class的方法来做</p>
</li>
<li><p>当你需要解决兼容问题时，要么知道做如何解决兼容问题(如封装带有兼容问题的代码)，要么会使用其他的解决方案(如用className绕过该问题)，有时我们要做一个兼容性很好的代码往往比代码本身要麻烦的多</p>
</li>
<li><p>js里的所有语言规范就是ECMAScript标准，例如function[]{}不能这么写，这是已经定义好的，必须遵守的</p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4></li>
</ul>
<ol>
<li><p>js的数据类型，像HTML的标签就有各种类型：block、inline、inline-block，数据类型的目的是对他们能够做更准确的操作</p>
</li>
<li><p><font color="red">JavaScript中有5种原始数据类型——<code>Undefined</code>(未定义)、<code>Null</code>(空对象)、<code>Boolean</code>(布尔值)、<code>Number</code>(数字)、<code>String</code>(字符串)和特殊一个引用型类型——<code>Object</code>(对象)：</font></p>
</li>
<li><p><strong><code>Undefined</code>(未定义)</strong>表示一个变量不含值<strong>(一般非人为因素)</strong></p>
</li>
<li><p><strong><code>Null</code>(空对象)</strong>通过设置NULL来清空变量<strong>(人为设置)</strong></p>
</li>
<li><p>注意：<code>undefined</code>实际上的从<code>null</code>派生来的，它们在定义上是相等的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="literal">null</span>==<span class="literal">undefined</span>)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><font color="purple">注意：==在js中用来判断值相等，如果两边数据类型不同会在判断大小时会发生数据类型转换，但是undefined和null不会发生转换，判断结果依然为true</font></p>
</li>
<li><p><code>Boolean</code>(布尔值)只有true(真)和false(假)两个值</p>
</li>
<li><p><code>Number</code>(数字)不分整数和浮点</p>
<p>自增/自减：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num += x;  <span class="comment">//相当于num = num + x;</span></span><br><span class="line">num -= x;  <span class="comment">//相当于num = num - x;</span></span><br><span class="line">num++;  <span class="comment">//先赋值再自增1</span></span><br><span class="line">num--;  <span class="comment">//先赋值再自减1</span></span><br><span class="line">++num;  <span class="comment">//先自增1再赋值</span></span><br><span class="line">--num;  <span class="comment">//先自增1再赋值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>String</code>(字符串)用双引号或单引号括起来的部分，“+”可以用来做字符串的拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">"hello"</span>+<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>object</code>(对象类型)指向性数据类型(包括Array、Function、Date、Json以及页面中所有元素等)会在后面详细说明</p>
</li>
<li><p>用<code>typeof</code>可以判断数据类型，对变量调用typeof将返回下列值之一：string,number,Boolean,object,function,undefined，<strong>这些结果都是字符类型的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">100</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span>(i));  <span class="comment">//"number"</span></span><br></pre></td></tr></table></figure>

<p><font color="purple">注意：对null调用typeof会返回object,null被认为是对象的占位符；而对象中的函数会返回function，这两种是特殊情况。</font></p>
</li>
</ol>
<hr>
<ul>
<li><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a><code>if</code>判断</h4></li>
</ul>
<ol>
<li><p>判断的语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;代码块&#125; <span class="comment">//当条件为true时执行代码块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(条件)&#123;代码块<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;代码块<span class="number">2</span>&#125; <span class="comment">//当条件为true时执行代码块1，否则执行代码块2 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;代码块<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;代码块<span class="number">2</span></span><br><span class="line">&#125;......else&#123;代码块n</span><br><span class="line">&#125; <span class="comment">//当条件1为true时执行代码块1，否则条件2为true时执行代码块2,......否则执行代码块n</span></span><br></pre></td></tr></table></figure>

<p><font color="gree">判断的注意事项：</font></p>
<ul>
<li>js获取元素的href和src属性得到不是相对路径而是绝对路径，因此不能用来做判断</li>
<li>通常颜色值也不能用来做判断，因为有很多颜色值的输出方式，如英文单词、rgb和16进制数</li>
<li>元素的内容innerHTML也不能用来做判断(在低版本浏览器上会有兼容性的问题)</li>
<li><strong>当需要判断上面这些值时可以使用布尔值开关的方式解决问题，既每次执行的时候将一个布尔值变量取反(取反的符号为!，作用是将真假转换)，每次判断根据新的布尔值结果执行相应代码</strong></li>
<li>判断时若使用的条件需要运算，我们常用以下的运算符：”==”(数值相等)；”===”(绝对相等—类型数值都相等)；”&gt;”，”&lt;”，”&gt;=”，”&lt;=”(大于，小于，大于等于，小于等于)等</li>
</ul>
</li>
</ol>
<hr>
<p><font size="5" color="gree">练习：</font></p>
<p>​    <font size="4">1. <strong>（用户控制时间调用函数特效）</strong>做两个input输入框和一个input按钮，通过分别向两个输入框输入样式名和样式的值的方法来改变一个div的样式</font></p>
<p>​        a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>请为下面的div设置样式：<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>点击设置<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ctrl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入样式"</span> <span class="attr">id</span>=<span class="string">"te1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入样式值"</span> <span class="attr">id</span>=<span class="string">"te2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>变化<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span>			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">735px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">     <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">p</span>&#123;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">     <span class="attribute">font-weight</span>: bold;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#btn1</span>&#123;</span><br><span class="line">     <span class="attribute">border</span>: none;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">     <span class="attribute">color</span>: white;</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#div1</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">#393129</span> <span class="number">4px</span> solid;</span><br><span class="line">     <span class="attribute">background-color</span>: white;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#div2</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,0.4);</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">display</span>: none;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.ctrl</span>&#123;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">right</span>: <span class="number">25px</span>;</span><br><span class="line">     <span class="attribute">bottom</span>: <span class="number">30px</span>;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">340px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">240px</span>;</span><br><span class="line">     <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">20px</span> <span class="number">#9c949c</span> solid;</span><br><span class="line">     <span class="attribute">background-color</span>: white;</span><br><span class="line">     <span class="attribute">padding-top</span>:<span class="number">15px</span>;</span><br><span class="line">     <span class="attribute">padding-bottom</span>: <span class="number">20px</span>; </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.ctrl</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">     <span class="attribute">text-align</span>: center;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">     <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.ctrl</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-last-child(1)</span>&#123;</span><br><span class="line">     <span class="attribute">margin-top</span>: <span class="number">21px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.ctrl</span> <span class="selector-tag">div</span> <span class="selector-tag">button</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">36px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">     <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#color1</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">     <span class="attribute">color</span>: white;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">     <span class="attribute">border</span>: none;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#color2</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: yellow;</span><br><span class="line">     <span class="attribute">color</span>: white;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">     <span class="attribute">border</span>: none;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#color3</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: blue;</span><br><span class="line">     <span class="attribute">color</span>: white;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">     <span class="attribute">border</span>: none;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#width1</span>,<span class="selector-id">#width2</span>,<span class="selector-id">#width3</span>,<span class="selector-id">#height1</span>,<span class="selector-id">#height2</span>,<span class="selector-id">#height3</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#c0c0c0</span> solid;</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">     <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#btn2</span>,<span class="selector-id">#btn3</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#002952</span>;</span><br><span class="line">     <span class="attribute">color</span>: white;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​        c. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</span><br><span class="line"><span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span><br><span class="line"><span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span><br><span class="line"><span class="keyword">var</span> oBtn3 = <span class="built_in">document</span>.getElementById(<span class="string">"btn3"</span>);</span><br><span class="line"><span class="keyword">var</span> oTe1 = <span class="built_in">document</span>.getElementById(<span class="string">"te1"</span>);</span><br><span class="line"><span class="keyword">var</span> oTe2 = <span class="built_in">document</span>.getElementById(<span class="string">"te2"</span>);</span><br><span class="line">oBtn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    oDiv2.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br><span class="line">oBtn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> style = oTe1.value;</span><br><span class="line">    <span class="keyword">var</span> val = oTe2.value;</span><br><span class="line">    oDiv1.style[style] = val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <font size="4">2. 做一个用两个按钮(加大、缩小)点击改变字体大小的效果，字体变换范围在12px-28px区间</font></p>
<p>​        a.HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>变小<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>变大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅电饭锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        c. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iFont = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</span><br><span class="line"><span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span><br><span class="line"><span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">oBtn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(iFont&gt;<span class="number">12</span>)&#123;</span><br><span class="line">        oP.style.fontSize = --iFont + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">oBtn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(iFont&lt;<span class="number">28</span>)&#123;</span><br><span class="line">        oP.style.fontSize = ++iFont + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <font size="4">3.<strong>（表单验证）</strong>输入框input的验证，为空时弹出”输入框内容不能为空”</font></p>
<p>​        a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"te1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"te2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>弹出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弹出第一个输入框的值 + "在" + 第二个输入框的值</span></span><br><span class="line"> <span class="comment">// 如果第一个输入框内为空，则弹出 "输入内容不能为空"</span></span><br><span class="line"> <span class="keyword">var</span> oTe1 = <span class="built_in">document</span>.getElementById(<span class="string">"te1"</span>);</span><br><span class="line"> <span class="keyword">var</span> oTe2 = <span class="built_in">document</span>.getElementById(<span class="string">"te2"</span>);</span><br><span class="line"> <span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</span><br><span class="line"> oBtn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// if(oTe1.value == "")&#123;</span></span><br><span class="line">     <span class="comment">//     alert("输入内容不能为空");</span></span><br><span class="line">     <span class="comment">// &#125;else&#123;</span></span><br><span class="line">     <span class="comment">//     alert(oTe1.value + "在" + oTe2.value);</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line">     <span class="comment">// oTe1.value == "" ? alert("输入内容不能为空") : alert(oTe1.value + "在" + oTe2.value);</span></span><br><span class="line">     alert(oTe1.value == <span class="string">""</span> ? <span class="string">"输入内容不能为空"</span> : oTe1.value + <span class="string">"在"</span> + oTe2.value);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​    <font size="4">4. <strong>布尔值开关（取反）</strong>实现下拉框</font></p>
<p>​        a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>下拉框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">div</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">     <span class="attribute">display</span>: none;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​        c. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</span><br><span class="line"><span class="keyword">var</span> bOn = <span class="literal">true</span>;</span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// if(bOn)&#123;</span></span><br><span class="line">    <span class="comment">//     oDiv.style.display = "block";</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//     oDiv.style.display = "none";</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    oDiv.style.display = bOn ? <span class="string">"block"</span> : <span class="string">"none"</span>;</span><br><span class="line">    bOn = !bOn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js事件函数和属性操作</title>
    <url>/2019/07/19/js%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0%E5%92%8C%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<ul>
<li><h4 id="js选择器和事件函数"><a href="#js选择器和事件函数" class="headerlink" title="js选择器和事件函数"></a>js选择器和事件函数</h4></li>
</ul>
<ol>
<li><p>js的事件：鼠标事件、键盘事件、系统事件、表单事件、自定义事件等，如下常见的鼠标事件</p>
<ul>
<li>鼠标左键点击：<code>onclick</code></li>
<li>鼠标移入：<code>onmouseover</code></li>
<li>鼠标移出：<code>onmouseout</code></li>
<li>鼠标左键落下：<code>onmousedown</code></li>
<li>鼠标左键抬起：<code>onmouseup</code></li>
<li>鼠标移动：<code>onmousemove</code></li>
</ul>
</li>
<li><p><font color="orange"><strong>获取元素的方法</strong></font>：通过ID名称来获取元素，其中.代表”的”：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'link'</span>);</span><br></pre></td></tr></table></figure>

<p>–&gt;document get element by id ‘link’(既在文档上通过id的值来获取元素)，获取的元素可以配合事件：元素.onmouseover=元素在鼠标移入该元素时做什么，由于做的事情应该是该事件触发时执行，那么这些代码我们不能直接使用，而是放在函数内部</p>
</li>
<li><p>函数(function)：由事件去命令它做一些事(执行代码块)，它不会主动执行：</p>
<ul>
<li><p>函数是执行某一任务的JavaScript 语句，可被其他部分调用。</p>
</li>
<li><p>下面是<strong>声明一个有名函数</strong>的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//function==&gt;关键字；functionName==&gt;是给函数取的名字</span></span><br><span class="line">        代码块......      <span class="comment">//代码块==&gt;是完成某一任务的代码</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>我们把完成特定功能的代码块放到一个函数里，再调用这个函数，就省重复输入大量代码的麻烦。</p>
</li>
<li><p><strong>有名函数执行方法</strong>：例如函数名为abc的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">abc();  <span class="comment">//直接调用执行，当逐行执行代码执行到这步时执行代码</span></span><br><span class="line">元素.事件 = abc;  <span class="comment">//当事件发生时执行该函数</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：事件调用函数后面没有括号，使用括号会出错，</font>原因会在后面说明</p>
</li>
<li><p><strong>匿名函数：没有名字的函数</strong>，使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    代码块......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：由于匿名函数没有函数名，因此不能直接调用，一般是用在事件调用及后面的传参、闭包等地方</font></p>
</li>
<li><p><font color="gree">当很多地方需要反复使用一段代码的时候，我们应该声明一个有名函数；若只在一个事件使用的函数则可以使用匿名函数</font></p>
</li>
<li><p><code>onload</code>是加载事件，可用在一个图片或者body等对象加载上。我们在开头的地方说过JS的代码可以放在head或body里，但是我们刚才用来获取元素的方法如果放在head里，输出的元素却找不到了。原因就是html文件是同步代码(顺序执行)，当读取到获取元素时，实际HTML中的元素并不存在，解决方法：<br>1、将放在head里的script中的代码包在一个函数内，在&lt;/body&gt;前script里调用(不推荐)；<br>2、将放在head里的script中的代码放在window的onload的事件里执行(推荐)；<br>3、把script标签放在&lt;/body&gt;前，这样还可以提高用户体验(推荐)</p>
</li>
</ul>
</li>
</ol>
<hr>
<ul>
<li><h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4></li>
</ul>
<ol>
<li><p>其实我们<font color="orange"><strong>获取的页面中的元素就是对象</strong></font>(对象：就是带有属性和方法的特殊数据类型)，而元素也就是标签本身就是有属性的如：<code>&lt;input id=&quot;btn1&quot; type=&quot;button&quot;/&gt;</code> 属性名(id和type)，属性值(btn1和button)；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.属性;    		 <span class="comment">//读：获取某元素属性的值    </span></span><br><span class="line">元素.属性 = <span class="string">"新值"</span>;  <span class="comment">//写：替换某元素属性的值</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：“读”的值都是字符串类型；“写”是替换操作，不是添加，因此原值会消失</font></p>
</li>
<li><p><font color="orange"><strong>元素的内容</strong></font>，语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.innerHTML;</span><br><span class="line">元素.innerHTML = <span class="string">"新内容"</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：内容包括子元素，所以“写”的时候可以用来加入新元素</font></p>
</li>
<li><p><font color="orange"><strong>元素的值</strong></font>，语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.value;</span><br><span class="line">元素.value = <span class="string">"新内容"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange"><strong>元素的样式</strong></font>，语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.style.样式 = <span class="string">"新值"</span>;</span><br><span class="line">元素.style.cssText= <span class="string">'width:200px'</span>;  <span class="comment">//注意该写法里面的值和css的写法相同</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：这两种方法都会把样式加在元素的行间样式中，而获取样式时，获取的也是行间样式，它不会去计算当前样式，因此一般只用来“写”不用来“读”；另外js里不能出现”-“，因此第一个方法中background-color需写成backgroundColor，第二个由于写法和css相同，因此不用修改</font></p>
</li>
<li><p>“[]”的一种用法类似”.”，<font color="orange"><strong>由于”.”后面的值不能变(如.style.width的width不能用变量)，因此在需要我们用变量的时候会用到”[]”</strong></font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素.style.width;  <span class="comment">//用"."的写法</span></span><br><span class="line">元素.style[<span class="string">"width"</span>];  <span class="comment">//用"[]"的写法，"[]"里可以是变量</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注意：”[]”里如果是属性，必须加双引号；如果是变量，不可以加双引号</font></p>
</li>
</ol>
<hr>
<p><font color="gree" size="5"><strong>练习：</strong></font></p>
<p>​    <font size="4">1.做一个下拉框效果，鼠标点击按钮时，在该元素下显示一个下拉框区域 </font></p>
<p>​        a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>下拉框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: red;</span><br><span class="line">   <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        c. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    oDiv.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <font size="4">2. 设置css和选择器 </font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">150px</span>; <span class="attribute">height</span>:<span class="number">150px</span>; <span class="attribute">background-color</span>: red; &#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">页面中设置一个<code>textarea</code>、<code>button</code>和<code>div</code>，在点击<code>button</code>时，将带有<code>class(box)</code>的div元素在页面的div里创建出来，即点击按钮时，将文本域中的值在div1的内容中展示出来</font></p>
<p>​        a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"te"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">150px</span>; <span class="attribute">height</span>:<span class="number">150px</span>; <span class="attribute">background-color</span>: red; &#125;</span><br></pre></td></tr></table></figure>

<p>​        c. JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> oText = <span class="built_in">document</span>.getElementById(<span class="string">"te"</span>);</span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   oDiv.innerHTML = oText.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习要求和基本语法</title>
    <url>/2019/07/19/js%E5%AD%A6%E4%B9%A0%E8%A6%81%E6%B1%82%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><h4 id="js的组成"><a href="#js的组成" class="headerlink" title="js的组成"></a>js的组成</h4></li>
</ul>
<ol>
<li><p>尽管ECMAscript是一个重要的标准,但它并不是JavaScript的唯一的部分，当然，也不是唯一被标准化的部分。</p>
</li>
<li><p>实际上，一个完整的JavaScript实现是由一下3个不同的部分组成的。</p>
<ul>
<li>核心(ECMAScript)</li>
<li>文档对象模型(DOM)</li>
<li>浏览器对象模型(BOM)</li>
</ul>
<p>DOM和BOM就是前文说到的浏览器大战而产生的拥有大量不兼容的地方</p>
</li>
</ol>
<ul>
<li><h4 id="js是什么"><a href="#js是什么" class="headerlink" title="js是什么"></a>js是什么</h4></li>
</ul>
<ol>
<li>简单来说，JavaScript是一种可以用来给网页增加交互性的编程语言。也常被称为”脚本语言”。</li>
<li>学习它有很多用途和好处：<ul>
<li>所有主流浏览器都支持JavaScript</li>
<li>基本所有的网页都会用到JavaScript</li>
<li>可以让网页呈现各种动态效果</li>
<li>不需要安装环境(浏览器都支持)，有文本编辑器就可以编写JavaScript代码</li>
</ul>
</li>
</ol>
<ul>
<li><h4 id="js的学习要求"><a href="#js的学习要求" class="headerlink" title="js的学习要求"></a>js的学习要求</h4></li>
</ul>
<ol>
<li>非必要条件：数学功底，英文功底，其他程序语言的基础</li>
<li>必要条件：HTML+CSS2基础好，尤其CSS2的样式使用要求灵活</li>
<li>主观条件：多去网上看，多思考别人的方法，多练习实现效果。如何布局，如何设置脚本</li>
<li>例如让一个元素移出我们的视线的方法，而我们往往必须想到在当前条件下哪种是最优的选择：<ul>
<li>设置透明度opacity为0</li>
<li>用visibility或display隐藏元素</li>
<li>用position和偏移值定位出可视区</li>
<li>width \ height设置为0，并溢出隐藏</li>
</ul>
</li>
</ol>
<ul>
<li><h4 id="js引入html和输出"><a href="#js引入html和输出" class="headerlink" title="js引入html和输出"></a>js引入html和输出</h4></li>
</ul>
<ol>
<li><p>html中的js代码必须放在script标签里面，script标签可以放在页面中head和body标签中。</p>
<p>一行结束就被认定为语句的结束，通常在结尾加上一个分号”;”来表示语句的结束；</p>
<p>“hello world!”是一串字符串，“//”是单行注释</p>
<p>&lt;/script&gt;这里结束JavaScript，并告诉浏览器后面的代码是html代码了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.write(&quot;hello world!&quot;); //获得文档窗口并在其中写入&quot;Hello, world!&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意：每行结尾的分号可有可无，好的代码编写习惯是加入分号，这会增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了。</p>
</li>
<li><p>我们需要让多个html页面共享一个脚本时就把脚本保存到外部文件中。外部文件扩展名是.js。使用时在&lt;script&gt; 标签的src属性中设置该文件的路径。如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myScript.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="green">注意：外部JavaScript文件中不能出现&lt;script&gt;标签(标签都是html语言)</font></p>
</li>
<li><p>输出数据方式除了<code>document.write</code>外还有下面两个方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">"hello world"</span>);  <span class="comment">//弹出一个确认框，里面显示"hello world"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world"</span>); <span class="comment">//在控制台打印"hello world"</span></span><br></pre></td></tr></table></figure>

<p><font color="green">注意：控制台里输出的字符串和其他数据的颜色不同。</font></p>
</li>
</ol>
<ul>
<li><h4 id="js语法特征"><a href="#js语法特征" class="headerlink" title="js语法特征"></a>js语法特征</h4></li>
</ul>
<ol>
<li><p>注释与Java，C相同，支持单行注释 //；与多行注释/<em>…</em>/</p>
</li>
<li><p>变量是用于存储信息的容器，JavaScript区分大小写，a和A是两个不同的变量</p>
</li>
<li><p>js的变量是弱类型的，定义变量只用var运算符，可以将它初始化为任意值，也可以随时改变变量所存数据的类型，可以用“,”将多个变量定义在一个var中，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>; <span class="comment">//声明了一个字符串类型变量，但不需要声明其类型</span></span><br><span class="line">color = <span class="number">16</span>;  <span class="comment">//弱类型语言，在这里将color的值从字符串改成了数字</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">25</span>; <span class="comment">//等号"="叫做赋值操作，意思是将等号右侧的值赋给左侧</span></span><br><span class="line"><span class="keyword">var</span> visible = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"5"</span>, b = <span class="number">5</span>; <span class="comment">//一个var声明了2个变量</span></span><br></pre></td></tr></table></figure>

<p>注意：由于js引擎会在出错时自动停止，因此我们可以将上面alert输出方法逐行放置，如果alert未执行，说明上面的代码有错误。初学者应养成随时写随时测试的习惯，以防做完一堆代码都是不能用的。</p>
</li>
</ol>
<ul>
<li><h4 id="js变量的命名规则"><a href="#js变量的命名规则" class="headerlink" title="js变量的命名规则"></a>js变量的命名规则</h4></li>
</ul>
<ol>
<li>没人天天叫毕加索的全名，js里也可以用一个名字储存数据，将事件加在名字上可以大大减少代码量</li>
<li>变量的命名规则：变量必须以字母开头；虽然变量也能以$和_符号开头(不过不推荐这么做)；变量名称也对大小写敏感(a和A是不同的变量)。</li>
<li>变量使用var关键字声明：var 名字 = ，后面可以是数字，字符串或者一个对象等等</li>
<li>好的代码编写习惯是总是用var声明变量的，并且始终存放相同类型的值，常用的命名规则：<ul>
<li>Camel标记法：首字母是小写的，接下来的单词都以大写字母开头。</li>
<li>Pascal标记法：首字母是大写的，接下来的单词都以大写字母开头。</li>
<li>匈牙利标记法：在以Pascal标记法命名的变量前附加一个小写字母说明该变量的类型。如比较常用的:<br><strong>i表示整数；s表示字符串；b代表boolean值；o代表对象；a代表数组或集合</strong></li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript的概述和历史</title>
    <url>/2019/07/19/javascript%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<ol>
<li>JavaScript作为赋予网页活力与交互性的主要手段之一，已成为web设计师和开发人员的必备技能。但它诞生时其实是个屌丝，没有想到发展到如今的地位</li>
<li>JavaScript是被人误解和误用最多的主流编程语言，很多人将它看作Java等面向对象语言的功能不全的小兄弟。随着越来越多的程序员转向浏览器/服务器模式开发，加上WEB2.0和Ajax的兴起，人们开始认识到，JavaScript绝非一种容易学习和掌握的技术，它具有面向对象，过程和函数型语言三类语言的特性，灵活性与强大功能完美结合，迄今为止，它的潜力远远没有正真释放出来。</li>
<li>上古时代的浏览器Netscape中，主要是些丑陋的静态文本和简单的图片， 和现在的页面相比，差的实在太远了。</li>
<li>当互联网刚开始兴起时，用户的数据需要全部在服务器端处理，这在网速非常慢的当时使用户的上网体验非常痛苦。Brendan Eich( JavaScript的发明人)有一回注册用户，由于忘了填写性别，等待了38秒后服务器告诉了他。他很崩溃：”这么简单的问题浏览器不会告诉我，还得把数据提交到几千公里外的服务器在那里检查才能发现问题吗！”。于是他向老板反馈问题，老板说： “我也早有此意，你来设计一个类似java的脚本吧”，老板对java非常感兴趣。Brendan Eich对java 毫无兴趣，但为了应付公司的任务，他花了10天设计出个脚本语言，由于设计时间太短，一些细节考虑得不够严谨。</li>
<li>如果他能预见到未来这种语言会成为互联网第一大语言，全世界有成千上万的学习者，他一定会多花一点时间吧。1995年Natscape公司决定在即将发行的Netcape Navigator2.0中加入一个称之为LiveScript的脚本语言，用于客户端数据验证。</li>
<li>后来NetScript与SUN公司联手完成LiveScript实现，就在Netcape Navigator2.0即将发布前，Netscape将其更名为JavaScript，目的是为了利用Java这个因特网当时的时髦词汇，Netscape的赌注最终得到了回报，JavaScript从此变成了因特网的必备组件。Brendan Eich最初遇到的问题简直就是小菜一碟了， 做个简单的表单验证，就解决问题了。</li>
<li>除此以外JavaScript 还可以操作DOM树。有了这棵树，它可以定位到DOM树中任意一个节点， 然后对这个节点进行操作，例如隐藏节点、显示节点、改变颜色、获得文本的值，改变文本的值，添加一个响应点击事件的函数等等，几乎为所欲为。这些操作可以立刻展示出效果来，你完全不用刷新网页。这些操作完全是内部进行的，html源码并不会改变，所以有时候你打开html源码，会发现这些源码和你在浏览器中看的效果并不一致，那就是JavaScript在背后改变了这个DOM树了。</li>
<li>JavaScript还能控制浏览器，比如打开窗口，在一个窗口内前进、后退，获得浏览器的名称，版本等等。为啥要获得浏览器的名称和版本呢？因为JavaScript1.0的成功，Netscape在它的3.0版本中发布了1.1版，恰巧那个时候，微软决定进军浏览器，发布了IE3.0并搭载了一个JavaScript的克隆版，叫做Jscript(这个命名是为了避免与NetScape潜在的许可纠纷)，微软步入Web浏览器领域的这重要一步虽然令其声名狼藉，但也成为了JavaScript语言发展过程中的重要一步。</li>
<li>在Netscape 和IE 进行浏览器之战的期间，他们都争相在自己的浏览器中支持Javascript，并且为了锁定程序员，还开发了很多自己浏览器的独特功能，有些功能只能在IE用，有些只能在Netscape 用，所以必须的判断是什么浏览器，这样才能特殊处理。不管怎么说，这些功能让浏览器中的网页变的更加动态了，更加有趣好玩了。</li>
<li>在微软进入后，有3个不同的JavaScript版本同时存在：JavaScript，Jscript以及ScriptEase，当时JavaScript并没有一个标准来统一其语法或特性。因此在1997年，JavaScript1.1作为一个草案提交给欧洲计算机制造商协会(ECMA)，第39技术委员会(TC39)被委派来”标准化一个通用、跨平台、中利于厂商的脚本语言的语法和语义” 。</li>
<li>由来自Netscape，Sun，微软、Borland和其他一些对脚本编程感兴趣的公司的程序员组成的TC39锻炼出了ECMA-262，该标准定义了叫做ECMAScript的全新的脚本语言，从此Web浏览器就开始努力将ECMAScript作为JavaScript实现的基础。</li>
<li>互联网的发展超出了所有人的预料，JavaScript被应用在几乎每一个网站上，但它只能在浏览器中运行，没法像java 那样访问网络，也就没有办法调用服务器端的接口来获取数据。用户只能通过GET或者POST向服务器发送请求，这时候服务器返回的数据是整个页面，而不是页面中的一个片段，也就是说整个页面都得刷新一遍，哪怕是页面中只有一个文字的改变。</li>
<li>1998年，IE5中引入一个新的功能：XMLHttpRequest，这个新功能将允许JavaScript直接向服务器发出接口调用。这个过程就是访问一下服务器端处理登陆的接口，IE5先干别的事儿，JavaScript得到服务器端的返回数据以后，用下IE5的这个函数。这其实就是异步调用，如果服务器处理和网络速度都足够快的话，用户就会发现：咦，我没有刷新整个页面，竟然已经登录了啊。IE都没有料到，这个功能带来了一场革命：这种方式可以使得网页局部刷新，让用户浏览网页的体验极佳，尤其是Google 地图，Gmail 等应用让互联网应用火了起来。其他浏览器也迅速跟进，实现了类似功能，各种各样交互性极佳的网站如雨后春笋般出现。之后桌面应用慢慢的都被搬到了互联网上。上面的那种处理方式称为AJAX即”Asynchronous Javascript And XML”(异步的JavaScript和XML)，异步问题解决了，但是XML真正的数据很少，标签反而占了大头，把数据都给淹没了。</li>
<li>Javascript的语法，里边有个叫对象的东西, 它有一个花括号，在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义，属性由逗号分隔。这种结构完全可以表达上面的xml内容。而且还支持数组，这样表达多个对象也不在话下。更重要的是，如果采用这种结构， Javascript根本不用什么XML解析器去解析了，它就是Javascript语言的一部分。直接拿来用即可。这种简洁的格式叫做JSON, 并且和服务器约定，都用JSON来传输数据。</li>
<li>HTML结构层，CSS样式层，而Javascript (加上AJAX, JSON)行为层。前端编程三个部分形成了。ExtJS, prototype, JQuery这些框架把前端编程推向另外一个高峰。甚至出现了AngularJS ，实现了SPA(单一页面应用程序)。但Javascript依然只能在浏览器和网页上。这也是为什么总有的人将Javascript被贬为雕虫小技，对它不屑一顾。但在Javascript发明十几年以后，又一位大牛Ryan Dahl于2009年把Javascript放到了服务器端，这就是node.js。越来越多使用node.js的网站证明， javascript的确可以在服务器端立足，并且有一个巨大的优势：前端和后端都用javascript！</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端CSS3选择器和常用样式</title>
    <url>/2019/07/18/WEB%E5%89%8D%E7%AB%AFCSS3%E9%80%89%E6%8B%A9%E5%99%A8%E5%92%8C%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<center><font size="5">CSS3基础</font></center>
- #### 说明：CSS3完全向后兼容，浏览器永远支持CSS2，CSS3就是CSS2的扩展版，W3C的CSS3规范虽然仍在开发，但许多新的CSS3属性已在现代浏览器中使用。主要包含：选择器、盒模型、背景和边框、文字特效、2D/3D转换、动画、多列等

<ul>
<li><h4 id="CSS3属性选择器"><a href="#CSS3属性选择器" class="headerlink" title="CSS3属性选择器"></a>CSS3属性选择器</h4><p>​    <font color="blue">以<code>&lt;input  type=&quot;text&quot;&gt;</code>为例</font></p>
<ol>
<li><code>input[type]</code> ：只使用属性名，但没有确定任何属性值</li>
<li><code>input[type=&quot;value&quot;]</code> ：指定属性名，并指定了该属性的属性值</li>
<li><code>input[type~=&quot;value&quot;]</code> ：指定属性名，并且具有属性值，此属性值是一个以空格隔开的词列表，词列表中包含了一个value词</li>
<li><code>input[type^=&quot;value&quot;]</code> ：指定了属性名，并且拥有属性值，属性值是以value开头的</li>
<li><code>input[type$=&quot;value&quot;]</code> ：指定了属性名，并且有属性值，而且属性值中包含了value</li>
<li><code>input[type*=&quot;value&quot;]</code> ：指定了属性名，并且有属性值，而且属性值中包含了value</li>
<li><code>input[type|=&quot;value&quot;]</code> ：指定了属性名，并且属性值是value或者以“value-”开头的值<font color="green">（比如说zh-cn）</font></li>
</ol>
</li>
</ul>
<hr>
<ul>
<li><h4 id="CSS3伪类"><a href="#CSS3伪类" class="headerlink" title="CSS3伪类"></a>CSS3伪类</h4><ol>
<li><p><strong>（常用）</strong><code>E:nth-child(n)</code>  ：表示E父元素的第n个子节点，且类型为E</p>
<p><font color="red">特殊值：odd(匹配奇数行)等价于2n+1<br>               even(匹配偶数行)等价于2n(下面的其他选择器同理)</font></p>
</li>
<li><p><strong>（常用）</strong><code>E:nth-of-type(n)</code> ：表示E父元素的第n个E子节点</p>
</li>
<li><p><code>E:nth-last-child(n)</code> ：表示E父元素的第n个子节点，从后向前算，且类型为E</p>
</li>
<li><p><code>E:nth-last-of-type(n)</code> ：表示E父元素的第n个E子节点，从后向前算</p>
</li>
<li><p><code>E:first-child</code> ：表示E父元素中的第一个子节点，且类型为E，等价于E:nth-child(1)</p>
</li>
<li><p><code>E:last-child</code> ：表示E父元素中的最后一个子节点，且类型为E，等价于E:nth-last-child(1)</p>
</li>
<li><p><code>E:first-of-type</code> ：表示E父元素中的第一个E子节点，等价于E:nth-of-type(1)</p>
</li>
<li><p><code>E:last-of-type</code> ：表示E父元素中的最后一个E子节点，等价于E:nth-last-of-type(1)</p>
</li>
<li><p><code>E:empty</code> ：表示E元素没有子节点。注意：包含文本节点</p>
</li>
<li><p><code>E:only-child</code> ：表示E父元素中只有一个子节点。注意：不包含文本节点</p>
</li>
<li><p><code>E:only-of-type</code>  ：表示E父元素中只有一个子节点，且这个唯一的子节点的类型必须是E。注意：不包含文本节点</p>
</li>
<li><p><code>E:target</code> ：表示当前的URL片段的元素类型(id被a的href链接并被点击，也就是锚点——访问的a标签的链接为某元素的id)，这个元素必须是E</p>
</li>
<li><p><code>E:disabled</code> ：表示不可点击(获取焦点)表单控件</p>
</li>
<li><p><code>E:enabled</code> ：表示可点击(获取焦点)的表单控件</p>
</li>
<li><p><code>E:checked</code> ：表示已选中的checkbox或radio</p>
</li>
<li><p><code>E:not(s)</code> ：表示E选中的元素中的s不被匹配(s是标签名)</p>
</li>
<li><p><code>E~F</code> ：表示E元素毗邻的所有F元素(之后的所有同级元素，类似于nextAll())，下一个F元素则要用”+”</p>
</li>
</ol>
<p><font size="4" color="green"><strong>举几个例子~</strong></font></p>
<ul>
<li><p><font color="purple"><strong>锚点和激活锚点</strong>（第12条）：</font></p>
<p>​    题目：设置3个div盒子(150*150,红)，设置3个a标签，div盒子和a标签内容分别为div1,div2,div3</p>
<p>​    要求：1. 激活锚点：当点击a标签的内容时，跳转到对应的div盒子所在位置；</p>
<p>​                2. 当div元素的锚点被激活时，背景颜色变为蓝色</p>
<p>​    <font color="red">提示：激活锚点：a标签的href里是#div（也就是div元素的id值）</font></p>
<p>a. HTML部分：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 为了展示跳转效果，特意给body设置高度 */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置div盒子的样式 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  	<span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 分别定位每个div盒子的位置（也是为了展示跳转效果） */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  	<span class="attribute">top</span>: <span class="number">1500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(3)</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">di</span><span class="selector-pseudo">:nth-of-type(4)</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当div元素的锚点被激活时，背景颜色变为蓝色 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:target</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>表单伪类（第13条）：设置一个不可点击的表单控件</p>
<p>a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:disabled</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="CSS3伪元素"><a href="#CSS3伪元素" class="headerlink" title="CSS3伪元素"></a>CSS3伪元素</h4><ol>
<li><code>E::first-line</code> ：表示E元素中的第一行</li>
<li><code>E::first-letter</code> ：表示E元素中的第一个字符</li>
<li><code>E::selection</code> ：表示E元素在用户选中文字时(moz)</li>
</ol>
<p><font color="green">举个例子~</font></p>
<p>​    题目：设计一个p标签，文字随意</p>
<p>​    要求：第一个字大小为30px，第一行文字颜色为蓝色，当用户选中文字时选中的背景颜色变为绿色且被选文字颜色为橘色</p>
<p>​    a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    语文老师说：“如果你越来越冷漠，你以为你成长了，但其实没有。长大应该是变得温柔，对全世界都温柔。”</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置p标签的样式 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置第一个字的大小 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置第一行文字的颜色 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当用户选中文字时的样式变化 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><font size="5" color="gree">练习1：</font></p>
<ol>
<li><p><font size="4">做一个商品列表（12个），要求4行一列，每两个商品(100*100)之间需要有间距(10px)，但是商品与边界之间无间距</font></p>
<p>a. HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置12个li --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="comment">/* 引入common.css后，宽度要加上2px的边框 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">432px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">    <span class="comment">/* 清浮动 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 商品与边界之间无间距 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type(4n)</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><font size="4">模拟单选和多选框</font></p>
<p>a. HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加span标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这样设置没作用 */</span></span><br><span class="line"><span class="comment">/* input[type="radio"]&#123;</span></span><br><span class="line"><span class="comment">  width: 50px;</span></span><br><span class="line"><span class="comment">  height: 50px;</span></span><br><span class="line"><span class="comment">  border: 1px red solid;</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">9999px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下一个同级元素span：+span */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked+span</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h4 id="CSS3新文本样式"><a href="#CSS3新文本样式" class="headerlink" title="CSS3新文本样式"></a>CSS3新文本样式</h4><ol>
<li><p><strong>文本阴影</strong>：<code>text-shadow:x y blur color, …</code></p>
<p>（x/y 横向偏移/纵向偏移    blur 模糊距离    color 阴影颜色）<br>文本阴影如果加很多层，会很卡，如：<code>text-shadow:2px 2px 4px black</code></p>
<p><font color="red">注意：有多个阴影的先渲染后面的，再渲染前面的</font></p>
<ul>
<li><strong>叠加</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-tag">red</span>, 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">green</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>层叠</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>; </span><br><span class="line"><span class="selector-tag">font-size</span><span class="selector-pseudo">:100px</span>; </span><br><span class="line"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>; </span><br><span class="line"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:2px</span> 2<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-tag">white</span>, 4<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>光晕</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:white</span>; </span><br><span class="line"><span class="selector-tag">font-size</span><span class="selector-pseudo">:100px</span>;</span><br><span class="line"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:0</span> 0 10<span class="selector-tag">px</span> <span class="selector-id">#fff</span>, 0 0 20<span class="selector-tag">px</span> <span class="selector-id">#fff</span>, 0 0 30<span class="selector-tag">px</span> <span class="selector-id">#fff</span>, 0 0 40<span class="selector-tag">px</span> <span class="selector-id">#ff00de</span>, 0 0 70<span class="selector-tag">px</span> <span class="selector-id">#ff00de</span>, 0 0 80<span class="selector-tag">px</span> <span class="selector-id">#ff00de</span>, 0 0 100<span class="selector-tag">px</span> <span class="selector-id">#ff00de</span>, 0 0 150<span class="selector-tag">px</span> <span class="selector-id">#ff00de</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>火焰</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: 0 0 20<span class="selector-tag">px</span> <span class="selector-id">#fefcc9</span>, 10<span class="selector-tag">px</span> <span class="selector-tag">-10px</span> 30<span class="selector-tag">px</span> <span class="selector-id">#feec85</span>, <span class="selector-tag">-20px</span> <span class="selector-tag">-20px</span> 40<span class="selector-tag">px</span> <span class="selector-id">#ffae34</span>, 20<span class="selector-tag">px</span> <span class="selector-tag">-40px</span> 50<span class="selector-tag">px</span> <span class="selector-id">#ec760c</span>, <span class="selector-tag">-20px</span> <span class="selector-tag">-60px</span> 60<span class="selector-tag">px</span> <span class="selector-id">#cd4606</span>, 0 <span class="selector-tag">-80px</span> 70<span class="selector-tag">px</span> <span class="selector-id">#973716</span>, 10<span class="selector-tag">px</span> <span class="selector-tag">-90px</span> 80<span class="selector-tag">px</span> <span class="selector-id">#451b0e</span>; </span><br><span class="line"><span class="selector-tag">font-family</span><span class="selector-pseudo">:Verdana</span>, <span class="selector-tag">Geneva</span>, <span class="selector-tag">sans-serif</span>; </span><br><span class="line"><span class="selector-tag">font-size</span><span class="selector-pseudo">:100px</span>; </span><br><span class="line"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>; </span><br><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>盒模型阴影</strong>：<code>box-shadow:[inset] x y blur [spread] color</code></p>
</li>
</ol>
<p>​    （ [inset]：投影方式(默认为外投影，inset为内投影)<br>​         x、y：水平和垂直方向的阴影偏移<br>​         blur：模糊半径<br>​         [spread]：扩展阴影半径(先扩展原有形状，再开始画阴影)<br>​         color：颜色 ）</p>
<p><font color="gree">举例~ </font></p>
<p>​    a. HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: red;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">150px</span> auto;</span><br><span class="line">   <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">2px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(0,0,0,0.7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><strong>定义文字排列方式(全兼容)</strong>：<code>direction</code><br><code>rtl</code> ：从右向左排列；<code>ltr</code> ：从左向右排列<br><font color="red">注意：要配合<code>unicode-bidi:bidi-override;</code> 一块使用</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文字从左向右排列 */</span></span><br><span class="line"><span class="selector-class">.ltr</span> <span class="selector-tag">p</span>&#123;<span class="attribute">direction</span>:ltr;<span class="attribute">unicode-bidi</span>:bidi-override;&#125;</span><br><span class="line"><span class="comment">/* 文字从右向左排列 */</span></span><br><span class="line"><span class="selector-class">.rtl</span> <span class="selector-tag">p</span>&#123;<span class="attribute">direction</span>:rtl;<span class="attribute">unicode-bidi</span>:bidi-override;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义省略文本的处理方式</strong>：<code>text-overflow</code></p>
<ul>
<li><p><code>clip</code> ：无省略号</p>
</li>
<li><p><code>ellipsis</code> ：省略号</p>
<p><font color="red">注意：要配合overflow:hidden和white-space:nowrap一块使用</font></p>
</li>
</ul>
</li>
<li><p><strong>多列：将文本内容设计成像报纸一样的多列布局，集合样式</strong>：<code>column</code></p>
<ul>
<li><code>column-width</code>：指定列的宽度</li>
<li><code>column-count</code>：要分的列数</li>
<li><code>column-gap</code>：列之间的距离</li>
<li><code>column-rule</code>：栏目间隔线由<code>column-rule-style</code>(hidden：定义隐藏规则/dotted：定义点状规则/dashed：定义虚线规则/solid：定义实线规则/double：定义双线规则)、<code>column-rule-width</code>和<code>column-rule-color</code>的集合成</li>
</ul>
</li>
<li><p><strong><code>calc()</code>函数</strong>：用于动态计算长度值</p>
<p>​    <font color="red">注意：运算符前后都需要保留一个空格</font></p>
<p>​    例如：<code>width: calc(100% - 10px)</code>  (父元素宽度-10px)</p>
<ul>
<li>任何长度值都可以使用calc()函数进行计算</li>
<li><code>calc()</code>函数支持 “+”, “-“, “*”, “/“ </li>
<li>运算<code>calc()</code>函数使用标准的数学运算优先级规则</li>
</ul>
</li>
</ol>
</li>
</ul>
<hr>
<p><font size="5" color="gree">练习2：</font></p>
<ol>
<li><p><font size="4">阴影：给一个P标签做一个火焰效果</font></p>
<p>a. HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>最美的时光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#fefcc9</span>, <span class="number">10px</span> -<span class="number">10px</span> <span class="number">30px</span> <span class="number">#feec85</span>, -<span class="number">20px</span> -<span class="number">20px</span> <span class="number">40px</span> <span class="number">#ffae34</span>, <span class="number">20px</span> -<span class="number">40px</span> <span class="number">50px</span> <span class="number">#ec760c</span>, -<span class="number">20px</span> -<span class="number">60px</span> <span class="number">60px</span> <span class="number">#cd4606</span>, <span class="number">0</span> -<span class="number">80px</span> <span class="number">70px</span> <span class="number">#973716</span>, <span class="number">10px</span> -<span class="number">90px</span> <span class="number">80px</span> <span class="number">#451b0e</span>; <span class="attribute">font-size</span>:<span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">font-weight</span>:bold; </span><br><span class="line">  <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><font size="4">做《静夜思》的文字布局（从右向左，从上到下）</font></p>
<p>a. HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>床前明月光疑是地上霜举头望明月低头思故乡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 一共有4列 */</span></span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">4</span>;</span><br><span class="line">    <span class="comment">/* 从右向左排列 */</span></span><br><span class="line">    <span class="attribute">direction</span>: rtl;</span><br><span class="line">    <span class="attribute">unicode-bidi</span>: bidi-override;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h4 id="CSS3新样式"><a href="#CSS3新样式" class="headerlink" title="CSS3新样式"></a>CSS3新样式</h4><ol>
<li><p><strong>变形：包含旋转函数、倾斜函数、缩放函数、位移函数</strong></p>
<ul>
<li><strong>旋转函数</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate()</span>    <span class="comment">/* 旋转度数(deg) */</span></span><br><span class="line"><span class="selector-tag">transform-origin</span><span class="selector-pseudo">:x</span> <span class="selector-tag">y</span>  <span class="comment">/* 旋转基点 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>倾斜函数</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skew()</span>   <span class="comment">/* 斜切度数(deg) */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skewX()</span>  <span class="comment">/* 水平方向倾斜 */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skewY()</span>  <span class="comment">/* 垂直方向倾斜 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>缩放函数</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:scale()</span>  <span class="comment">/* 缩放取值(正数、负数和小数) */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:scaleX()</span> <span class="comment">/* 水平方向缩放 */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:scaleY()</span> <span class="comment">/* 垂直方向缩放 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>位移函数</strong>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate()</span>  <span class="comment">/* 位移取值(像素值) */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translateX()</span> <span class="comment">/* 水平方向位移 */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translateY()</span> <span class="comment">/* 垂直方向位移 */</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<p>​        2<strong>. 过渡：<code>transition</code>集合样式(css3的动画的一种)</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">transition-property：要运动的样式(all || [attr] || none)</span><br><span class="line"><span class="selector-tag">transition-duration</span>：规定完成过渡效果需要多少秒或毫秒</span><br><span class="line"><span class="selector-tag">transition-delay</span>：定义动画延迟多久开始</span><br><span class="line"><span class="selector-tag">transition-timing-function</span>：运动速度曲线。</span><br><span class="line">	<span class="selector-tag">ease</span>：(逐渐变慢)默认值；<span class="selector-tag">linear</span>：(匀速)；</span><br><span class="line">	<span class="selector-tag">ease-in</span>：(加速)；<span class="selector-tag">ease-out</span>：(减速)；</span><br><span class="line">	<span class="selector-tag">ease-in-out</span>：(先加速后减速)；</span><br><span class="line">	<span class="selector-tag">cubic-bezier</span> 贝塞尔曲线( <span class="selector-tag">x1</span>, <span class="selector-tag">y1</span>, <span class="selector-tag">x2</span>, <span class="selector-tag">y2</span> )，可以百度一下贝赛尔曲线的图</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><strong>圆角：<code>border-radius</code></strong></p>
<ul>
<li>集合样式：<code>border-top-left-radius</code>/<code>border-top-right-radius</code>/<code>border-bottom-right-radius</code>/<code>border-bottom-left-radius</code>，也就是<font color="blue">从左上角开始顺时针数</font></li>
<li>即，1-4个数字 / 1-4个数字：/前面是水平方向圆角，后面是垂直方向圆角，不加/指的两个方向圆角相同，如：<code>border-radius: 10px/5px;</code></li>
<li>参数：各种长度单位都可以：px，%，…，%有时很方便，但宽高不一致时不太好<br><font color="orange">参数个数1</font>：四个方向都一样，border-radius: 一样<br><font color="orange">参数个数2</font>：对角，border-radius: 左上&amp;右下 右上&amp;左下<br><font color="orange">参数个数3</font>：斜对角，border-radius: 左上 右上&amp;左下 右下<br><font color="orange">参数个数4</font>：全部，顺时针，border-radius: 左上 右上 右下 左</li>
</ul>
</li>
<li><p><strong>边框图片：<code>border-image</code></strong>(集合样式)</p>
<ul>
<li><p>引入图片url ：<code>border-image-source</code> </p>
</li>
<li><p>切割图片(从外向内，可以是不带单位的数字或百分比)：<code>border-image-slice</code></p>
</li>
<li><p>边框宽度(展示边框图片区域)：<code>border-image-width</code> </p>
</li>
<li><p>边框图像区域超出边框的量：<code>border-image-outset</code> </p>
</li>
<li><p>图片的排列：<code>border-image-repeat</code> </p>
<p>图片的排列方式：<code>round</code> 四舍五入，<code>repeat</code> 重复，<code>stretch</code> 拉伸</p>
</li>
<li><p>集合样式：<code>border-image:url() s s s s/w w w w/o o o o repeat</code></p>
</li>
</ul>
</li>
</ol>
<hr>
<p><font size="5" color="gree">练习3：</font></p>
<ol>
<li><p><font size="4">做一个可旋转的风车，用圆角做风车的叶片</font></p>
<p>a. HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">   <span class="attribute">transition</span>: <span class="number">10s</span> all linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: red;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>,<span class="selector-class">.wrap</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span>&#123;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">90%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>,<span class="selector-class">.wrap</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">90%</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">rotate</span>(1800deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><font size="4"><strong>用过渡做按钮1</strong>：做一个搜索按钮，在鼠标移入时慢慢出现一个=&gt;符号</font></p>
<p>a. HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">   <span class="attribute">text-align</span>: center;</span><br><span class="line">   <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">   <span class="attribute">display</span>: inline-block;</span><br><span class="line">   <span class="attribute">content</span>: <span class="string">"=&gt;"</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">transition</span>: all <span class="number">0.3s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><font size="4"><strong>用过渡做按钮2</strong>：做一个立体按钮，在击中时显示下压效果</font></p>
<p>a. HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        b. CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">   <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.4);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">17px</span>;</span><br><span class="line">   <span class="attribute">transition</span>: all <span class="number">0.3s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="selector-tag">div</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">   <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.4);</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translateY</span>(7px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端BFC和三栏式布局、SEO和服务器、HTTP</title>
    <url>/2019/07/18/WEB%E5%89%8D%E7%AB%AFBFC%E5%92%8C%E4%B8%89%E6%A0%8F%E5%BC%8F%E5%B8%83%E5%B1%80%E3%80%81SEO%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81HTTP/</url>
    <content><![CDATA[<ul>
<li><h4 id="BFC-Block-fomatting-context"><a href="#BFC-Block-fomatting-context" class="headerlink" title="BFC(Block fomatting context)"></a>BFC(Block fomatting context)</h4></li>
</ul>
<ol>
<li>“块级格式化上下文”。是一个独立的渲染区域，它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</li>
<li>Box是CSS布局的对象和基本单位，一个页面是由很多个Box组成的。元素的类型和display属性，决定了这个Box的类型。</li>
<li>不同类型的Box，会参与不同的Formatting Context(一个决定如何渲染文档的容器)，因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：<ul>
<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且会参与 block fomatting context；(简称BFC)</li>
<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且会参与 inline formatting context；(简称IFC)</li>
</ul>
</li>
<li>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</li>
<li>BFC布局规则：<ul>
<li>内部的Box会在垂直方向，一个接一个地放置。</li>
<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>
<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
<li>BFC的区域不会与float box重叠。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算BFC的高度时，浮动元素也参与计算</li>
</ul>
</li>
<li>哪些元素会变成BFC区域<ul>
<li>根元素</li>
<li>float属性不为none</li>
<li>position属性值为absolute或fixed</li>
<li>display属性为inline-block, table-cell, table-caption, flex, inline-flex</li>
<li>overflow属性不为visible</li>
</ul>
</li>
<li>BFC的用法：<ul>
<li>自适应两栏布局：左栏定宽左浮动，右栏不定宽overflow:hidden;(设置成BFC)</li>
<li>清除内部浮动：父元素设置overflow:hidden;(设置成BFC)，既之前我们用来清除浮动的方法之一</li>
<li>防止垂直 margin 重叠：其中一个元素外套一个div并设置overflow:hidden;(设置成BFC)</li>
</ul>
</li>
</ol>
<ul>
<li><h4 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h4></li>
</ul>
<ol>
<li>三栏式布局是一种，两边盒子固定宽度，中间盒子自适应的布局</li>
<li>圣杯布局和双飞翼布局<ul>
<li>父元素包含左中右三个盒子，分别左浮动，中间元素宽度100%<font color="gree">(必须为第一个渲染)</font></li>
<li>用margin-left的负值将两边盒子拉上去和中间盒子同行(左边-100%，右边-右盒子宽度)</li>
<li>给父元素上清除浮动</li>
<li>父元素用左右padding为左右盒子留位置并用<strong>相对定位</strong>将左右元素移动到正确的位置上(圣杯)</li>
<li>给中间元素设置子元素，并给其左右margin为左右盒子留位置(双飞翼)</li>
</ul>
</li>
</ol>
<ul>
<li><h4 id="转义和框架标签"><a href="#转义和框架标签" class="headerlink" title="转义和框架标签"></a>转义和框架标签</h4></li>
</ul>
<ol>
<li><p>HTML的转义字符，网上可以找到转义字符的表(<a href="http://tool.oschina.net/commons?type=2" target="_blank" rel="noopener">http://tool.oschina.net/commons?type=2</a>)</p>
<ul>
<li>通过&amp;XXXX的格式生成一个转义字符</li>
<li><strong>原因是有部分字符无法直接在html里直接生成</strong>，如：空格 、&amp;符号、大于号&gt;、小于号&lt;、©符号等</li>
</ul>
<p><font color="green"><strong>做个练习~</strong></font></p>
<p>在页面中生成下面的句子：</p>
<p>​    在页面里输入一个&lt;br /&gt;就可以实现换行了</p>
<p>​    在页面里输入&amp;nbsp;就可以实现空格&nbsp;效果了</p>
<p>​    在页面里输入&amp;copy;就可以实现&copy;符号了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在页面里输入&amp;lt;br /&amp;gt;就可以实现换行了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在页面里输入&amp;amp;nbsp;就可以实现空格效果了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在页面里输入&amp;amp;copy;就可以实现©符号了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>iframe：框架标签(在当前页面显示多个网页)</p>
<ul>
<li>scrolling：是否有滚动条，值为yes(有)/no(无)，默认为auto(需要的时候出现)</li>
<li>frameBorder：是否有边框，值为正整数，默认为1，值为0时无边框</li>
<li>align：对齐方式</li>
<li>src：嵌套页面地址</li>
<li>width/height：嵌套页面区域的宽高</li>
<li>name：配合a的target属性值等于iframe的name，可以让a在超链接的跳转打开页面时在iframe区域打开</li>
<li>优点：解决加载缓慢的第三方内容图标和广告等的加载问题；iframe无刷新文件上传；iframe跨域通信</li>
<li>缺点：iframe会阻塞主页面的onload事件；无法被一些搜索引擎索引到；页面会增加服务器的http请求；会产生很多页面，不容易管理。</li>
</ul>
</li>
</ol>
<ul>
<li><h4 id="雪碧图和引入样式表"><a href="#雪碧图和引入样式表" class="headerlink" title="雪碧图和引入样式表"></a>雪碧图和引入样式表</h4></li>
</ul>
<ol>
<li><p>sprites(雪碧图)原理</p>
<ul>
<li>首先把网页中一些背景图片整合到一张图片文件中(png格式)</li>
<li>用”background-image”引入图片；”background- repeat”禁止平铺；”background-position”精确定位背景</li>
<li>优点：减少网页的http请求次数，并防止切换图片出现的闪白；减少图片的字节数，解决图片命名上的困扰(对一张集合的图片上命名就可以了，不用对每一个小图片进行命名)；更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变</li>
<li>缺点：在宽屏，高分辨率的屏幕下的自适应页面，雪碧图如果不够宽，容易出现背景断裂；在开发的时候，需要通过photoshop或其他工具测量计算每一个背景单元的精确位置在维护的时候比较麻烦，如果页面背景有少许改动，一般就要修改整张合并的图片</li>
</ul>
</li>
<li><p>@import：引入css样式表</p>
<ul>
<li><figure class="highlight"><table><tr><td class="code"><pre><span class="line">@import url(CSS文件路径地址); //语法</span><br></pre></td></tr></table></figure>
</li>
<li><p>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS</p>
</li>
<li><p>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载</p>
</li>
<li><p>import是CSS2.1提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题</p>
</li>
</ul>
</li>
</ol>
<ul>
<li><h4 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h4><ol>
<li>搜索引擎工作原理：<ul>
<li>搜索引擎网站的数据库存储着海量的关键词，每个关键词对应着很多网址，收集这些数据的程序称之为“搜索引擎蜘蛛”或“网络爬虫”。</li>
<li>“爬虫”每天在互联网上分析提炼，找到对用户有用关键词便存入数据库；垃圾或重复信息就舍弃。</li>
<li>用户输入关键词时，搜索引擎就能检索出与关键字相关的网址。关键词又对应多个网址，就出现了排序的问题，与关键词最吻合的网址就会排在前面。</li>
<li>并不是所有语言“爬虫”都能看懂。flash和js它便看不懂，即使关键字再贴切也没用。而网站内容是它的语言(SEO)，它便能看懂。</li>
</ul>
</li>
<li>SEO简介<ul>
<li>Search English Optimization，搜索引擎优化。自从有了搜索引擎，SEO便诞生了。</li>
<li>SEO就是为了提升我们的网页在搜索引擎自然搜索结果中的收录数量以及排序位置而做的优化行为。</li>
<li>白帽SEO起到改良和规范网站设计的作用，使网站对搜索引擎和用户更加友好，网站也能从搜索引擎中获取合理的流量，这是搜索引擎鼓励和支持的。</li>
<li>黑帽SEO利用和放大搜索引擎政策缺陷来获取更多用户的访问量，大多是欺骗搜索引擎，这是搜索引擎公司是不支持与鼓励的。</li>
<li>白帽SEO怎么做：对网站的标题、关键字、描述精心设置，反映网站的定位，让搜索引擎明白网站是做什么的；网站内容优化：内容与关键字的对应，增加关键字的密度；在网站上合理设置Robot.txt文件(保障网络安全与网站隐私，里面规定了哪些不予许“爬虫”搜索)；生成针对搜索引擎友好的网站地图；增加外部链接，到各个网站上宣传；</li>
</ul>
</li>
<li>前端SEO：通过网站的结构布局设计和网页代码优化，使前端页面既能让浏览器用户能够看懂，也能让“爬虫”看懂。<ul>
<li>网站结构布局优化：尽量简单、开门见山，提倡扁平化结构。建立的网站结构层次越少，越容易被“爬虫”抓取；<ul>
<li>控制首页链接数量：链接太少会使“爬虫”缺乏往下爬的“桥”，影响收录数量；链接太多，影响用户体验，降低了网站首页权重，效果也不好。尽量让“爬虫”最多跳转3次，就能到达网站内的任何一个内页。</li>
<li>导航优化，尽量采用文字，如果用图片代码一定要添加“alt”和“title”属性(图片未能正常显示时用户也能看到提示)。另外每个网页上应该加上面包屑导航(如新闻&gt;某新闻)</li>
<li>网站的结构：头部——logo及主导航，以及用户的信息；页面主体——一边面包屑导航及正文；一边放热门文章及相关文章，这些相关链接增强了页面相关性，也增强页面的权重；页面底部——版权信息和友情链接；分页写法——“首页 1 2 3 4 5 下拉框”，这样“爬虫”能直接跳转，下拉框直接选择页面；而“首页 下一页 尾页”的写法，当分页数量特别多时，“爬虫”需要经过很多次往下爬，才能抓取，超时容易放弃。</li>
<li>控制页面的大小，减少http请求，提高网站的加载速度。页面最好不要超过100k，太大页面加载速度慢。当速度很慢时，用户体验不好，留不住访客，并且一旦超时，“爬虫”也会离开。</li>
</ul>
</li>
<li>网页代码优化：除了精简代码外还要有以下设置<ul>
<li>meta keywords标签：关键词，列举出几个页面的重要关键字即可，切记过分堆砌；meta description标签：网页描述，需要高度概括网页内容，切记不能太长，过分堆砌关键词，每个页面也要有所不同。</li>
<li>title标签，强调重点，把重要的关键词放在前面且不要重复出现，每个页面的title标题中不要设置相同的内容；body的标签：代码语义化，适当的位置使用适当的标签。让阅读源码者和“爬虫”都一目了然。比如：h1-h6 是用于标题类的，nav标签是用来设置页面主导航的等。</li>
<li>a标签：页内链接要加 “title” 属性说明，让访客和 “爬虫” 知道。外部链接，则需要加上 el=”nofollow” 属性, 告诉 “爬虫” 不要爬，否则它就不会再回来了；br标签：只用于文本内容的换行；img应使用 “alt” 和”title”属性加以说明</li>
<li>正文标题要用h1标签：“爬虫”认为它最重要，副标题用h2标签, 而其它地方不应该随便乱用 h 标题标签；表格标签用caption</li>
<li>strong和em标签：需要强调时使用。strong在搜索引擎中会得到高度重视，它突出关键词表现重要的内容，em强调效果仅次于strong。b和i标签: 只是显示效果，在SEO中不会起任何效果。</li>
<li>文本缩进不要使用特殊符号，应使用CSS进行设置；版权符号不要使用特殊符号，可以直接使用输入法中的版权符号©；对于不想显示的文字内容，应当设置z-index或设置到浏览器显示器之外。搜索引擎会过滤掉display:none中的内容。</li>
<li>巧妙布局，将重要内容的代码放在前面，前面的内容被认为是最重要的，优先让“爬虫”读取，进行内容关键词抓取。</li>
<li>少使用iframe框架,因为“爬虫”一般不会读取其中的内容；重要内容不要用JS输出，因为“爬虫”不认识；js代码如果是操作DOM操作，应尽量放在body结束标签之前，html所有标签之后。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><h4 id="Server-Browser技术"><a href="#Server-Browser技术" class="headerlink" title="Server-Browser技术"></a>Server-Browser技术</h4></li>
</ul>
<ol>
<li>WEB的三要素：直接打开的html文件并没有经过WEB的三要素，正式项目时需要安装环境<ul>
<li>Server(服务器)</li>
<li>Client(客户端)/Browser(浏览器)</li>
<li>HTTP(传输通信)/HTTPS(加密传输)</li>
</ul>
</li>
<li>客户端技术：HTML/CSS/JS和图片等，储存于服务器，供客户端申请下载，在服务器看来他们只是二进制的字符，服务器不会对这些内容做任何处理</li>
<li>服务器端技术：JSP/PHP/ASP.NET，储存于服务器，供客户端进行请求，但返回客户端之前，其中的代码会在服务器端获得执行，得到的结果是纯的静态数据，发送给客户端。</li>
<li>服务器(Server)：是网络环境中的高性能计算机，它侦听网络上的其他客户机提交的服务请求，并提供相应的服务，如”域名解析”、”文件下载”、”网页浏览”、”邮件收发”等等。<ul>
<li>要求：高可用性、高速运算、高带宽、高可靠性、强大的数据吞吐能力。</li>
<li>Client-Server模型(C/S模型)：如QQ客户端</li>
<li>Brouser-Server模型(B/S模型)：如谷歌浏览器</li>
<li>随着H5和前端的发展，B/S会部分取代C/S，因为只需要在服务器端更新就可以立即使用最新版</li>
</ul>
</li>
<li>硬件服务器：按大小可以分为工作站、小型机、中型机、大型机、超级计算机。</li>
<li>软件服务器：不论是超级计算机、小型服务器、还是PC机，为了向客户端提供服务，必须安装能够监听特定端口，并接受客户端请求的应用程序–服务器应用程序。根据能投提供的服务的不同，服务器应用程序包括：<ul>
<li>DNS服务器：把域名解析为计算机的IP地址</li>
<li>Web服务器：提供Web页面服务</li>
<li>数据库服务器：提供数据的永久储存和高效查询</li>
<li>FTP服务器：文件上传和下载服务</li>
<li>SMTP/POP3服务器：邮件收发服务</li>
<li>SSH服务器：远程登录服务</li>
<li>Samba服务器：文件和打印机共享服务</li>
</ul>
</li>
<li>如何访问服务器：客户端访问网络上的一台服务器，必须提供如下信息——访问协议：类似两个人通话必须先确定所说的语言；主机地址：服务器的域名或IP地址；端口号：一台计算机上可能提供多种服务，不同服务使用不同端口；除此之外，有的服务还可能需要客户端提供用户名/密码、资源路径，请求参数等。</li>
</ol>
<ul>
<li><h4 id="配置服务器环境"><a href="#配置服务器环境" class="headerlink" title="配置服务器环境"></a>配置服务器环境</h4></li>
</ul>
<ol>
<li>AMP–集成了Apache, PHP5, 和MySQL</li>
<li>浏览器服务器文件localhost/文件.txt，这种方式和用路径在浏览器上打开的方式是不同的，前者是在服务器上</li>
<li>很多东西必须在服务器上运行，如cookie和ajax等</li>
</ol>
<ul>
<li><h4 id="超文本传输协议-HTTP，HyperText-Transfer-Protocol"><a href="#超文本传输协议-HTTP，HyperText-Transfer-Protocol" class="headerlink" title="超文本传输协议(HTTP，HyperText Transfer Protocol)"></a>超文本传输协议(HTTP，HyperText Transfer Protocol)</h4></li>
</ul>
<ol>
<li>HTTP协议是互联网应用最为广泛的一种网络协议。设计它的最初目的是为了提供一种发布和接收HTML页面的方法。</li>
<li>只要上网就要用到它，比如我们登录百度页面就要使用HTTP请求百度页面的数据，同时要遵守HTTP协议的语法和规则。</li>
<li>HTTP是两台电脑(服务器和客户端)之间的通讯，客户端发起请求(通常是用域名)，服务器响应请求(发送页面数据)。</li>
<li>下面是客户端和服务器在发起HTTP协议时的详细过程：<ul>
<li>第一步，先建立服务器和客户端的TCP的握手。</li>
<li>第二步，客户端向服务器发出文本数据，如：<br>POST //发送请求的方法；index.html //请求的页面；HTTP/1.1 //HTTP的版本</li>
<li>还有请求的报头和它的值如：<br>HOST: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> //域名；Connection: //服务器发送数据后的链接状态；User_agent: Mozilla/4.0 //浏览器；Accept-language: zh-CN //语言</li>
<li>以及报体(get请求不需要报体)，如：Name=unknow&amp;age=22 //内容</li>
<li>第三步，服务器响应结果：HTTP/1.1 //HTTP的版本；200 ok //状态码和文本描述</li>
<li>以及响应的报头和它的值如：<br>Server: Apache-Coyote/1.1 //域名；Last-Modified: Thu， 24 Nov 2011 12::22:00 GMT //最后修改时间；Content_Type: text/html;charset=GB18030 //使用的字符集；Content-Language: zh-CN//语言；Content-Length: 23980 //内容大小；Date: Fri, 25 Nov 2011 07:22:02 GMT //时间</li>
<li>最后空一行之后是它的报体(html页面)：<html>……</html></li>
</ul>
</li>
<li>HTTP详解：<a href="https://www.cnblogs.com/EricaMIN1987_IT/p/3837436.html" target="_blank" rel="noopener">https://www.cnblogs.com/EricaMIN1987_IT/p/3837436.html</a></li>
</ol>
<ul>
<li><h4 id="上传一个网站"><a href="#上传一个网站" class="headerlink" title="上传一个网站"></a>上传一个网站</h4></li>
</ul>
<ol>
<li>我们需要一个网上的服务器(需要花钱租用，比如西部数码、阿里云、腾讯云等等)</li>
<li>准备一个网站项目，并用FTP软件将它上传到该服务器上</li>
<li>在FTP软件的快速连接里输入服务器的地址，并通过用户名和密码连接到服务器上，然后上传你的项目</li>
<li>准备一个自己的域名，并将其绑在我们的服务器上，这样在互联网上打开该域名就会自动打开项目中的index.html了</li>
<li><font color="red"><strong>个人网站也是需要备案的</strong></font>，这里是个人网站详细的<a href="https://jingyan.baidu.com/article/5bbb5a1b3bbd1213eaa1797e.html" target="_blank" rel="noopener">备案过程</a></li>
</ol>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级-八、VIM程序编辑器</title>
    <url>/2019/07/18/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E5%85%AB%E3%80%81VIM%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<center><font size="5">八、VIM程序编辑器</font></center>

<ol>
<li><p>作用：是一种打开文本文件的程序，可以编辑改文件已达到配置服务的功能</p>
</li>
<li><p>分类：</p>
<p>(1) <strong>vi</strong> ：任意版本的Linux自带的程序编辑器</p>
<p>(2) <strong>vim</strong> ：是vi程序编辑器的加强版，通过附加一系列功能（如：字体、字体颜色、扩展接口等）帮助运维人员更好的配置服务</p>
</li>
<li><p>注意：vim若在最小化镜像安装系统时不会安装，可以使用：<code>yum    install    -y    vim</code>    命令进行安装</p>
</li>
<li><p>打开文件方法：</p>
<p>(1) 格式：vim    格式名</p>
<p>(2) 若文件已存在直接打开，若不存在会新建文件后打开</p>
</li>
<li><p>vim 的三种模式：</p>
<p>(1) 命令模式：又称为只读模式，在该模式可以进行光标移动，查看等动作</p>
<p>(2) 插入模式：编辑模式，插入、删除等内容</p>
<p>(3) 末行模式：保存、退出、设置编辑环境</p>
<p>(4) 模式切换：</p>
<p>​    A. 命令模式点击“i”键进入插入模式，插入模式点击“<code>ESC</code>”键返回到命令模式，命令模式下单击<code>shirt :</code> 进入末行模式，末行模式点击ESC键返回命令模式</p>
<p>​    B. 图：</p>
<p><img src="/2019/07/18/Linux运维初级-八、VIM程序编辑器/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563761993602.png" alt="1563761993602"></p>
</li>
<li><p>命令模式：</p>
<p>(1) 常用功能键：</p>
<p>​    A. yy ：复制本行</p>
<p>​    B. 5yy ：复制5行</p>
<p>​    C. p ：粘贴</p>
<p>​    D. dd ：删除当前行</p>
<p>​    E. 3dd ：删除3行</p>
<p>​    F. /字符串：由上到下搜索字符串</p>
<p>​    G. ?字符串：由下向上搜索字符串</p>
<p>​    H. n ：显示搜索定位到下一个字符串</p>
<p>​    I.  N：显示搜索定位到下一个字符串</p>
<p>​    J. u ：撤销上一步动作</p>
<p>(2) 配置主机名：</p>
<p>​    A. 主机名：Linux主机在网络上显示的名称，应“见名知意”</p>
<p>​    B. 配置文件：<code>/etc/hostname</code></p>
<p>​    C. 显示主机名命令：<code>hostname</code></p>
<p>​    D. 编辑主机名：</p>
<p>​        (a) <code>vim    /etc/hostname</code></p>
<p>​        (b) 删除旧主机名后插入新主机名</p>
<p>​        (c) 保存退出</p>
<p>​        (d) reboot重启</p>
<p>(3) 配置网卡的静态IP地址：</p>
<p>​    A. <code>vim    /etc/sysconfig/network-scriipts/ifcfg-ens33</code></p>
<p>​    B. 点击 i 键</p>
<p>​    C.<code>BOOTPROTO=static</code>  ：网卡类型为静态IP，动态IP为dhcp</p>
<p>​    D. 在最后一行插入以下内容：</p>
<p>​        <code>IPADDR=192.168.10.200</code>            （IP地址）</p>
<p>​        <code>NETMASK=255.255.255.0</code>            （子网掩码）</p>
<p>​        <code>GATEWAY=192.168.10.1</code>                （网关地址）</p>
<p>​        <code>DNS1=8.8.8.8</code>                                    （域名解析服务器地址）</p>
<p>​    E. 保存退出</p>
<p>​    F. 重启网卡：<code>service    network    restart</code></p>
<p>​    G. 查看网卡：<code>ip    addr</code></p>
</li>
<li><p>末行模式：</p>
<p>(1) 功能命令</p>
<p>​    A. 进入方法：<code>shirt :</code> </p>
<p>​    B. <code>w</code> ：保存</p>
<p>​    C. <code>q</code> ：退出</p>
<p>​    D. <code>q!</code> ：强制退出，不保存</p>
<p>​    E. <code>wq!</code> ：强制保存退出</p>
<p>​    F. <code>set    nu</code> ：增加行号</p>
<p>​    G. <code>set    nonu</code> ：取消行号</p>
<p>​    H. 数字：跳转到指定数字行</p>
<p>(2) 注意：大部分配置文件都需要root权限，否则无法保存</p>
</li>
<li><p>vim异常处理：</p>
<p>(1) 制作异常环境：</p>
<p>​    A. <code>cp    /etc/fstab    /root</code></p>
<p>​    B. <code>vim    /root/fstab</code></p>
<p>​    C. 点击<code>dd</code>删除某行</p>
<p>​    D. 点击<code>ctrl z</code> ，强制终止进程</p>
<p>​    E. <code>vim    /root/fstab</code>     会有警告信息</p>
<p>(2) 处理流程：</p>
<p>​    A. 点击 <code>R</code> 进行恢复</p>
<p>​    B. 点击<code>shirt:</code>     正常保存退出</p>
<p>​    C. <code>ls    -a    root</code>    查看同名的隐藏缓存文件</p>
<p>​    D. <code>rm    -f    /root/.fstab.swp</code>    删除同名缓存文件</p>
<p>​    E. <code>vim    /root/fstab</code>    正常打开</p>
<p>(3) 原理：</p>
<p>​    A. 原因1：可能有其他人或程序同时在编辑该文件</p>
<p>​    B. 原因2：上一个vim环境中，可能因为某些不知名原因导致vim中断(crashed)</p>
</li>
<li><p>shell脚本简介：</p>
<p>(1) 本质：是一种纯文本的批处理文件</p>
<p>(2) 意义：</p>
<p>​    A. 自动化管理：批处理方式执行，降低维护工作量及难度</p>
<p>​    B. 记录和管理系统工作：服务启动等功能</p>
<p>​    C. 简单的入侵检测：通过编写脚本自动检测系统日志</p>
<p>​    D. 简单数据处理：数据计算及分析</p>
<p>(3) 创建简单的脚本</p>
<p>​    A. 方法：vim    脚本文件</p>
<p>​    B. 脚本扩展名：<code>.sh</code></p>
<p>​    C. 脚本执行过程：</p>
<p>​        (a) 由上到下、由左到右分析执行</p>
<p>​        (b) 以行为单位进行执行，空行跳过</p>
<p>​        (c) 命令过长时使用<code>\enter</code>进行换行编写</p>
<p>​        (d) 以<code>#</code>开头的为注释命令，其只起到增加理解的功能，不执行</p>
<p>​    D. 内容分析：</p>
<p>​        (a) 注释：<code>#   !/bin/bash</code>  ：表示该脚本使用的shell名称，不能省略</p>
<p>​                        #      脚本类别</p>
<p>​                        #                      脚本功能简述</p>
<p>​                        #     <code>History</code></p>
<p>​                        #                      脚本编辑日期    作者    版本号等</p>
<p>​        (b) 命令语句</p>
<p>(4) 执行脚本：</p>
<p>​    A. 方法1：<code>bash    脚本名.sh</code></p>
<p>​    B. 方法2：<code>chmod    a+x    脚本名.sh</code></p>
<p>​                        （增加权限如：<code>chmod    a+x    /root/hello.sh</code>）</p>
<p>​                        <font color="red">./脚本名.sh,</font></p>
<p>(5) 注意：shell scripts在系统管理及自动化执行上作用很大，但是在数据处理应用上能力有限（如：bash的运算式只识别整数的运算），且运算的速度较慢CPU占用率较大，会造成主机资源负载较高</p>
<p>(6) 黑客帝国屏保代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#program</span><br><span class="line">#       install cmatrix</span><br><span class="line">#history</span><br><span class="line">#       2019-7-22  14:29   andy  Version 1.0</span><br><span class="line">wget http://archive.ubuntu.com/ubuntu/pool/universe/c/cmatrix/cmatrix_1.2a.orig.tar.gz</span><br><span class="line">tar  xvf  cmatrix_1.2a.orig.tar.gz</span><br><span class="line">cd  cmatrix-1.2a</span><br><span class="line">yum  install  -y   gcc</span><br><span class="line">yum  install  -y   ncurses-devel</span><br><span class="line">./configure  &amp;&amp;  make  &amp;&amp;  make install</span><br><span class="line">echo  &quot;Program installation complete !&quot;</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级--- 七、RAID 与 LVM</title>
    <url>/2019/07/17/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E4%B8%83%E3%80%81RAID-%E4%B8%8E-LVM/</url>
    <content><![CDATA[<center><font size="5">七、RAID 与 LVM</font></center>

<ol>
<li><p><strong>RAID</strong></p>
<p>(1) RAID : Redundant   Array    of    Independent    Disks，磁盘冗余阵列</p>
<p>(2) RAID意义：通过增肌多个硬盘，形成独立的硬盘组，将数据划分成多份，分散存储，以提高硬盘读写效率</p>
<p>(3) RAID本质：防止硬盘物理损坏及增加存储设备吞吐量</p>
<p>(4) 分类：</p>
<p>​    A. RAID0</p>
<p>​        (a) 意义：原理：把<font color="red">至少2块硬盘</font>通过硬件或软件方式<font color="red">串联</font>，组成一个大的卷组，并将数据依次写入到各个硬盘中</p>
<p>​        (b) 优点：数据同步传输，读取/写入分开，性能大大提升</p>
<p>​        (c) 缺点：若任意一块硬盘故障会导致整个系统的数据损坏，无备份冗余能力、错误修复能力</p>
<p>​        (d) 总结：使用率100%，至少2块硬盘才能使用，优点是快，提升磁盘的读写速度，缺点是不安全</p>
<p>​        (e) 结构图：</p>
<p>​        <img src="/2019/07/17/Linux运维初级-七、RAID-与-LVM/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563347480702.png" alt="1563347480702"></p>
<p>​    B. RAID1：</p>
<p>​        (a) 产生原因：若生产环境对硬盘的读写速度没有较大要求，但希望增加数据安全性时可使用RAID1</p>
<p>​        (b) 原理：将<font color="red">至少2块硬盘并联起来</font>，写入数据时，同时写入，多个硬盘内容相同</p>
<p>​        (c) 本质：多个硬盘的镜像备份</p>
<p>​        (d) 优点：备份冗余数据，安全性大大提升</p>
<p>​        (e) 缺点： 硬盘利用率下降</p>
<p>​        (f) 总结：本质是镜像，使用两块磁盘，一式两份的方式，支持容错，冗余，数据安全不丢失，缺点是速度不快，使用率50%，成本较大</p>
<p>​        (g) 结构图：</p>
<p>​        <img src="/2019/07/17/Linux运维初级-七、RAID-与-LVM/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563348005237.png" alt="1563348005237"></p>
<p>​    C. RAID5:</p>
<p>​        (a) 产生原因：兼顾“读写速度”、“数据安全”、“成本”的一种折中方式</p>
<p>​        (b) 原理：<font color="red">需至少3块硬盘</font>，将数据分块存储到不同硬盘中，硬盘中必须存储其他一个硬盘的parity（奇偶校验信息）</p>
<p>​        (c) 优点：兼顾性能，通过“奇偶校验”替代“镜像备份”</p>
<p>​        (d) 缺点：硬盘数据安全性较低</p>
<p>​        (e) 总结：使用率(n-1)/n*容量，磁盘坏了会立即补上，数据会恢复</p>
<p>​        (f) 结构图：</p>
<p>​        <img src="/2019/07/17/Linux运维初级-七、RAID-与-LVM/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563348660963.png" alt="1563348660963"></p>
<p>​    D.RAID10：（<font color="red">主流</font>）</p>
<p>​        (a) 原理：<font color="red">至少需要4块硬盘</font>，先制作两两的RAID1阵列，以保证安全性，在两两制作RAID0，以提高读写速度</p>
<p>​        (b) 本质：RAID1+RAID0的组合</p>
<p>​        (c) 优点：兼具速度和安全性</p>
<p>​        (d) 缺点：成本较高</p>
<p>​        (e) 结构图：</p>
<p>​        <img src="/2019/07/17/Linux运维初级-七、RAID-与-LVM/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563349041574.png" alt="1563349041574"></p>
<p><strong>(5) mdadm命令：</strong></p>
<p>​    A. 过程：</p>
<p>​        (a) 关机添加4个新硬盘</p>
<p>​        (b) mdadm命令建立RAID10</p>
<p>​        (c) 格式化</p>
<p>​        (d) 建立挂载目录</p>
<p>​        (e) 挂载</p>
<p>​        (f) 开机挂载</p>
<p>​        (g) 查看信息</p>
<p>​    B. mdadm命令格式：</p>
<p>​        mdadm   -参数         &lt;RAID  设备名&gt;        [模式]        [成员设备名称]</p>
<p>​    C. 作用：建立或管理RAID</p>
<p>​    D. 参数：</p>
<p>​        (a) -a ：检测设备名称</p>
<p>​        (b) -C ：创建RAID</p>
<p>​        (c) -v ：显示过程</p>
<p>​        (d) -l ：指定RAID级别</p>
<p>​        (e) -n ：指定硬盘数量</p>
<p>​        (f) -f ：模拟设备损坏</p>
<p>​        (g) -D ：查看详细信息</p>
<p>​        (h) -r ：移除设备</p>
<p>​        (i) -Q ：查看摘要</p>
<p>​        (j) -S ：停止RAID磁盘阵列</p>
<p>​    E. 例：<font color="gree"><strong>添加4块硬盘，创建RAID10</strong></font></p>
<p>​        (a) 创建RAID10： mdadm    -Cv    /dev/md0    -a    yes    -n    4    -l    10    /dev/sdb    /dev/sdc    /dev/sdd    /dev/sde</p>
<p>​            -Cv ：创建RAID并显示过程</p>
<p>​            -a  yes ：检测创建设备名</p>
<p>​            -n    4  ：4块硬盘参与建立</p>
<p>​            -l   10  ：RAID级别为10</p>
<p>​        (b) 格式化：mkfs.xfs     /dev/md0</p>
<p>​        (c) 建立挂载目录：mkdir     /mnt/raiddev</p>
<p>​        (d) 挂载：mount     /dev/md0     /mnt/raiddev</p>
<p>​        (e) 开机挂载设置：vim    /etc/fstab</p>
<p>​            增加行：            /dev/md0    /mnt/raiddev    xfs    defaults    0    0</p>
<p>​        (f) 开机挂载检测：mount        -a</p>
<p>​        (g) 查看RAID10信息：mdadm        -D        /dev/md0</p>
<p>​    F. 模拟硬盘损坏的处理流程</p>
<p>​        (a) 模拟损坏：mdadm    /dev/md0    -f    /dev/sdb</p>
<p>​        (b) 查看信息：mdadm    -D    /dev/md0</p>
<p>​        (c) 关机，添加新硬盘</p>
<p>​        (d) 卸载RAID：umount    /dev/md0</p>
<p>​        (e) RAID补上新硬盘：mdadm    /dev/md0    -a    /dev/sdf</p>
<p>​        (f) 重启：reboot</p>
<p>​        (g) 查看信息：mdadm    -D    /dev/md0</p>
<p>​        (h) 注意：添加新硬盘时必须先卸载</p>
<p>​    G. 停止RAID</p>
<p>​        (a) 注意：在实际工作中，停止RAID前必须备份其中数据，否则数据会全部丢失</p>
<p>​        (b) 过程：</p>
<p>​            ◆ 卸载设备：umount    /dev/md0    </p>
<p>​            ◆ 删除开机挂载配置文件中RAID的记录</p>
<p>​            ◆ 停止RAID：mdadm    -S    /dev/md</p>
<p>​    H. RAID 10备份盘功能</p>
<p>​        (a) 产生原因：在RAID1中，某块硬盘损坏，在手工修复成功前另一块硬盘也同时损坏，则整个数据会全部丢失</p>
<p>​        (b) 原理：在RAID10中再添加一块硬盘，作为备份盘，一旦某硬盘损坏，会自动修复</p>
<p>​        (c) <font color="orange">RAID共需5块硬盘（4个数据盘，1个备份盘）</font></p>
<p>​        (d) 方法：</p>
<p>​            ◆ 新建RAID10+备份盘：mdadm    -Cv    /dev/md1    -a    yes    -n    4    -l    10    -x    1    /dev/sdb    /dev/sdc    /dev/sdd    /dev/sde    /dev/sdf</p>
<p>​            （-x    1 ：表示备份盘，1块硬盘）</p>
<p>​            （一般最后一块硬盘/dev/sdf 为备份盘，习惯放置在最后）</p>
<p>​            ◆ 查看信息摘要：mdadm    -D    /dev/md1</p>
<p>​            ◆ 模拟某硬盘损坏：mdadm    /dev/md1    -f    /dev/sdb</p>
<p>​            ◆ 重启系统：reboot</p>
<p>​            ◆  再次查看信息摘要：mdadm    -D    /dev/md1  ，备份盘/dev/sdf已替换故障硬盘</p>
</li>
<li><p><strong>LVM</strong>（逻辑卷管理器）</p>
<p>(1) 产生原因：由于硬盘分区并设置为RAID后，对其空间调整并不容易，此时用户随着实际的需求变化而动态调整硬盘分区大小时受到限制，无灵活性</p>
<p>(2) LVM作用：允许用户动态调整磁盘空间大小</p>
<p>(3) 原理：LVM是在磁盘分区与文件系统之间添加逻辑层，以提供一个抽象的卷组，使管理者可以忽略底层磁盘布局，从而实现对分区的灵活动态调整</p>
<p>(4) 分析：</p>
<p>​    A. 图：</p>
<p>​    <img src="/2019/07/17/Linux运维初级-七、RAID-与-LVM/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563416999528.png" alt="1563416999528"></p>
<p>​    B. 物理卷（PV, Physical Volume）：整个硬盘或分区</p>
<p>​    C. 卷组（VG, Volume Group）：由一个或多个物理卷（PV）组成的整体</p>
<p>​    D. 逻辑卷（LV, Logical Volume）：从卷组（VG）切割出的空间，用于创建文件系统，大小由PE的个数决定</p>
<p>​    E. 基本单元（PE, Physical Extent）：默认为4MB的基本块</p>
<p>(5) 基本命令：</p>
<p>​    <img src="/2019/07/17/Linux运维初级-七、RAID-与-LVM/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1563418291015.png" alt="1563418291015"></p>
<p>(6) 硬盘支持LVM的流程：</p>
<p>​    A. 将新硬盘支持物理卷技术</p>
<p>​    B. 创建卷组，将新硬盘加入卷组</p>
<p>​    C. 根据需求切割出指定容量的逻辑卷</p>
<p>​    D. 格式化逻辑卷</p>
<p>​    E. 创建挂载目录</p>
<p>​    F. 添加开机挂载信息</p>
<p>​    G. 挂载测试</p>
<p>​    H. 重启系统</p>
<p>(7) 例：<font color="gree">在虚拟机中添加2块新硬盘，创建物理卷及卷组，划分出150MB空间的逻辑卷并格式化挂载使用</font></p>
<p>​    A. 新建物理卷：pvcreate    /dev/sdb    /dev/sdc    </p>
<p>​    B. 新建卷组：vgcreate    /dev/vg1    /dev/sdb    /dev/sdc</p>
<p>​    C. 查看卷组信息：vgdisplay    /dev/vg1</p>
<p>​    D. 切割150MB逻辑卷：lvcreate    -n    lv1    -L    150MB    /dev/vg1</p>
<p>​        (a) -n ：新建逻辑卷</p>
<p>​        (b) -L：逻辑卷的容量，单位为数据量（K  M  G）</p>
<p>​    E. 查看逻辑卷信息：lvdisplay    /dev/vg1/lv1</p>
<p>​    F. 格式化逻辑卷：mkfs.xfs    /dev/vg1/lv1    </p>
<p>​    G. 建立挂载点：mkdir    /mnt/lvdev</p>
<p>​    H. 编辑开机挂载文件：vim    /etc/fstab        增加下列记录：</p>
<p>​                            /dev/vg1/lv1    /mnt/lvdev    xfs    defaults    0    0</p>
<p>​    I. 挂载测试：mount    -a</p>
<p>(8) 例：添加2块新硬盘，建立卷组，划分出200MB空间的逻辑卷并格式化挂载使用</p>
<p>​    A. pvcreate    /dev/sdd    /dev/sde</p>
<p>​    B. vgcreate    /dev/vg2    /dev/sdd    /dev/sde</p>
<p>​    C. vgdisplay    /dev/vg2</p>
<p>​    D. lvcreate    -n    lv2    -l    50    /dev/vg2</p>
<p>​        (a) lv2的路径：/dev/vg2/lv2</p>
<p>​        (b) <font color="red">-l ：表示以PE物理卷基本存储单位4MB为单位划分，给出4MB的倍数，50表示PE个数（50*4MB）</font></p>
<p>​    E. lvdisplay    /dev/vg2/lv2</p>
<p>​    F. mkfs.xfs    /dev/vg2/lv2    </p>
<p>​    G. mkdir    /mnt/lvdev2</p>
<p>​    H. vim    /etc/fstab        增加下列记录：</p>
<p>​        /dev/vg2/lv2    /mnt/lvdev2    xfs    defaults    0    0</p>
<p>​    I. mount    -a</p>
<p><strong>(9) 逻辑卷扩容</strong></p>
<p>​    A. 作用：根据实际需要扩大逻辑卷的存储容量</p>
<p>​    B. 过程：</p>
<p>​        (a) 卸载逻辑卷</p>
<p>​        (b) 扩容逻辑卷</p>
<p>​        (c) 再次格式化</p>
<p>​        (d) 挂载</p>
<p>​        (e) 查看信息</p>
<p>​    C. <font color="gree">例1：对上例lv1逻辑卷扩容到495MB</font></p>
<p>​        (a) 卸载：umount    /dev/vg1/lv1</p>
<p>​        (b) 查看卷组容量是否足够：vgdisplay    /dev/vg1</p>
<p>​        (c) 扩容：lvextend    -L    495MB    /dev/vg1/lv1</p>
<p>​        (d) 再次格式化：mkfs.xfs    -f    /dev/vg1/lv1</p>
<p>​        (e) 挂载：mount    /dev/vg1/lv1    /mnt/lvdev</p>
<p>​        (f) 查看逻辑卷信息：lvdisplay    /dev/vg1/lv1</p>
<p>​    D. <font color="gree">例2：对上例lv2逻辑卷扩容到800MB</font></p>
<p>​        (a) umount    /dev/vg2/lv2</p>
<p>​        (b) vgdisplay    /dev/vg2</p>
<p>​        (c) lvextend    -l    200    /dev/vg2/lv2</p>
<p>​        (d) mkfs.xfs    -f    /dev/vg2/lv2</p>
<p>​        (e) mount    -a</p>
<p>​        (f) lvdisplay    /dev/vg2/lv2</p>
<p>​    E. 注意</p>
<p>​        (a) 扩容或缩容之前必须先卸载设备</p>
<p>​        (b) 扩容后的逻辑卷必须格式化，否则挂载后显示逻辑卷容量不变</p>
<p><strong>(10) 逻辑卷缩容</strong></p>
<p>​    A. 注意</p>
<p>​        (a) 逻辑卷缩容相对扩容来说会有数据丢失的风险，则缩容之前应备份数据</p>
<p>​        (b) 对逻辑卷缩容之前应对逻辑卷进行数据完整性检查，以保证数据正确性、完整性</p>
<p>​        (c) 逻辑卷缩容之前必须卸载设备</p>
<p>​    B. 过程</p>
<p>​        (a) 查看逻辑卷使用量及剩余量</p>
<p>​        (b) 卸载设备</p>
<p>​        (c) 逻辑卷数据完整性检查</p>
<p>​        (d) 缩容逻辑卷</p>
<p>​        (e) 格式化逻辑卷</p>
<p>​        (f) 挂载逻辑卷</p>
<p>​        (g) 查看逻辑卷信息</p>
<p>​    C. <font color="gree">例：将上列lv1逻辑卷缩容到320MB</font></p>
<p>​        (a) 查看lv使用量：df    -h    /dev/vg1/lv1</p>
<p>​        (b) 卸载设备：umount    /dev/vg1/lv1</p>
<p>​        (c) 对lv进行完整性检查：xfs_repair    -n    /dev/vg1/lv1</p>
<p>​        (d) 缩容：lvreduce    -L    320MB    /dev/vg1/lv1   ，输入y确认</p>
<p>​        (e) 再次格式化：mkfs.xfs    -f    /dev/vg1/lv1</p>
<p>​        (f) 挂载：mount    /dev/vg1/lv1    /mnt/lvdev</p>
<p>​        (g) 查看lv信息：lvdisplay    /dev/vg1/lv1</p>
<p>​    D. <font color="gree">例2：将上例lv2逻辑卷缩容到440MB</font></p>
<p>​        (a) df    -h    /dev/vg2/lv2</p>
<p>​        (b) umount    /dev/vg2/lv2</p>
<p>​        (c) xfs_repair    -n    /dev/vg2/lv2</p>
<p>​        (d) lvreduce    -l    110    /dev/vg2/lv2    ，输入y确认</p>
<p>​        (e) mkfs.xfs    -f    /dev/vg2/lv2</p>
<p>​        (f) mount    -a</p>
<p>​        (g) lvdisplay    /dev/vg2/lv2</p>
<p><strong>(11) 删除LVM</strong></p>
<p>​    A. <font color="red">删除顺序：逻辑卷-&gt;卷组-&gt;物理卷</font></p>
<p>​    B. 注意：</p>
<p>​        (a) 删除时，上述顺序不能反向</p>
<p>​        (b) 删除时，需要输入“y”来确认操作</p>
<p>​        (c) 删除时，备份卷一同被删除</p>
<p>​        (d) 删除之前必须先备份数据</p>
<p>​    C. 过程</p>
<p>​        (a) 卸载设备</p>
<p>​        (b) 删除开机挂载记录信息</p>
<p>​        (c) 删除逻辑卷</p>
<p>​        (d) 删除卷组</p>
<p>​        (e) 删除物理卷（去掉硬盘的物理卷技术支持）</p>
<p>​        (f) 查看卷信息是否还存在</p>
<p>​    D. <font color="gree">例1：删除上例 lv1、 vg1  及物理卷技术</font></p>
<p>​        (a) 卸载设备：umount    /dev/vg1/lv1</p>
<p>​        (b) 删除lv1开机挂载记录：vim    /etc/fstab    删除其记录项</p>
<p>​        (c) 删除<strong>逻辑卷</strong>：<strong>lvremove</strong>    /dev/vg1/lv1    ，输入y确认</p>
<p>​        (d) 删除<strong>卷组</strong>：<strong>vgremove</strong>    /dev/vg1</p>
<p>​        (e) 删除<strong>物理卷</strong>：<strong>pvremove</strong>    /dev/sdb    /dev/sdc</p>
<p>​        (f) 查看信息：lvdisplay    vgdisplay    pvdisplay  （分别执行）</p>
<p>​    E.  <font color="gree">例2：删除上例 lv2、vg2及物理卷技术</font></p>
<p>​        (a) umount    /dev/vg2/lv2</p>
<p>​        (b) vim    /etc/fstab</p>
<p>​        (c) lvremove    /dev/vg2/lv2    ，输入y确定</p>
<p>​        (d) vgremove    /dev/vg2</p>
<p>​        (e) premove    /dev/sdd    /dev/sde </p>
<p><strong>(12) 逻辑卷快照功能</strong></p>
<p>​    A. 作用：类似于虚拟机软件的“快照”，可以通过快照还原点进行还原，起到备份功能</p>
<p>​    B. 注意：</p>
<p>​        (a) 快照卷的容量必须等于逻辑卷的容量</p>
<p>​        (b) 快照卷只能恢复一次，恢复后会自动删除</p>
<p>​    C. 过程：</p>
<p>​        (a) 查看卷组剩余容量是否足够</p>
<p>​        (b) 查看被制作快照的逻辑卷容量</p>
<p>​        (c) 制作快照卷</p>
<p>​        (d) 查看快照卷</p>
<p>​        (e) 测试恢复快照卷</p>
<p>​    D. <font color="gree">例：创建 lv 逻辑卷，制作快照卷</font></p>
<p>​        (a) 创建物理卷：pvcreate    /dev/sdb</p>
<p>​        (b) 创建卷组：vgcreate    /dev/vg</p>
<p>​        (c) 创建逻辑卷：lvcreate    -n    /dev/vg/lv    -L    200MB    /dev/vg</p>
<p>​        (d) 格式化：mkfs.xfs    /dev/vg/lv</p>
<p>​        (e) 建立挂载点：mkdir    /mnt/lvdev</p>
<p>​        (f) 挂载：mount    /dev/vg/lv    /mnt/lvdev</p>
<p>​        (g) 添加点文件：touch    t1.txt</p>
<p>​        (h) 制作 lv 的快照卷：lvcreate    -L    200MB    -s    -n    SNAP    /dev/vg/lv</p>
<p>​        (i) 进入逻辑卷：cd    /mnt/lvdev</p>
<p>​        (j) 新建大文件：dd    if=/dev/zero    of=loop    count=1    bs=10M</p>
<p>​        (k) 浏览文件：ls</p>
<p>​        (l) 退出挂载点：cd    /</p>
<p>​        (m) 卸载设备：umount    /mnt/lvdev</p>
<p>​        (n) 快照卷恢复：lvconvert    –merge    /dev/vg/SNAP</p>
<p>​        (o) 挂载设备：mount    /dev/vg/lv    /mnt/lvdev</p>
<p>​        (p) 进入逻辑卷查看文件是否存在：cd    /mnt/lvdev</p>
<p>​                                                                    ls</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级--- 六、磁盘管理</title>
    <url>/2019/07/17/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E5%85%AD%E3%80%81%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<center><font size="5">六、磁盘管理</font></center>

<ol>
<li><p><strong>磁盘基础知识</strong></p>
<p>(1) 概念：使用一片或多片带有磁性的铝合金制的盘片构成的外部存储介质</p>
<p>(2) 物理结构</p>
<p>​    A. 盘体</p>
<p>​    B. 磁头</p>
<p>​    C. 马达驱动</p>
<p>​    D. 缓存</p>
<p>​    E. SATA3接口</p>
<p>​    F. 电路板</p>
<p>(3) 逻辑结构</p>
<p>​    A. 磁道：同心圆</p>
<p>​    B. 扇区</p>
<p>​    C. 柱面</p>
<p>(4) 硬盘参数</p>
<p>​    A. 容量：1-4TB</p>
<p>​    B. 转速：7200转/分   5400RPM</p>
<p>​    C. 缓存：64MB-256MB</p>
<p>​    D. 接口：SATA3   /   SCSI</p>
<p>(5) 分区</p>
<p>​    A. 主分区：系统启动区</p>
<p>​    B. 扩展分区</p>
<p>​    C. 逻辑分区：基于扩展分区继续划分</p>
</li>
<li><p><strong>分区模式</strong></p>
<p>(1) MBR（主引导记录区模式）</p>
<p>​    A. 组成</p>
<p>​        (a) MBR位于磁盘第0磁道第0柱面第1扇区</p>
<p>​        (b) MBR总容量：446B</p>
<p>​        (c) 磁盘分区表（DPT）：64B</p>
<p>​        (d) 最后有2B（55  AA）为分区结束标志</p>
<p>​        (e) MBR所占扇区为512B</p>
<p>​    B. 作用：MBR包含硬盘一系列参数和一段引导程序，引导程序是检查分区表是否正确并且在系统硬件完成自检后引导具有激活标志的分区上的操作系统（C盘），并将控制权交给启动程序</p>
<p>​    C. MBR分区原则</p>
<p>​        (a) 主分区+扩展分区最多4个</p>
<p>​        (b) 扩展分区最多1个</p>
<p>​        (c) 扩展分区基础上再次划分逻辑分区</p>
<p>​        (d) 扩展分区不能格式化</p>
<p>​        (e) 一般会划分3个主分区+1个扩展分区</p>
<p>​        (f) 主分区（P）  扩展分区（E）  逻辑分区（L）</p>
<p>​        (g) 推荐剩余一些自由空间以方便分区空间扩容</p>
<p>(2) GPT</p>
<p>​    A. 产生原因</p>
<p>​        (a) MBR分区格式最大支持2.2TB硬盘</p>
<p>​        (b) 没有备份机制，若分区表损坏则会丢失整个硬盘内容</p>
<p>​        (c) MBR存储空间较小，只有446B，无法存储叫多功能数据</p>
<p>​    B. 方法</p>
<p>​        (a) 使用LBA（逻辑地址区块）的结构存储分区信息</p>
<p>​        (b) 共可分为68个LBA块，前34个LBA存储分区信息，后43个LBA块存储备份信息</p>
<p>​    C. GPT分区格式不再区分主分区及扩展分区，共可分128个主分区</p>
<p>​    D. GPT分区格式与MDR分区格式不兼容，不能混合使用</p>
</li>
<li><p><strong>文件系统</strong></p>
<p>(1) 意义：若空白硬盘相当于一张白纸，分区就是对其进行“裁切”，对分区进行方格划分就是对其进行建立文件系统，即格式化</p>
<p>(2) 常见文件系统格式：ext2  ext3  ext4  xfs  msdos</p>
<p>(3) ext2文件系统</p>
<p>​    A. 组成：</p>
<p>​        (a) super block  （超级块）</p>
<p>​        (b) inode       （索引块）</p>
<p>​        (c) block         （数据块）</p>
<p>​    B. 超级块：又称为硬盘地图，记录文件系统的整体信息，如：inode/block块的总量、使用量、空间块量、文件系统格式等相关信息</p>
<p>​    C. inode块：记录文件属性，一个文件占用一个inode块，并且记录文件数据所在的block块的地址，默认为128B</p>
<p>​    D. block ：存储文件数据，大小为1KB  2KB  4KB，大文件会占用多个数据块</p>
<p>​    E. 装入方式：将文件的数据块链式的不连续的装入硬盘中</p>
<p>​    F. ext2文件系统支持</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>Block大小</th>
<th>1KB</th>
<th>2KB</th>
<th>4KB</th>
</tr>
</thead>
<tbody><tr>
<td>最大单一文件限制</td>
<td>16GB</td>
<td>256GB</td>
<td>2TB</td>
</tr>
<tr>
<td>最大文件系统总容量</td>
<td>2TB</td>
<td>8TB</td>
<td>16TB</td>
</tr>
</tbody></table>
<p>​    (4) Centos7系统默认文件系统为xfs</p>
<p>​    (5) <strong>df命令：</strong></p>
<p>​        A. 格式：df   参数  目录/文件名</p>
<p>​        B. 作用：列出文件系统的磁盘使用量</p>
<p>​        C. 参数：</p>
<p>​            (a) -a ：列出所有文件系统</p>
<p>​            (b) -h ：以容量理解的方式列出信息（GB  MB  KB）</p>
<p>​        D. 常见：df   -ah</p>
<p>​    (6) <strong>du命令：</strong></p>
<p>​        A. 格式：du   -参数   文件或目录名</p>
<p>​        B. 作用：查看文件或目录占用硬盘容量</p>
<p>​        C. 参数：</p>
<p>​            (a) -a ：列出所有文件与目录信息</p>
<p>​            (b) -h ：以容易理解的方式列出信息（GB  MB  KB）</p>
<p>​            (c) -s ：列出总量</p>
<p>​        D. 注意：df命令检测速度较快</p>
<ol start="4">
<li><p><strong>硬件设备命名原则</strong></p>
<p>(1) 硬盘</p>
<p>​    A. 以sd开头后跟a-p表示16块硬盘编号，即sd[a-p]</p>
<p>​    B. 在MBR分区格式中由于主分区+扩展分区最多4个，则编号为1-4，第一个逻辑分区从5开始编号，即使主分区编号未使用，逻辑分区也不能使用</p>
<p>​    C. 硬盘名称格式：sd[a-p]数字</p>
<p>​    D. 例：sda1   第一块硬盘的第1个主分区</p>
<p>​                sdb5    第二块硬盘的第1个逻辑分区</p>
<p>​    E. 例：PPELL</p>
<p>​        (a) P:sda1</p>
<p>​        (b) P:sda2</p>
<p>​        (c) E:sda3</p>
<p>​        (d) L:sda5</p>
<p>​        (e) L:sda6</p>
<p>​    F. 模式：</p>
<p>​        (a) PE</p>
<p>​        (b) PPE</p>
<p>​        (c) PPPE</p>
<p>​        (d) PPPP</p>
<p>(2) 光驱：/dev/sr0</p>
<p>(3) 鼠标：/dev/mouse</p>
<p>(4) 打印机：/dev/lp[1-15]</p>
</li>
<li><p><strong>添加新硬盘</strong></p>
<p>(1) 方法：关闭系统-&gt;编辑虚拟机设置-&gt;添加-&gt;硬盘-&gt;磁盘类型：SCSI（推荐）-&gt;创建新的虚拟磁盘-&gt;磁盘大小：20GB，存储为单个文件-&gt;默认名称-&gt;完成</p>
<p>(2) 注意：添加的新硬盘必须在关机情况下进行，必须保证新硬盘文件名不能重名</p>
</li>
<li><p><strong>硬盘分区</strong></p>
<p>(1) 检测硬盘分区的类型</p>
<p>​    A. 格式：parted  设备名   print</p>
<p>​    B. 例：parted  /dev/sda   print</p>
<p>​    C. 查看Prtition Table:msdos，分区表类型，若为msdos说明使用的为MBR分区格式，就不能使用GPT分区格式命令进行继续分区，否则已有数据会丢失</p>
<p>(2)  fdisk分区</p>
<p>​    A. 规划：规划分区个数、容量、类型</p>
<p>​    B. 注意：fdisk为MBR分区格式命令</p>
<p>​    C. 分区功能</p>
</li>
</ol>
<p>​            (a) n：新建分区</p>
<p>​            (b) p：查看分区列表</p>
<p>​            (c) d：删除分区</p>
<p>​            (d) w：保存分区并退出</p>
<p>​            (e) m：查看帮助</p>
<p>​            (f) l ：查看可分区的类型</p>
<p>​        D. 过程：</p>
<p>​            (a) 分析：</p>
<p>​                ◆ 目标：dev/sdc</p>
<p>​                ◆ 个数：3个分区</p>
<p>​                ◆ 类型：2P   1E   1L</p>
<p>​                ◆ 容量：5G   5G  剩余</p>
<p>​            (b)<strong>fdisk  /dev/sdc</strong></p>
<p>​                ◆ command ：输入分区命令为n（新建）</p>
<p>​                ◆ partition type ：分区类型，p（主分区），e（扩展分区），l（逻辑分区）</p>
<p>​                ◆ partition  number ：分区编号，回车默认</p>
<p>​                ◆ First  Sector ：起始扇区编号，回车默认</p>
<p>​                ◆ last  sector ：终止扇区编号，输入：+5G，回车</p>
<p>​                ◆ 剩余同上</p>
<p>​                ◆ 输入p查看分区列表，输入w保存同步磁盘并退出</p>
<p>​        E. 删除分区</p>
<p>​            (a) 分区向导中输入d</p>
<p>​            (b) 正向新建分区，反向删除分区</p>
<p>​        F. 注意：若无法查看分区结果列表，则表示分区信息还未写入内核（常见情况），输入“partprobe”命令进行手动将分区信息同步到内核，再不行就重启</p>
<p>​    (2) <strong>lsblk命令</strong></p>
<p>​        A. 格式：lsblk   -参数   /dev/sd?</p>
<p>​        B. 作用：查看磁盘分区信息</p>
<p>​    (3) <strong>blkid命令</strong></p>
<p>​        A. 格式：blkid   -参数   /dev/sd?</p>
<p>​        B. 作用：查看磁盘ID信息</p>
<p>​        C. 常用：blkid</p>
<p>​    (4) <strong>gdisk分区</strong></p>
<p>​        A. 注意：对于同一硬盘，fdisk和gdisk不能混用</p>
<p>​        B. 格式：gdisk   /dev/sd?</p>
<p>​        C. 过程：</p>
<p>​            (a) gdisk   /dev/sdd</p>
<p>​            (b) partition  table  scan ：扫描分区类型是否已存在</p>
<p>​            (c) Command(? for help) ：新建（n） 删除（d）  查看列表（p）  保存（w）</p>
<p>​            (d) partirion number(1-128, default 1)：设置分区编号，回车即可</p>
<p>​            (e) First sector：设置起始扇区值，默认，回车即可</p>
<p>​            (f) Last sector：设置终止扇区值，输入分区容量，如：+5G</p>
<p>​            (g) Hex code or GUID(L to show code,Enter = 8300)  ：设置分区文件系统的ID，回车即可</p>
<ol start="7">
<li><p><strong>格式化</strong></p>
<p>(1) 意义：对分区或其他设备建立文件系统</p>
<p>(2) 查看分区命令及类型：输入mkfs后2次tab键</p>
<p>(3) <strong>mkfs.xfs命令：</strong></p>
<p>​    A. 格式：mkfs.xfs   -参数   设备名</p>
<p>​    B. 作用：对磁盘分区或文件进行xfs类型格式化</p>
<p>​    C. 参数：</p>
<p>​        (a) -f ：强制格式化，已有文件系统需要使用此参数</p>
<p>​        (b) -b ：后跟上block容量，范围512B-64KB，注意，Linux限制为4KB</p>
<p>​    D. 例：对/dev/sdc  进行xfs格式化</p>
<p>​            mkfs.xfs     /dev/sdc1</p>
<p>​            mkfs.xfs     /dev/sdc2</p>
<p>(4) <strong>mkfs.ext4命令：</strong></p>
<p>​    A. 格式：mkfs.ext4   -参数  设备名</p>
<p>​    B. 参数：-b ：设定block大小，如：1KB  2KB  3KB  4KB</p>
</li>
<li><p><strong>挂载</strong></p>
<p>(1) 意义：建立文件目录，通过设置该目录与分区的关系，以进入分区 </p>
<p>(2) 挂载点：进入分区的目录称为挂载点</p>
<p>(3) 挂载前的注意事项</p>
<p>​    A. 单一文件系统不应该被重复挂载在不同的挂载点（目录）中</p>
<p>​    B. 单一目录不应该重复挂载多个文件系统</p>
<p>​    C. 作为挂载点的目录，应为空目录，否则原有数据会隐藏</p>
<p>(4) <strong>mount目录</strong></p>
</li>
</ol>
<p>​        A. 格式：mount   -参数  设备名  挂载点目录</p>
<p>​        B. 作用：将分区挂载挂载到指定文件目录上</p>
<p>​        C. 参数：</p>
<p>​            (a) -a ：按照挂载配置文件/etc/fstab对未挂载的设备全部进行挂载</p>
<p>​            (b) -t ：指定文件系统，不常用，一般系统会自动判断文件系统类型</p>
<p>​        D. 例：建立挂载目录，挂载/dev/sdc的分区</p>
<p>​            mkdir   /mnt/m1  /mnt/m2  /mnt/m5  /mnt/m6</p>
<p>​            mount  /dev/sdc1  /mnt/m1</p>
<p>​            mount  /dev/sdc2  /mnt/m2</p>
<p>​            mount  /dev/sdc5  /mnt/m5</p>
<p>​            mount  /dev/sdc6  /mnt/m6</p>
<p>​        E. 挂载光盘</p>
<p>​            (a) 光盘名称：/dev/sr0 或 /dev/cdrom</p>
<p>​            (b) 方法：mount   /dev//sr0  /media</p>
<p>​            (c) 注意：光盘为只读属性，只能以只读方式挂载</p>
<ol start="9">
<li><p><strong>卸载</strong></p>
<p>(1) mount命令：</p>
<p>​    A. 格式：umount  -参数   设备名称或挂载点目录名</p>
<p>​    B. 作用：卸载设备</p>
<p>​    C. 参数：</p>
<p>​        (a) -f ：强制卸载</p>
<p>​        (b) -l ：立刻卸载文件系统，比-f还强</p>
<p>​        (c) -n ：不更新/etc/mtab情况下卸载</p>
<p>​    D. 例：卸载/dev/sdc</p>
<p>​            umount  /dev/sdc1 </p>
<p>​            umount  /dev/sdc1</p>
<p>​            umount  /mnt/m5</p>
<p>​            umount  /mnt/m6</p>
<p>​    E. 注意：卸载时应cd离开挂载点目录，否则文件系统忙，无法卸载</p>
</li>
<li><p><strong>开机挂载</strong></p>
<p>(1) 产生原因：手动挂载后系统重启会自动卸载，应设置开机挂载使其永久生效</p>
<p>(2) 配置文件：/etc/fstab</p>
<p>(3) 配置文件分析</p>
<p>​    A. 共6列</p>
<p>​    B. 内容：</p>
<p>​            设备名  挂载点目录  文件系统   defaults  0 0</p>
<p>​            /dev/sdc1  /mnt/m1     xfs      defaults  0 0 </p>
<p>​    C. defaults ：文件系统参数为默认</p>
<p>​    D. 0 ：是否备份</p>
<p>​    E. 0 ：开机是否用fsck进行扇区检查，但xfs文件系统不支持则为0</p>
<p>(4) fstab配置完毕后使用：mount   -a  完成检测 再重启</p>
<p>(5) 使用lsblk命令查看是否开机挂载成功</p>
<p>(6) 注意：</p>
<p>​        A. 根目录/ 是必须挂载的，而且一定要先于其他mount point被挂载</p>
<p>​        B. 其他mount point必须为已建立的目录，可任意指定，但一定要遵守必须的系统目录架构原则（FHS）</p>
<p>​        C. 配置完毕后必须使用mount  -a检测，否则系统启动失败</p>
</li>
<li><p><strong>挂载大文件</strong></p>
<p>(1) 产生原因：由于无自由分区空间，需要添加新分区时，可以对某个已存在的分区的剩余空间制作一个大文件，对其进行格式化挂载当做一个新的分区使用，从而实现不添加新的硬件而增加新分区</p>
<p>(2) 步骤：制作大文件-&gt;格式化-&gt;开机挂载</p>
<p>(3) 方法：例：对/dev/sdc6的剩余空间制作3G大文件进行挂载</p>
<p>​    A. cd   /mnt/m6</p>
<p>​    B. df   /mnt/m6</p>
<p>​    C. dd  if=dev/zero  of=/mnt/m6/loopdisk  bs=1G count=3</p>
<p>​            （制作3G的大文件）</p>
<p>​    D. start  /mnt/m6/loopdisk   （查看文件属性）</p>
<p>​    E. mkfs.xfs  -f  loopdisk  （格式化）</p>
<p>​    F. mkdir  /mnt/loopdev  （建立大文件挂载点目录）</p>
<p>​    G. mount  -o  loop  /mnt/m6/loopdisk  /mnt/loopdev</p>
<p>​            （挂载大文件，需要加  -o  loop  参数）</p>
<p>​    H. 开机挂载设置</p>
<p>​        (a) vim  /etc/fstab</p>
<p>​        (b) 插入如下内容：</p>
<p>​                /mnt/m6/loopdisk  /mnt/loopdev   xfs   defaults  0  0</p>
<p>​        (c) 保存退出</p>
<p>​        (d) mount   -a   （进行检测）</p>
<p>​        (e) reboot   （重启）</p>
</li>
<li><p><strong>增加swap交换分区</strong></p>
<p>(1) 过程</p>
<p>​    A. 成新划分一个分区</p>
<p>​    B. 格式化分区</p>
<p>​    C.  启用新的swap</p>
<p>​    D. 查看系统信息</p>
<p>​    E. 开机挂载</p>
<p>(2) 例：对/dev/sdb 新建2G分区空间，对其格式化并生效为swap 空间</p>
<p>​    A. fdisk     /dev/sdb</p>
<p>​    B. mkswap   /dev/sdb6</p>
<p>​    C. swapon    /dev/sdb6</p>
<p>​    D. free   -h</p>
<p>​    E. vim  /etc/fstab   ，输入以下内容：</p>
<p>​        /dev/sdb6   swap   swap    defaults    0    0</p>
<p>​    F. mount     -a</p>
<p>​    G. reboot     （重启）</p>
<p>​    H. free    -h    （检测）</p>
</li>
</ol>
<p>13.<strong>制作大文件生成swap</strong></p>
<p>​    (1) 过程</p>
<p>​        A. 查看分区</p>
<p>​        B. 制作大文件</p>
<p>​        C. 格式化</p>
<p>​        D. 开机挂载</p>
<p>​        E. 查看swap信息</p>
<p>​    (2) 方法</p>
<p>​        A. cd    /mnt/m5</p>
<p>​        B. dd   if=/dev/zero     of=swaploop    bs=512MB    count=1</p>
<p>​        C. mkswap    /mnt/m5/swaploop    （格式化为虚拟内存）</p>
<p>​        D. swapon    /mnt/m5/swaploop    （生效）</p>
<p>​        E. vim    /etc/fstab    ，插入如下内容：</p>
<p>​            /mnt/m5/swaploop    swap    swap    defaults    0    0</p>
<p>​        F. mount    -a</p>
<p>​        G. reboot</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级--- 五、用户账户及权限</title>
    <url>/2019/07/17/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E4%BA%94%E3%80%81%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E5%8F%8A%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<center><font size="5">三、用户账户及权限</font></center>

<ol>
<li><p><strong>用户账户及身份</strong></p>
<p>(1) UUID值</p>
<p>​    A. 作用：User Identification，系统为每一个账户都分配了一个        唯一的编号（身份证号），具有唯一性，账户的权限来源        于    UUID值</p>
<p>​    B. 分类：</p>
<p>​        (a) 超级管理员root：0</p>
<p>​        (b) 系统用户UUID：1-999，系统为每一个服务都分配一个账户，防止某个服务程序出现漏洞，从而被黑客提权至整个服务器，每个服务程序都由一个账户负责，控制破坏范围</p>
<p>​        (c) 普通账户：从1000开始，由root创建，用于日常维护</p>
<p>​    C. 特点：</p>
<p>​        (a) UUID值不能相同</p>
<p>​        (b) 系统账户即使某些UUID值未使用，也不能分配给普通账户</p>
<p>​    D. id命令：</p>
<p>​        (a) 作用：查看账户的UUID值</p>
<p>​        (b) 格式：UUID  账户名</p>
<p>(2) 账户及工作组的创建</p>
<p>​    A. 意义：为了方便管理数据，引入了系统-&gt;工作组-&gt;账户-&gt;权限的概念，相当于企业-&gt;部门-&gt;员工-&gt;权限</p>
<p>​    B. <strong>useradd命令：</strong></p>
<p>​        (a) 作用：创建账户</p>
<p>​        (b) 格式：useradd   -参数   账户名 </p>
<p>​        (c) 参数：</p>
<p>​            ◆ -d ：指定用户的家目录（默认为：/home/用户名称）</p>
<p>​            ◆ -e ：账户到期时间，格式为：YYYY-MM-DD</p>
<p>​            ◆ -u ：指定该用户账户的UID值</p>
<p>​            ◆ -g ：指定一个初始的用户基本组（必须已存在）</p>
<p>​            ◆ -G ：指定一个或多个扩展用户组</p>
<p>​        (d) 例：</p>
<p>​            useradd  test3  -e  2019-7-15  -u  3000  -g  test</p>
<p>​        （设置test3账户，到期时间为2019-7-15，指定该账户UID值为3000，指定用户基本组为test）</p>
<p>​    C. <strong>userdel命令：</strong></p>
<p>​        (a) 作用：删除账户</p>
<p>​        (b) 格式：userdel  -参数  账户名</p>
<p>​        (c) 参数</p>
<p>​            ◆ -f ：强制删除</p>
<p>​            ◆ -r ：同时删除账户及用户家目录</p>
<p>​    D. <strong>groupadd命令：</strong></p>
<p>​        (a) 作用：创建工作组</p>
<p>​        (b) 格式：group  -参数  工作组名称</p>
<p>​        (c) 参数：-g ，指定工作组的gid编号</p>
<p>​    E. <strong>groupdel命令：</strong></p>
<p>​        (a) 作用：删除工作组</p>
<p>​        (b) 格式：groupdel  工作组名</p>
<p>​        (c) 注意：工作组中包含有账户时，不能删除，可以通过删除账户一并删除工作组</p>
<p>(3) 账户及工作组的修改</p>
<p>​    A. <strong>usermod命令：</strong></p>
<p>​        (a) 作用：修改账户信息参数</p>
<p>​        (b) 格式：usermod  -参数  账户名</p>
<p>​        (c) 参数：</p>
<p>​            ◆ -u ：修改用户uid</p>
<p>​            ◆ –g ：变更用户组</p>
<p>​    B. <strong>passwd命令：</strong></p>
<p>​        (a) 作用：给账户设置密码</p>
<p>​        (b) 格式：passwd  -参数  账户名</p>
<p>​        (c) 参数：</p>
<p>​            ◆ -l ：锁定用户，禁止登录</p>
<p>​            ◆ -u ：解除锁定，允许用户登录</p>
<p>​            ◆ -d ：允许用户可以用空格密码登录系统</p>
<p>​            ◆ -e ：强制用户在下次登录时修改密码</p>
</li>
<li><p><strong>文件权限及归属</strong></p>
<p>（1）文件权限</p>
<p>​    A. 可读：r</p>
<p>​    B. 可写：w</p>
<p>​    C. 可执行：x</p>
<p>（2）目录权限</p>
<p>​    A. 可读：r ，可以查看目录中的文件列表 </p>
<p>​    B. 可写：w ，可对目录中的文件进行操作</p>
<p>​    C. 可执行：x  ，可打开目录</p>
<p>（3）文件归属</p>
<p>​    A. 所有者</p>
<p>​    B. 所属组</p>
<p>​    C. 其他用户</p>
<p>（4）文件权限数字化</p>
<p>​    A. 数字组成：r（4）  w（2）  x（1）</p>
<p>​    B. 表示类别</p>
<p>​        (a) rwx：完整权，7</p>
<p>​        (b) rw- :  6</p>
<p>​        (c) r-x :  5</p>
<p>​        (d) r– :  4</p>
<p>​        (e) -wx :  3</p>
<p>​        (f) -w- :  2</p>
<p>​        (g) –x  ：1</p>
<p>​        (h) —  ： 0</p>
<p>​    C. 例：</p>
<p>​        764：rwxrw-r–         642:  rw-r—w-     153 :  –xr-x-wx</p>
<p>​        rwxrw-r– : 764         rw–w–wx : 623     rw-r–r– :  644</p>
<p>（5）执行ls -l （ll）显示信息意义</p>
<p>​        如：-rw-r–r–. 1 root root 1950  6 jun 13 01:00  initial-setup-ks.cfg </p>
<p>​        A. -rw-r–r–. ：普通文件（-） 权限（rw-r–r–） 开启SELinux(.)</p>
<p>​        B. 1 : 文件字节数</p>
<p>​        C.  root root： 所属账户  所属工作组 </p>
<p>​        D. 1950 ：文件占用容量</p>
<p>​        E. 6 jun 13 01:00 ：文件修改时间</p>
<p>​        F. initial-setup-ks.cfg：文件名</p>
<p>（6）<strong>chmod命令：</strong></p>
<p>​        A. 作用：修改文件权限信息</p>
<p>​        B. 格式：chmod  参数   权限   文件或目录名</p>
<p>​        C. 例： chmod  777  h1.cfg</p>
<p>（7）<strong>chown命令：</strong></p>
<p>​        A. 作用：修改文件所属账户及工作组</p>
<p>​        B. 格式：chown  参数   所有者：所属组   文件或目录名</p>
<p>​        C. 例： chown  mk1:mk1   h2.cfg</p>
</li>
<li><p><strong>文件隐藏属性</strong></p>
<p>（1）文件隐藏权限：文件拥有一般权限还拥有隐藏权限，当文件权限足够但无法删除时，考虑是否有隐藏权限</p>
<p>（2）<strong>chattr命令：</strong></p>
<p>​    A. 作用：查看设置文件的隐藏权限</p>
<p>​    B. 格式：chattr   -参数   文件名</p>
<p>​    C. 参数：</p>
<p>​        ◆ i: 无法修改文件（目录中不能新建和删除）</p>
<p>​        ◆ a: 仅允许追加内容，不可以覆盖、删除</p>
<p>​        ◆ s:  文件变更后同步到硬盘</p>
<p>​        ◆ S:  从硬盘中彻底删除，不可恢复（0填充文件所在存储区）</p>
<p>（3）<strong>lsattr命令：</strong></p>
<p>​    A. 作用：查看文件的隐藏权限属性</p>
<p>​    B. 格式：lsattr   -参数   文件名</p>
<p>​    C. 例：</p>
<p>​            touch  h3.cfg</p>
<p>​            chattr  +a   h3.cfg （+a   增加a隐藏权限）</p>
<p>​            rm -f  h3.cfg      （无法删除）</p>
<p>​            lsattr   h3.cfg</p>
<p>​            chattr    -a    h3.cfg   （-a  去掉a隐藏权限）</p>
<p>​            rm  -f  h3.cfg</p>
</li>
<li><p><strong>账户切换</strong></p>
<p>(1) 切换原则</p>
<p>​    A. Root账户可任意切换到其他普通账户，不需要密码</p>
<p>​    B. 普通账户切换到root账户必须输入密码</p>
<p>​    C. 账户切换并不是注销，只是同时登录</p>
<p>(2) <strong>su命令：</strong></p>
<p>​    A. 格式：su   -参数   账户名</p>
<p>​    B. 作用： 切换账户</p>
<p>​    C. 常用：  su  -   账户名，减号表示创建新的环境变量信息</p>
<p>​    D. 注意：尽量减少使用su命令，因为可能暴露root密码</p>
<p>(3) <strong>sudo命令：</strong></p>
<p>​    A. 作用：临时赋予普通账户权限，完成原本root完成的任务</p>
<p>​    B. 格式：sudo  -参数   命令名称</p>
<p>​    C 参数：</p>
<p>​        ◆ -h: 列出帮助信息</p>
<p>​        ◆ -l : 列出当前用户可执行命令</p>
<p>​        ◆ -u (用户名UID值)：使用指定的用户身份执行命令</p>
<p>​        ◆ -k: 清空密码的有效时间，下次执行sudo时需要再次密码验证</p>
<p>​    D. sudo功能总结</p>
<p>​        ◆ 限制用户执行指定的命令</p>
<p>​        ◆ 记录用户执行的每一条命令</p>
<p>​        ◆ 验证密码后5分钟内不需再次输入密码</p>
<p>​        ◆ Sudo必须通过编译配置文件才能使用：visudo</p>
<p>​    E. 赋予普通账户临时权限</p>
<p>​        ◆ useradd  fox      新建账户</p>
<p>​        ◆ passwd   fox     设置密码</p>
<p>​        ◆ su  -  fox        切换账户</p>
<p>​        ◆ cd  /root</p>
<p>​        ◆ su   -  root</p>
<p>​        ◆ visudo  </p>
<p>​        ◆ 点击shfit + :  后输入set   nu  查看行号</p>
<p>​        ◆ 定位第98行</p>
<p>​        ◆ 点击i键添加    fox   ALL=(ALL)   ALL</p>
<p>​        （谁可以使用   允许使用的主机=（以谁的身份） 可以执行的命令列表）</p>
<p>​        ◆ 点击shfit +: 输入wq保存退出</p>
<p>​        ◆ su   -  fox</p>
<p>​        ◆ sudo   cd  /root</p>
<p>​        ◆ 输入fox账户密码</p>
<p>​        ◆ sudo   cat   /etc/passwd    完美执行</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级--- 四、文件系统命令</title>
    <url>/2019/07/17/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E5%9B%9B%E3%80%81%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<center><font size="5">四、文件系统命令</font></center>

<ol>
<li><p><strong>FHS</strong></p>
<p>(1) FHS：Linux文件系统层次化标准</p>
<p>(2) 拓扑：倒置树型，一切数据从/根目录开始</p>
<p>(3) 常见一级目录作用</p>
<p>​    A. root：管理员的家目录</p>
<p>​    B. etc：配置文件目录</p>
<p>​    C. dev：设备文件目录</p>
<p>​    D. mnt：挂载设备的默认目录</p>
<p>​    E. media：挂载光盘镜像的默认目录</p>
<p>​    F. bin：常用命令的程序存储目录</p>
<p>​    G. tmp：临时目录或共享目录</p>
<p>​    H. var：日志文件存储默认目录</p>
<p>​    I. boot：系统启动文件目录</p>
<p>(4) 注意：</p>
<p>​    A. FHS不具有强制性约束，但应遵循次行业规则，否则存储混乱</p>
<p>​    B. 所有目录注意区分大小写（默认小写）</p>
</li>
<li><p><strong>增、删、改命令</strong></p>
<p><strong>(1) touch命令：</strong></p>
<p>​    A. 作用：新建文件</p>
<p>​    B. 格式：touch   -参数     文件名</p>
<p>​    C. 例：  新建文本文档：touch   -t1.txt </p>
<p>​                                             touch   k1.txt     k2.sh    k3.cfg</p>
<p>​    D. 注意：vim  文件名  ，此文件若不存在则会新建</p>
<p><strong>(2) mkdir命令：</strong></p>
<p>​    A. 作用：新建目录</p>
<p>​    B. 格式：mkdir   -参数    目录名称</p>
<p>​    C. 参数</p>
<p>​        (a) -p  ：创建递归目录（多级目录），用ls命令查看</p>
<p>​        (b) -m  ：为新建目录增加权限</p>
<p>​        (c) 练习：用上面的命令建一个目录，安装tree小工具：yum   install   tree     -y  ，然后cd   /test检查树型目录的正确性</p>
<p>​        (d) rpm  -q   gcc查看gcc是不是安装成功</p>
<p><strong>(3) 利用touch命令创建c源文件编译并执行</strong></p>
<p>​        touch   test.c</p>
<p>​        vim    test.c</p>
<p>​        点击i键输入代码,   </p>
<p>​        Include &lt;stdio.h&gt;</p>
<p>​        Int main(void)</p>
<p>​        {</p>
<p>​            Int i,j;</p>
<p>​            For(i=1;i&lt;10;i++)</p>
<p>​            Printf(“%d\t”,i);</p>
<p>​            Printf(“\n”);</p>
<p>​            For(int i=1;i&lt;66;i++)</p>
<p>​            Printf(“-”);</p>
<p>​        }</p>
<p>​        点击ESC键</p>
<p>​        点击shift+:后输入wq保存并退出</p>
<p>​        编译: gcc    test.c（即源文件名）</p>
<p>​        看结果：../a.out</p>
</li>
</ol>
<p><strong>(4) rm命令：</strong></p>
<p>​    A. 格式：rm   -参数    文件名</p>
<p>​    B. 作用：删除文件或目录</p>
<p>​    C. 参数：</p>
<p>​        (a) -r ：删除目录</p>
<p>​        (b) -f ：删除不确认，即强制删除</p>
<p>​        (c) 例：cd   ~   （回到家目录）</p>
<p>​                    输入ls查看</p>
<p>​                    输入y确认删除</p>
<p>​                    输入ls查看</p>
<p>​                    rm   -f   t1.txt  t2.cfg（删除）</p>
<p><strong>(5) cp命令：</strong></p>
<p>​    A. 作用：拷贝文件或目录</p>
<p>​    B. 格式：cp   -参数   源文件   目标文件</p>
<p>​    C. 参数：</p>
<p>​        (a) -p ：保留源文件的原始属性</p>
<p>​        (b) -r ：递归拷贝</p>
<p>​        (c) -i ：目标文件已存在，提示是否覆盖</p>
<p>​        (d) 例：cp    /root/m1.txt    /home   （/root等价于~）</p>
<p><strong>(6) mv命令：</strong></p>
<p>​    A. 作用：移动文件或改名</p>
<p>​    B. 格式：mv  -参数   源文件或目录    目标文件或目录</p>
<p>​    C. 例：mv   m2.txt    t1/m1.txt  表示将m2移到t1中并改名为m1</p>
<p>​    D. 结论：</p>
<p>​        (a) 若源类型和目标类型都是文件或目录，则为重命名</p>
<p>​        (b) 若源类型为文件，目标类型为目录，则为剪切移动</p>
<p>​    E. 例：创建一个myDocument目录和一个Document文件，将Document文件移动到myDocument目录下，最后修改myDucument目录为test</p>
<p>​                 mkdir   myDocument   （创建目录）</p>
<pre><code>touch   Document      （创建文件）

mv  Document   myDocument  （移动）</code></pre><p>​                cd  myDocument         （进入到myDocument目录下）</p>
<p>​                ls                      （查看）</p>
<p>​                mv    Document    test    （改名）</p>
<p>​                ls    </p>
<p><strong>(7) dd命令：</strong></p>
<p>​    A. 格式：dd   if=/dev/zero   of=新文件名  bs=块大小  count=块个数</p>
<p>​    B. 作用：制作生成指定容量，内容为全数字0的大文件</p>
<p>​    C. 例：  cd  /</p>
<p>​                dd  if=/dev/zero   of=kong.txt  bs=50MB  count=2</p>
<p>​                stat  kong.txt  （相当于属性，有容量了）</p>
<p>​                再来一个：dd if=/dev/zero  of=loop.cfg  bs=1G  count=5</p>
<p>​    D. /dev/zero  ：是一个特殊的设备文件，可以输出无穷个数字0，其本身又不占空间，用于制作大文件来覆盖旧文件，防止恶意恢复，也可以制作大文件来作为分区使用    </p>
<p>​    E. 例：dd  if=/dev/zero  of=kong.txt  bs=10MB   count=5</p>
<p>​                （制作50MB的大文件）</p>
<p>​                做完后删除：rm   -f    kong.txt         </p>
<ol start="3">
<li><p><strong>文件属性查看命令</strong></p>
<p><strong>(1) file命令：</strong> </p>
<p>​    A. 格式：file    -参数   文件名</p>
<p>​    B. 作用：查看文件类别</p>
<p>​    C. 类型：</p>
<p>​        (a) empty ：空文件</p>
<p>​        (b) ASCLL  text ：ASCLL码文件（文本）</p>
<p>​        (c) directory ：目录文件</p>
<p>​        (d) block special ：块设备文件（高速设备）</p>
<p>​        (e) character special ：字符设备文件（低速设备）</p>
<p>​        (f) symbolic link ：链接文件（快捷方式）</p>
<p>​        (g) socket ：接口文件</p>
<p><strong>(2) cat命令：</strong></p>
<p>​    A. 格式：cat   -参数  文件名</p>
<p>​    B. 作用：输出文件内容到设备上（默认为显示器）</p>
<p>​    C. 参数：</p>
<p>​        (a) -b ：文件中所否非空行增加行号，从1开始编号</p>
<p>​        (b) -n ：文件中所有行增加行号</p>
<p>​        (c) 例： touch   k1.txt</p>
<p>​                    echo   “hello”  &gt;  k1.txt</p>
<p>​                    cat  k1.txt</p>
<p>​                    touch   k2.txt</p>
<p>​                    echo   “world”  &gt;  k2.txt</p>
<p>​                    cat    k2.txt</p>
<p>​                    touch  k3.txt</p>
<p>​                    cat   k1.txt    k2.txt   &gt;   k3.txt</p>
<p>​                    cat   k3.txt</p>
<p>​    D. 特殊功能：</p>
<p>​        (a) 文件内容合并：</p>
<p>​                    touch  k1.txt   k2.txt   k3.txt</p>
<p>​                    echo   “hello”   &gt;   k1.txt</p>
<p>​                    eEcho    “world”   &gt;  k2.txt</p>
<p>​                    cat  k1.txt   k2.txt   &gt;   k3.txt </p>
<p>​                （查看两个文件内容输出到新文件中）</p>
<p>​                    cat   k3.txt</p>
<p>​        (b) 倒序查看内容：tac   文件名</p>
<p>​    E. 注意：由于无翻页功能，适用于内容较少的文本文件查看</p>
<p><strong>(3) more命令：</strong></p>
<p>​    A. 格式： more   文件名</p>
<p>​    B. 作用：可翻页查看文件内容</p>
<p>​    C. 方法：</p>
<p>​        (a) 空格：翻页查看</p>
<p>​        (b) 回车：每行查看</p>
<p>​        (c) q ：退出</p>
<p><strong>(4) less命令：</strong></p>
<p>​    A. 同more命令</p>
<p>​    B. 点击j键下一行，k键上一行</p>
<p><strong>(5) head命令：</strong></p>
<p>​    A. 格式：head    -参数    文件名</p>
<p>​    B. 作用：查看文件的前几行内容</p>
<p>​    C. 参数：-n    行数</p>
<p>​    D. 例：head   -n   5   /etc/passwd  （前5行）</p>
<p><strong>(6) tail命令：</strong></p>
<p>​    A. 格式：tail   -参数   文件名</p>
<p>​    B. 作用：查看文件后几行或持续刷新内容</p>
<p>​    C. 例：head   -n  5  /etc/passwd  （后5行）</p>
<p>​                head   -f  /etc/passwd  （动态刷新内容）</p>
<p><strong>(7) wc命令：</strong></p>
<p>​    A. 格式：wc  -参数  文件名</p>
<p>​    B. 作用：统计文件的单词书、行数、容量</p>
<p><strong>(8) stat命令：</strong></p>
<p>​    A. 格式：stat   -参数  文件名</p>
<p>​    B. 作用：查看文件属性</p>
<p>​    C. 属性： </p>
<p>​        (a) access ：最近访问时间</p>
<p>​        (b) modify ：最近更改时间</p>
<p>​        (c) change ：最近改动时间</p>
</li>
<li><p><strong>文件查询命令：</strong></p>
<p><strong>(1) find命令：</strong></p>
<p>​    A. 作用：按照文件名、类型、属性等参数检索文件</p>
<p>​    B. 格式：find   查找路径   查找条件  操作</p>
<p>​    C. 查找路径：一般为绝对路径</p>
<p>​    D. 查找条件：</p>
<p>​        (a) -name   文件名    ：按照文件名检索</p>
<p>​        (b) -user    账户名    ：按照拥有者检索</p>
<p>​        (c) -group   工作组    ：按照工作组归属检索</p>
<p>​        (d) –type    b/d/c/l    ：按照文件类型检索</p>
<p>​        (e) –size    +50k   （-50k）:按照大于（小于）50k容量检索</p>
<p>​        (f) -newer   f1   !  f2   ：匹配比文件f1新却比f2旧的文件</p>
<p>​        (g) 通配符：</p>
<p>​            ◆ * ：任意内容、任意个数</p>
<p>​            ◆ ? ：任意内容、1个字符</p>
<p>​        (h) 并且：  -a      或：  -o    不是（取反）：  -not</p>
<p>​    E. 例：find   /   -name   host</p>
<p>​                find   /etc   -name   a<em>.</em>  （a开头文件）</p>
<p>​                find   /  -name   ?b<em>.</em>  （第二个字母为b的文件）  </p>
<p>​                find   /  -name  *.cfg   （检索所有的日志文件）</p>
<p>​                find   /  -user   YLX（普通账户YLX的所有文件，如    果不知道就cat   /etc/passwd） </p>
<p>​                find   /dev   -type  b  （检索块设备文件）</p>
<p>​                find    ~   -size    -10k  （检索小于10k的文件）</p>
<p>​                find    /  -type   b   |  wc （统计块设备文件个数） </p>
<p>​                find    /  -name  *.c  &gt;  f.txt  （检索c类型文件并    备份到f文件中）</p>
<p>​            自己查：ip地址   IP   </p>
<p>​            子网掩码        NETMASK</p>
<p>​            网关地址         GATEWAY</p>
<p>​            域名解析          DNS  （正向/反向）</p>
<p>​            超文本传输控制协议    （HTTP/HTTPS）</p>
<p><strong>(2) grep命令：</strong></p>
<p>​    A. 格式：grep  -参数  查找条件  文件名</p>
<p>​    B. 作用：在文件中按照条件检索内容</p>
<p>​    C. 参数</p>
<p>​        (a) -n  ：显示符合要求的行的行号</p>
<p>​        (b) -v  ：显示不符合要求的行</p>
<p>​        (c) -i   ：忽略字母的大小写</p>
<p>​        (d) -c  ：显示符合要求的行数</p>
<p>​        (e) -A数字  ：如-A2表示显示符合要求的行及下面2行</p>
<p>​        (f) -B数字  ：如-B5表示显示符合要求的行及上面5行</p>
<p>​        (g) -C数字  ：如-C3表示显示符合要求的行及上下各3行</p>
<p>D. 例：</p>
<p>​    (a) grep   -n  “root”  /etc/passwd   检索包含root</p>
<p>​    (b) Grep  -n   “/sbin/nologin”  /etc/passwd</p>
<p>​            （不允许登陆的账户信息）</p>
<p>​    (c) grep  -nv  “/sbin/nologin”  /etc/passwd</p>
<p>​            （允许登录的账户信息）</p>
<p>​    (d) grep   -nA3   “ftp”   /etc/passed</p>
<p>​            （检索包含ftp的行及下面3行）</p>
<p>​    (e) Grep   -n  “halt”  /etc/passwd   &gt;  grep1.txt</p>
<p>​            （使用文件保存检索结果）</p>
<p>E.正则表达式</p>
<p>​    (a) 作用：用于按照指定条件过滤大量文本，是一种表示条        件的规则和方法</p>
<p>​    (b) 正则与通配符的区别</p>
<p>​        ◆ 通配符：按照文件名进行检索，一般多数命令都支持</p>
<p>​        ◆ 正则：在文本中过滤字符串，一般多数语言、脚本等        程序都支持</p>
<p>​    (c)按照 [ ] 字符集进行过滤</p>
<p>​        ◆ [ab] ：表示检索包含a或者包含b的信息，括号中        多个内容只表示一个信息</p>
<p>​                    grep  -n  [dD]  /etc/passwd   过滤包含d或D</p>
<p>​                    grep   -n  [oo]  /etc/passwd  过滤包含o   </p>
<p>​        ◆ [^] ：表示反色显示不包含条件的内容</p>
<p>​                    grep  -n  [^r]  /etc/passwd  反色显示不包含r的字    符串</p>
<p>​                    grep  -n  [^r]oo  /etc/passwd  过滤不以r开头且包    含oo的行</p>
<p>​        ◆ [0-9] ：表示过滤包含数字的内容</p>
<p>​                    grep  -n  [0-9]  /etc/passwd  过滤包含数字的内容</p>
<p>​                    -grep  -n  [^7-9]  /etc/passwd  反色显示不包含7-9    的内容</p>
<p>​        ◆ [a-z]  [A-Z]  [a-zA-Z] ：表示过滤小写字母、大写字    母、字母</p>
<p>​                    grep  -n  [A-Z]  /etc/passwd  过滤包含大写字母的内    容</p>
<p>​        ◆ 注意：字符集：[]  [^]  [-] 区别</p>
<p>​    (d) 过滤行首或行尾</p>
<p>​        ◆ ^ ：过滤行首以谁开头的内容</p>
<p>​                    grep  -n  ^n  /etc/passwd  过滤行首以n开头的内容</p>
<p>​                    grep  -n  ^[A-Z]  /etc/passwd  过滤行首以大写字母    开头的内容</p>
<p>​        ◆ $ ：过滤行尾以谁结尾的内容</p>
<p>​                    grep  -n  $”]”  /etc/sos.conf  </p>
<p>​                （注意：[]表示字符集，若想表示中括号的作用，必须使用””进行转义）</p>
<p>​                    grep  -n  $”[0-9]  /etc/sos.conf”  以数字结尾的内容</p>
<p>​    ◆ 检索空白行：grep  -n  ^$  /etc/sos.conf</p>
<p>(e) 正则表达式的通配符</p>
<p>​    ◆ 一个任意字符：  <strong>.</strong>  </p>
<p>​    ◆ 重复前面0个或多个任意字符： *</p>
<p>​    ◆ 例：</p>
<p>​            grep  -n  r..t  /etc/passwd  检索以r开头t结尾中    间有两个任意字符的字符串</p>
<p>​            grep  -n  o*  /etc/passwd  检索不包含或包含o    的内容</p>
<p>​            grep  -n  oo*  /etc/passwd  检索至少包含o的内    容</p>
<p>​            grep  -n  ooo*  /etc/passwd  检索至少包含oo的    内容</p>
<p>​    ◆ 注意： .*表示所有内容</p>
<p>(f) 转义字符及区间字符</p>
<p>​    ◆ \ ：转义字符，即去掉其后字符附加功能，恢复到    本身功能</p>
<p>​            grep  -n  ]$  /etc/sos.conf</p>
<p>​    ◆ 区间字符：{n1,n2}，表示重复n1到n2次前面字    符，n1&lt;n2 ，n2可以省略，{n1}表示大于等于n1次</p>
<p>​                    （注意：{}必须使用\进行转义）  </p>
<p>​            grep  -n  o”{2}”  /etc/passwd 检索至少包含两个o    的内容</p>
<p><strong>(3) tr命令：</strong></p>
<p>​    A. 作用：替换文本文件中的字符</p>
<p>​    B. 格式：tr  原始字符  结果字符</p>
<p>​    C. 例：cat  /etc/passwd  |  tr  [a-z]  [A-Z]  </p>
<p>​            （显示passwd内容并将其小写字母改为大写）</p>
<p>​                cat  /etc/sos.conf  |  tr  #  %</p>
<p>​            （#和%需要转义）</p>
<p>​    D. 注意：tr命令一般不直接使用，即不推荐直接更改文件内    容，应显示文件内容并更改</p>
</li>
<li><p><strong>打包压缩命令</strong></p>
<p>(1) 作用：打包、压缩、解压缩文件</p>
<p>(2) 常用格式：</p>
<p>​    A. .tar ：由tar打包程序打包的文件（无压缩功能）</p>
<p>​    B. .tar.gz ：先由tar打包，再由gzip压缩</p>
<p>(3) 格式：tar   -参数  压缩文件名  被打包压缩的文件  </p>
<p>(4) 参数：</p>
<p>​    A. 打包压缩：</p>
<p>​        (a) -c ：压缩</p>
<p>​        (b) -z ：使用gzip进行压缩</p>
<p>​        (c) -v ：显示过程</p>
<p>​        (d) -f ：目标文件名</p>
<p>​        (e) 常用：-czvf</p>
<p>​    B. 解压缩</p>
<p>​        (a) -x ：解压缩</p>
<p>​        (b) 常用：-xzvf</p>
<p>(5) 例：打包压缩/root目录后解压缩（备份）</p>
<p>​    A. cd  ~</p>
<p>​    B. tar  -czvf    t1.tar.gz   /root</p>
<p>​    C. cd   /</p>
<p>​    D. mkdir   t2</p>
<p>​    E. cd   t2</p>
<p>​    F. tar  -xzvf   /root/t1.tar.gz</p>
<p>​    G. ls </p>
<p>(6) 注意：</p>
<p>​    A. 压缩文件使用“红色”表示</p>
<p>​    B. -c与-x不能同时使用</p>
</li>
<li><p><strong>管道符与重定向命令</strong></p>
<p>(1) 输入输出重定向</p>
<p>​    A. 作用：将默认的输入输出端进行改变</p>
<p>​    B. 符号：</p>
<p>​        (a) &gt; ：输出重定向，将输出内容重定向到文件</p>
<p>​        (b) &gt;&gt; ：输出重定向，追加输出</p>
<p>​    C. 重定向保存错误提示：</p>
<p>​        (a) 格式：命令  2&gt;文件名</p>
<p>​        (b) 例：ls   -l   temp  2&gt;err.txt</p>
<p>(2) 管道符</p>
<p>​    A. 格式：命令1 | 命令2 | 命令3……</p>
<p>​    B. 作用：将前一个命令的结果作为后一个命令的数据源</p>
<p>​    C. 例：统计包含root的行数</p>
<p>​                grep  “root”  /etc/passwd  |  wc</p>
</li>
<li><p><strong>常见的环境变量</strong></p>
<p>(1) 环境变量</p>
<p>​    A. 作用：表示bash命令解释器的命令程序存储路径</p>
<p>​    B. 显示：echo  $PATH</p>
<p>​    C. 命令程序：/usr/bin</p>
</li>
</ol>
<p>​    (2) 常见变量</p>
<p>​        A. HOME：用户的家目录</p>
<p>​        B. SHELL：SHELL程序目录</p>
<p>​        C. HISTSIZE：历史命令记录条数</p>
<p>​        D. PATH：执行文件的默认路径</p>
<p>​        E. MAIL：邮箱文件存储路径</p>
<p>​    (3) 注意：使用$运算符显示变量的值</p>
<ol start="8">
<li><p><strong>常见Linux文件类型</strong></p>
<p>(1) 普通文件：</p>
<p>​    A. 文本文件：存储ASCLL</p>
<p>​    B. 二进制文件</p>
<p>​    C. 注意：代号为-，白色</p>
<p>(2) 目录：</p>
<p>​    A. 作用：相当于Windows中的“文件夹”</p>
<p>​    B. 注意：代号为d，蓝色</p>
<p>(3) 链接文件：</p>
<p>​    A. 作用：相当于Windows的“快捷方式”，是一种指向式文件</p>
<p>​    B. 注意：代号l，绿色</p>
<p>(4) 设备文件：</p>
<p>​    A. 作用：Linux中一切数据皆文件，设备也是一种文件，可编辑</p>
<p>​    B. 注意：代号（b  c  等），黄色</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级--- 三、常用Linux命令</title>
    <url>/2019/07/17/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E4%B8%89%E3%80%81%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li><p><strong>命令提示符的意义</strong></p>
<p>（1）[root@localhost   ~] </p>
<p>​     A.   root:表示当前登录账户名称</p>
<p>​     B.   @：表示分隔符</p>
<p>​     C.   localhost：表示主机名</p>
<p>​     D.   <del>：<font size="3">表示此位置是当前工作路径，</font></del>相当于/root</p>
<p>（2）#：表示以root账户登录，$：表示以普通用户登录</p>
</li>
<li><p><strong>常见命令</strong></p>
<p>（1）命令书写格式：命令名称 + 空格 + 参数 + 空格 + 目标</p>
<p>（2）参数：</p>
<p>​     A.长格式（全称）：–参数</p>
<p>​     B.短格式：-参数</p>
<p>​     C.例：man   –help</p>
<p>​                man   -h</p>
<p><strong>（3）目录查看命令</strong></p>
<pre><code>A.格式：pwd

B.作用：查看当前工作目录的绝对路径</code></pre><p><strong>（4）目录切换命令：</strong></p>
<pre><code> A.格式：cd  路径

B.作用：切换工作目录

 C.路径：</code></pre><p>​            (a) 绝对路径：从/开始向下遍历</p>
<p>​            (b) 相对路径：从当前工作目录开始向下遍历（不包含当前工作目录）</p>
<p>​        D.特殊路径</p>
<pre><code>(a) cd   / ：切换根目录

(b) cd   .. ：返回上级目录

(c) cd   ~ ：切换root家目录

(d) cd   /root：同上

(e) cd   /home/普通账户名 ：切换普通账户的家目录</code></pre><p><strong>（5）目录浏览命令：</strong></p>
<pre><code>A.格式：ls   -参数

B.作用：查看目录中的内容

C.参数：</code></pre><p>​             (a) -a  ：查看隐藏文件（以点开头的为隐藏文件）</p>
<p>​             (b) -l  ：查看目录中的详细信息</p>
<p>​            (c) -d  ：查看当前目录</p>
<pre><code>D.注意：</code></pre><p>​            (a) 翻页查看：ls    |   more</p>
<p>​            (b) 查看目录内的详细信息（等同于ll命令）：ls   -l</p>
<p>​            (c) 查看当前目录的详细信息：ls   -dl</p>
<pre><code>E. ls命令查看的颜色意义：</code></pre><p>​            (a) 白色：表示普通文件</p>
<p>​            (b) 蓝色：表示目录</p>
<p>​            (c) 红色：压缩文件</p>
<p>​            (d) 黄色：设备文件</p>
<p>​            (e) 绿色：链接文件</p>
<p>​                    演示： cd   /dev</p>
<p>​                               cd    /</p>
<p>​                               Ls</p>
<p><strong>（6）date命令：</strong></p>
<p>​    A. 格式：date   [选项]   [“+显示时间格式”]</p>
<p>​    B. 注意：按照指定格式显示日期时间</p>
<p>​    C. 参数：</p>
<p>​        (a) -s  ：设定系统的日期时间</p>
<p>​        (b) -d  ：显示指定描述的日期时间（几天前/后）</p>
<p>​    D. 日期格式：</p>
<p>​        (a) %Y  ：显示完整的年份</p>
<p>​        (b) %m  ：显示月份</p>
<p>​        (c) %d   ：显示日（1-31）</p>
<p>​        (d) %a   ：星期几</p>
<p>​        (e) %j    ：一年中的第几天（1-366）</p>
<p>​        (f) 例：显示年月日：date   “+%Y-%m-%d”</p>
<p>​                                           date   “+%j”  （数字越大，文件越新）</p>
<p>​                                           date    “+%Y-%m-%d  %a”</p>
<p>​    E. 时间格式：</p>
<p>​        (a) %H ：小时（00-23）</p>
<p>​        (b) %M ：分钟（00-59）</p>
<p>​        (c) %S ：秒（00-60）</p>
<p>​        (d) %t ：相当于tab键（4个空格）</p>
<p>​        (e) 例：date  “+%H:%M:%S”</p>
<p>​                   date  “+%Y-%m-%d%t%H:%M:%S”</p>
<p>​    F. 其它：</p>
<p>​        (a) %p ：显示本地AM或PM（上午或下午）</p>
<p>​        (b) %Z ：显示时区</p>
<p>​        (c) %j ：一般用于备份文件或日志文件，增加此参数，数字越大，文件越新</p>
</li>
</ol>
<p>​        G.   date    -s   “2020-9-5     18:35:40”   设置系统新的日期时间    </p>
<p>​        H.   date    -d   “+2 day”   “+Y-%m-%d”     设置系统的日期为2天后  （减号为几天以前）</p>
<p><strong>（7）cal命令：</strong></p>
<p>​        A. 格式：  cal   -参数</p>
<p>​        B. 作用：显示日历</p>
<p>​        C. 例：</p>
<p>​            (a) cal   显示本月</p>
<p>​            (b) cal  -2019   显示全年的日历</p>
<p><strong>（8）echo命令：</strong></p>
<p>​        A. 格式：echo    -参数</p>
<p>​        B. 作用：将字符串输出到屏幕或文件中，显示变量的值</p>
<p>​        C. 例：echo    “HELLO”</p>
<p>​                    echo    “hello”   &gt;   文件名</p>
<p><strong>（9）history命令：</strong></p>
<p>​        A. 格式：history     -参数</p>
<p>​        B. 作用：显示命令历史记录</p>
<p>​        C. 配置文件：/etc/profile</p>
<p>​        D. 默认记录1000条历史命令</p>
<p>​        E. 修改历史命令记录条数：</p>
<p>​            (a) vim   /etc/profile</p>
<p>​            (b) HISTSIZE=1000   将1000改为指定数字</p>
<p>​            (c) reboot   重启</p>
<p>​        F. 清空历史命令记录：history   -c</p>
<ol start="3">
<li><strong>系统检测命令</strong></li>
</ol>
<p><strong>（1）ps命令：</strong></p>
<p>​    A.格式：ps    -参数</p>
<p>​    B.作用：显示进程的参数</p>
<p>​    C.参数：</p>
<p>​        (a) -a：显示所有进程</p>
<p>​        (b) -u：用户及其他详细信息</p>
<p>​        (c) -x：显示没有控制终端的进程</p>
<p>​    D.常用：ps   -au</p>
<p>​    E.注意：只要关注%CPU（cpu占用率）及%MEM（内存使用率）</p>
<p><strong>（2）top命令：</strong></p>
<p>​    A.作用：动态检测系统的活动与负载，相当于强化版的“任务管理器”</p>
<p>​    B.top命令显示的表头解释：</p>
<p>​        (a) 第一行：</p>
<p>​            ◆ 系统时间</p>
<p>​            ◆ 运行时间</p>
<p>​            ◆ 登录的终端数</p>
<p>​            ◆ 系统负载：1分、5分、15分钟平均值（三个值越小，系统负载越低）</p>
<p>​        (c) 第二行：进程总数、运行进程数、睡眠数、停止数、僵死数</p>
<p>​        (d) 第三行：</p>
<p>​            ◆ 用户资源占用百分比</p>
<p>​            ◆ 系统内核占用资源百分比</p>
<p>​            ◆ 改变过优先级的进程资源百分比</p>
<p>​            ◆ 空闲的资源百分比等</p>
<p>​        (e) 第四行：</p>
<p>​            ◆ 物理内存总量</p>
<p>​            ◆ 内存使用量</p>
<p>​            ◆ 内存空闲量</p>
<p>​            ◆ 作为内核缓存的内存量</p>
<p>​        (f) 第五行：</p>
<p>​            ◆ 虚拟内存量</p>
<p>​            ◆ 虚拟内存使用量</p>
<p>​            ◆ 虚拟内存空闲量</p>
<p>​            ◆ 已被提前加载的内存量</p>
<p>​    D. 点击q键退出</p>
<p><strong>（3）ifconfig命令：</strong></p>
<p>​    A.作用：查看本机网卡信息</p>
<p>​    B.信息：</p>
<p>​        (a) ens32为本机物理网卡</p>
<p>​        (b) inet：本机IP</p>
<p>​        (c) netmask：本机子网掩码</p>
<p>​        (d) RX：发送数据包个数</p>
<p>​        (e) TX：接收数据包个数</p>
<p><strong>（4）uname命令：</strong></p>
<p>​    A.格式：uname   -a</p>
<p>​    B.作用：显示系统的版本信息</p>
<p><strong>（5）free命令：</strong></p>
<p>​    A.格式：free    -h</p>
<p>​    B.作用：显示内存及虚拟内存的容量、剩余量等信息</p>
<p><strong>（6）who命令：</strong></p>
<p>​    A.作用：显示系统登录信息</p>
<p>​    B.信息：</p>
<p>​        (a) 账户</p>
<p>​        (b) 方式</p>
<p>​            ◆ :0   表示图形化界面</p>
<p>​            ◆ tty2  命令行界面</p>
<p>​            ◆ pts/0 远程登录界面</p>
<p>​        (c） 日期时间</p>
<p><strong>（7）last命令：</strong>显示系统登录或退出的详细信息，是强化版的who</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级--- 二、Linux的安装与部署</title>
    <url>/2019/07/17/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E4%BA%8C%E3%80%81Linux%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<center><font size="5">二、Linux的安装与部署</font></center>

<ol>
<li><p><strong>VMware虚拟机的安装</strong></p>
<p>(1) .增强型键盘驱动需要打勾</p>
<p>(2) .虚拟机的新建及设置</p>
<p>​    A. 稍后安装操作系统</p>
<p>​    B. 选择客户机系统：centos7 64 位，其目的是匹配系统，选择更适合的VMware tools 工具包</p>
<p>​    C. 命名虚拟机</p>
<p>​        (a).虚拟机名称：默认</p>
<p>​        (b).放在非C盘路径，与其他虚拟机名称要有区别</p>
<p>​    D. 磁盘容量</p>
<p>​        (a).大小：20GB，动态分配，使用多少分配多少，最大为20GB</p>
<p>​        (b).将虚拟磁盘文件存储为单个文件：存储速度快，不易于迁移</p>
<p>​        (c).将虚拟磁盘存储为多个文件：存储速度相对较慢，利于虚拟机迁移</p>
<p>​    E. 自定义硬件</p>
<p>​        (a).内存：1：4关系，1G虚拟机内存对应4G物理内存</p>
<p>​        (b).CPU：1颗，4核</p>
<p>​        (c).新CD/DVD：点击“选择ISO镜像文件”选项，点击“浏览”，设置下载的镜像文件路径</p>
<p>​        (d).网络适配器：</p>
<p>​            ◆ 桥接模式：将物理机网卡当作桥梁，建立虚拟机与互联网的连接关系，适用于不频繁变动的网络</p>
<p>​            ◆ NAT模式：（NAT：网络地址转换器）将物理当作路由器，通过“路由器”建立网络连接，适用于经常变换网络环境的情况下使用（VMnet 8）</p>
<p>​           ◆ 仅主机模式：仅当前虚拟机与物理机连接，无法连接互联网（VMnet 1）</p>
<p>​    (e).移除不必要的设备：USB、声卡、打印机设备</p>
<p>(3).虚拟机的功能配置</p>
<p>​    A.虚拟机移除</p>
<p>​        (a).虚拟机左侧“库”侧边栏中选中虚拟机文件，单右，移除</p>
<p>​        (b).定位虚拟机在Windows中的存储位置，选中文件夹删除</p>
<p>​    B.快照制作</p>
<p>​        (a).作用：将系统状态参数等信息冻结保存为镜像，以便于系统崩溃后进行恢复</p>
<p>​        (b).方法：虚拟机菜单-&gt;快照-&gt;拍摄快照（注意左下角进度比率）</p>
<p>​    C.虚拟网络编辑器</p>
<p>​        (a).作用：显示及配置网卡的地址参数</p>
<p>​        (b).方法：编辑菜单-&gt;虚拟网络编辑器</p>
<p>​        (c).注意：右下侧是否有黄色感叹号三角，若有说明虚拟机没有以管理员权限打开</p>
</li>
<li><p><strong>Linux系统部署</strong></p>
<p><font color="red">无法获取 <code>vmci</code> 驱动程序版本句柄无效解决办法：打开本地路径，找到以<strong>VMX</strong>结尾的文件，进入查找界面，在文本框输入 <code>vmci0.present</code>  点击查找下一个，查找到 <code>vmci0.present=&quot;TRUE&quot;</code> 代码，将<code>true</code>更改为<code>false</code>点击保存即可</font></p>
<p>（1）软件选择：带有GUI的服务器</p>
<p>（2）安装位置（分区）：</p>
<p>​        A. 我要配置分区-&gt;完成-&gt;点击“+”添加分区-&gt;设置挂载点及期望容量-&gt;完成-&gt;接受更改</p>
<p>​        B. 分区原则（最少三个分区）：</p>
<p>​            (a) . /boot：系统启动分区，400MB</p>
<p>​            (b) swap：交换分区（虚拟内存），4GB</p>
<p>​            (c) /：根分区，剩余容量（不填）</p>
<p>（3）关闭KDUMP（内存崩溃保护机制）以节省内存</p>
<p>​        A. 设置root高级管理员密码，设置普通账户名（大写）及密码</p>
<p>​        B. 初次进入系统的设置</p>
<p>​            a.登录：点击“未列出”-&gt;root-&gt;密码:123456</p>
<p>​            b.系统自带的六个终端</p>
<p>​                ◆ 方法：ctrl+alt+F1~F6</p>
<p>​                ◆ F1对应图形化界面</p>
<p>​                ◆ F2~F6对应5个命令行界面</p>
<p>​            c.清屏</p>
<p>​                ◆ ctrl+l</p>
<p>​                ◆ 命令：clear</p>
<p>​            d.查看本机IP地址：ip addr（查看ens33）</p>
<p>​            e.配置网卡：</p>
<p>​                (a)<code>cd     /etc/sysconfig/network-scripts</code></p>
<p>​                (b)<code>vim       ifcfg-ens32</code></p>
<p>​                (c)点击键盘i键，进入编辑状态，定位<code>ONBOOT=no</code>，将no删除编为yes</p>
<p>​                (d)点击esc键</p>
<p>​                (e)点击shift+:</p>
<p>​                (f)输入wq后保存退出</p>
<p>​                (g)重启网卡：<code>service network restart</code></p>
<p>​                (h)检测：<code>ping      [www.baidu.com</code>](<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>)</p>
<p>​                (i) <code>ctrl+c</code> 终止ping操作</p>
<p>​            f.快照制作：虚拟机-&gt;快照-&gt;拍摄快照-&gt;命名（见名知意）</p>
<p>（4）远程登录putty的使用：</p>
<p>​        A. Hosts name（or IP   address）：输入Linux的IP地址</p>
<p>​        B. Saved sessions：输入新名称后点击save</p>
<p>​        C. 点击open</p>
<p>​        D. Login   as：输入root</p>
<p>​        E. 输入密码</p>
<p>​        F. 字体、字号调整：定位标题栏-&gt;单击右键-&gt;change settings-&gt;Appearance-&gt;点击右键“change”按钮-&gt;设置 “粗体”，18号-&gt;确定-&gt;Apply</p>
</li>
<li><p><strong>系统YUM源的配置</strong></p>
<p>（1）yum配置文件目录：<code>cd   /etc/yum.repos.d</code>    （配置文件扩展名为.repo）</p>
<p>（2）替换yum源：</p>
<p>​        A. 删除自带yum配置文件：  <code>cd  /etc</code></p>
<p>​                                                          <code>rm  -rf   yum.repos.d</code>  （删除目录）</p>
<p>​                                                          <code>mkdir  yum.repos.d</code>  （新建同名目录）</p>
<p>​                                                           <code>cd  yum.repos.d</code>  （进入目录）</p>
<p>​        B. 下载网易yum配置文件：<a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p>
<pre><code>cd  /etc/yum.repos.d

wget  &lt;http://mirrors.163.com/.help/CentOS7-Base-163.repo&gt;</code></pre><p>（3） 建立新的yum缓存</p>
<p>​        <code>yum   clean  all</code>  （清理旧yum缓存）</p>
<p>​         <code>yum   makecache</code>    （新建缓存） </p>
<p>（4）更新系统<code>yum  update   kernel</code></p>
<p>（5）更新所有软件：<code>yum   update</code></p>
</li>
<li><p><strong>第二种方法（不用yum）,cmatrix实例的安装：</strong></p>
<p>（1) <code>wget  &lt;http://archive.ubunntu.com/ubuntu/pool/universe/c/cmatrix/cmatrix_1.2a.orug.tar.gz&gt;</code>  (下载软件) </p>
<p>（2）<code>Tar xvf cmatrix_1.2a.orig.tar.gz</code>  (解压缩)</p>
<p>（3）<code>cd  cmatrix-1.2a</code>          (进入解压缩后的目录)</p>
<p>（4） <code>yum  install   ncurses-devel</code>(安装依赖软件)</p>
<p>（5）<code>yum  install gcc   -y</code>       ( 安装依赖软件)</p>
<p>（6）<code>./configure  &amp;&amp;  make  &amp;&amp;  make  install</code>  (编译安装) </p>
<p>（7）任意目录下输入：<code>cmatrix</code>      （按Q退出）</p>
</li>
<li><p><strong>修改root账户密码</strong></p>
<p>（1）重启：<code>reboot</code></p>
<p>（2）内核选择界面点击上下键，使其停留在该界面</p>
<p>（3）点击键盘 e 键</p>
<p>（4）定位Linux16所在行，找到ro后删除，同位置添加</p>
<p>​                         <code>rw  init=/sysroot/bin/bash</code></p>
<p>（5）点击<code>ctrl+x</code></p>
<p>（6）输入： <code>hroot  /sysroot</code></p>
<p>（7）输入：<code>passwd</code></p>
<p>（8）输入2次新密码</p>
<p>（9）输入 <code>touch  /.authorelabel</code></p>
<p>（10）点击键盘<code>ctrl+d</code></p>
<p>（11）输入<code>reboot</code>重启</p>
</li>
<li><p><strong>关机重启</strong></p>
<p>（1）重启：<code>reboot</code>   或<code>shutdown   -i  now</code></p>
<p>（2）关机  :  <code>shutdown  now</code> 或 <code>halt</code></p>
</li>
</ol>
<p>14.<strong>常用的快捷键</strong></p>
<p>​    （1）清屏  <code>ctrl+l</code></p>
<p>​    （2）终止命令 <code>ctrl+c</code></p>
<p>​    （3）单词补全 <code>tab</code></p>
<p>​    （4）调出历史命令 :  键盘上下键  </p>
<p>​    （5）终止进程：<code>ctrl+z</code></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维初级--- 一、Linux环境简介</title>
    <url>/2019/07/17/Linux%E8%BF%90%E7%BB%B4%E5%88%9D%E7%BA%A7-%E4%B8%80%E3%80%81Linux%E7%8E%AF%E5%A2%83%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<center><font size="5">一、Linux环境简介</font></center>

<ul>
<li><font color="blue" size="4"><strong>说明：</strong></font></li>
</ul>
<p><strong>VMware 14密钥</strong>  </p>
<p>ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8</p>
<p>ZC5XK-A6EOM-080XQ-04ZZG-YF08D</p>
<p><strong>网易开源镜像</strong>（<a href="http://mirrors.163.com" target="_blank" rel="noopener">http://mirrors.163.com</a>）  </p>
<p><strong>阿里开源镜像</strong>（<a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">https://opsx.alibaba.com/mirror</a>）</p>
<p>熟练掌握常见命令（80个左右）</p>
<p>熟练掌握软件包安装                             （初级阶段）</p>
<p>熟练掌握系统结构和运行原理</p>
<p>熟练搭建各种常见服务器</p>
<p>熟悉网络安全并能配置服务器安全策略             （中级阶段）</p>
<p>熟悉掌握Linux下磁盘存储管理、用户权限管理、内存管理、文件系统管理、进程管理等</p>
<p>熟悉掌握系统故障排查方法并进行调优</p>
<ol>
<li><p><strong>Linux系统的构成</strong></p>
<p>(1) .Linux本质是一个内核（kernel）</p>
<p>(2) .Linux发行套件：将kernel与辅助软件、工具软件、文件系统等组成一个大型软件包，从而形成Linux发行套件</p>
</li>
<li><p><strong>Linux</strong>发行版本介绍</p>
<p>(1) .RHEL：红帽企业版，具有完整的Linux功能，企业首选</p>
<p>(2) .Centos：社区企业操作系统，是RHEL免费版，学习首选</p>
<p>(3) .Ubuntu：乌班图，是Linux桌面版操作系统</p>
</li>
<li><p><strong>Linux发行套件的版本构成</strong></p>
<p>(1) .DVD版本：以标准DVD容量（4.8G）进行发行的商业版本，具有基本组件（常用）</p>
<p>(2) .Everything版本：完整版，具有全部功能组件，10G容量</p>
<p>(3) .Minimal版本：最小化安装版（920MB），具有操作系统最小功能</p>
<p>(4) .Netinstall版本：网络安装版，批量化LAN安装</p>
<p>(5) .X86_64：使用平台为64系统</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端form表单</title>
    <url>/2019/07/14/WEB%E5%89%8D%E7%AB%AFform%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<ul>
<li><h4 id="input属性"><a href="#input属性" class="headerlink" title="input属性"></a><strong><code>input</code>属性</strong></h4><ul>
<li><code>name</code>：名字，类似id，可以用js取值和分类，后台用的较多</li>
<li><code>value</code>：表单提交项的值(不同类型的input，value的作用也不尽相同)</li>
<li><code>placeholder</code>(文本类)：文本输入提示(css3新增属性，用来提示文本输入)</li>
<li><code>checked</code>(选择类)：页面加载时默认选定的 input 元素</li>
<li><code>readonly</code>(文本类)：只读的文本输入元素</li>
<li><code>disabled</code>：规定禁用的 input 元素</li>
<li><code>type</code>：input的种类<ul>
<li><u>文本类</u>：<code>text</code>——文本框；<code>password</code>——密码</li>
<li><u>选择类</u>：<code>radio</code>——单选；<code>checkbox</code>——复选</li>
<li><u>按钮类</u>：<code>submit</code>/<code>image</code>——提交/图片提交；<code>reset</code>——重置；<code>button</code>——按钮</li>
<li><u>特殊类</u>：<code>file</code>——上传</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><font color="green">有点懵…不要着急，让我一个个举例~</font></p>
</blockquote>
<ol>
<li>文本类</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 后台数据库通过name值找到value（值） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可输入的文本框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"我是值"</span> <span class="attr">name</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 密码文本框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只读不可输入的文本框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"我是只读的"</span> <span class="attr">readonly</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>选择类    </li>
</ol>
<ul>
<li>单选框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置name="sex"使单选框生效，不能多选   checked表示默认选项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>

<ul>
<li>多选框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>羽毛球</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>按钮类</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"→"</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>特殊类</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 上传文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><h4 id="表单元素的专用伪类选择器：focus—-获得焦点"><a href="#表单元素的专用伪类选择器：focus—-获得焦点" class="headerlink" title="表单元素的专用伪类选择器：focus—-获得焦点"></a>表单元素的专用伪类选择器：focus—-获得焦点</h4><p>举个简单的例子，比如这里有一个按钮：<code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; class=&quot;button&quot; /&gt;</code>，那么如何获取焦点呢？很简单，就是在css样式里设置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="comment">/* 这里的样式自定义 */</span></span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> red dashed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="green">获取焦点后，表单的按钮类元素在鼠标移入时不会显示为可以点击的手型，可以用<code>cursor</code>的样式改变其效果(可以用在其他元素上)，鼠标在移入某元素上时的鼠标样式，这里有5种</font></p>
<ol>
<li>可以点击的手型</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>禁用手型（不可以被点击）</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可以任意拖动</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>提供帮助（在浏览器中显示为？，表示帮助）</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>等待（加载中的状态）</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: wait;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><h4 id="绑定焦点：label-内联元素"><a href="#绑定焦点：label-内联元素" class="headerlink" title="绑定焦点：label(内联元素)"></a>绑定焦点：<code>label</code>(内联元素)</h4><p><font color="blue">作用：绑定<code>input</code>元素定义标注，并帮助<code>input</code>元素获取焦点，也就是说当点击选择按钮后面的文字时，也能被选中</font></p>
<ul>
<li><p><strong>写法1：</strong><code>label</code>嵌套成<code>input</code>的父元素两个标签分开写，<font color="red" size="4">需要给文字加上<code>span</code>标签</font></p>
<p><font color="purple">以上面的单选代码为例：</font></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>写法2：</strong><code>label</code>的<code>for</code>属性的值=<code>input</code>的<code>id</code>值，<font color="red" size="4">需要给<code>input</code>加上<code>id</code>值</font></p>
<p><font color="purple">以上面的多选代码为例：</font></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">id</span>=<span class="string">"football"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"football"</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">id</span>=<span class="string">"basketball"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"basketball"</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">class</span>=<span class="string">"ball"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"ball"</span>&gt;</span>羽毛球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
</li>
<li><h4 id="form属性"><a href="#form属性" class="headerlink" title="form属性"></a><code>form</code>属性</h4><p>1.<code>method</code>：表单的提交方式（<code>POST</code>和<code>GET</code>）</p>
<ul>
<li>一般浏览器通过哪种方法都可以传输表单信息，而有些服务器只接受其中一种方法提供的数据。可以在 <code>&lt;form&gt;</code>标签的 <code>method</code> (方法)属性中指明表单处理服务器要用方法来处理数据，使 POST 还是 GET</li>
<li><code>POST</code> 方法，浏览器将会按照下面两步来发送数据。首先，浏览器将与 action 属性中指定的表单处理服务器建立联系，之后浏览器会按分段传输的方法将数据发送给服务器；在服务器端，一旦 POST 样式的应用程序开始执行时，就应该从一个标志位置读取参数，读到参数后，会在应用程序能够使用这些表单值以前，对这些参数进行解码。用户特定的服务器会明确指定应用程序应该如何接受这些参数</li>
<li><code>GET</code> 方法，浏览器会与表单处理服务器建立连接，然后直接在一个传输步骤中发送所有的表单数据：浏览器会将数据直接附在表单的 action URL 之后。这两者之间用问号进行分隔</li>
<li>GET、POST的区别：get在url里传送数据：安全性低、容量小，便于分享(商品地址和url有关)，适合获取，且会缓存；post安全性一般、容量几乎无限，更适合上传(图片等) </li>
</ul>
<ol start="2">
<li>action：表单处理服务器</li>
</ol>
<p><font color="orange">注意：凡是用户与服务器交互的表单标签应全部放在form标签内；form内的提交按钮提交的是整个form表单</font></p>
<p><strong>举个表单提交的例子~</strong>做一个天猫商城网站搜索商品的搜索框</p>
<p>HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://list.tmall.com/search_product.htm"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"搜索天猫商品"</span> <span class="attr">name</span>=<span class="string">"q"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜索"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="purple">然后在浏览器中打开，在文本框随便搜索什么东西，都能跳转到天猫商城的对应商品页</font></p>
</li>
</ul>
<hr>
<ul>
<li><h4 id="其他表单元素"><a href="#其他表单元素" class="headerlink" title="其他表单元素"></a>其他表单元素</h4><ol>
<li><p><code>select/option</code>：下拉选框/下拉选框的选项</p>
<ul>
<li>对高度的支持不兼容</li>
<li><code>size</code>(select属性)：用来设置同时显示选项的数量</li>
<li><code>selected</code>(option属性)：用来设置下拉框的默认选项</li>
</ul>
<p><strong>举个例子~</strong>做一个下拉选框，要求有北京、上海、广州，设置广州为下拉框的默认选项，同时显示2个选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">size</span>=<span class="string">2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"beijing"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"guangzhou"</span> <span class="attr">selected</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>textarea</code>：文本域，即自定义文本框的宽高</p>
<ul>
<li>各个浏览器下的默认滚动条显示不兼容</li>
<li><code>cols/rows</code>属性：列数/行数</li>
<li>css3新增 <code>resize</code> 自由缩放样式 <code>resize: none;</code>(禁用缩放)；<code>both</code>水平垂直都可以缩放；<code>horizontal</code>：只有水平方向可以缩放；<code>vertical</code> 只有垂直方向可以缩放。<font color="red">注意：一定要配合<code>overflow:auto</code> 一块使用</font></li>
</ul>
<p><strong>举个例子~</strong></p>
<ol>
<li>设置一个列数为30行数为10的文本框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本框：不能改变宽高 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文本域：可以通过设置列数和行数来更改宽高 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>设置一个150*150背景为红色的div盒子，用自由缩放样式可以拖动div盒子的右下角以改变大小</p>
<p>HTML部分：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="comment">/* 水平垂直都可以缩放 ，一定要配合overflow: auto;使用*/</span></span><br><span class="line">    <span class="attribute">resize</span>: both;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端定位和居中</title>
    <url>/2019/07/13/WEB%E5%89%8D%E7%AB%AF%E5%AE%9A%E4%BD%8D%E5%92%8C%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<ul>
<li><h4 id="定位详解"><a href="#定位详解" class="headerlink" title="定位详解"></a>定位详解</h4><ol>
<li><p><code>position: static;</code><strong>无定位（默认值）</strong></p>
<ul>
<li>元素出现在正常的流中(忽略 top, bottom, left, right 或者 z-index声明)。</li>
<li>当你没有为一个元素指定定位方式时，默认为static，也就是按照文档的流式(flow)定位，将元素放到一个合适的地方。</li>
<li>在不同的分辨率下，采用流式定位能很好的自适合，取得相对较好的布局效果。</li>
</ul>
</li>
<li><p><code>position: inherit;</code><strong>继承父元素的定位方式</strong></p>
</li>
<li><p><code>position: relative;</code><strong>相对定位</strong></p>
<ul>
<li>不影响元素本身特性，没有定位偏移量时对元素无影响</li>
<li>相对定位的元素仍然在文档流中，仍然占据 着它本来占据的未知空间（虽然它已经不在本来的位置了）</li>
<li>相对于其正常位置进行定位，<font color="blue">元素的位置通过偏移值：“left”、”top”、”right”、”bottom”进行规定</font></li>
<li>提升层级：用<code>z-index</code>样式的值可以改变一个定位元素的层级关系，从而改变元素的覆盖关系，值大者在上面</li>
</ul>
</li>
<li><p><code>position: absolute;</code><strong>绝对定位</strong></p>
<ul>
<li>使元素从文档流中被删除，结果就是该元素原本占据的空间被其他元素所填充</li>
<li><font color="red">使内联元素在设置宽高时支持宽高，区块元素在未设置宽度时由内容撑开宽度（改变元素的特性）</font></li>
<li>相对于 static 定位以外的<font color="green">第一个祖先元素进行定位(其父元素没有定位则逐层上找，直到document)。</font>元素的位置通过偏移值进行规定。<font color="purple" size="5px">（所以一般对其父元素也要设置定位）</font></li>
<li>提升层级：用<code>z-index</code>样式的值可以改变一个定位元素的层级关系，从而改变元素的覆盖关系，值大者在上面</li>
</ul>
</li>
<li><p><code>position: fixed;</code><strong>固定定位</strong></p>
<ul>
<li>元素的表现类似于将 position 设置为 absolute，不过<font size="4" color="red">其包含块是视窗(window)本身，也就是说下拉滚动条时包含块始终在窗口中。</font></li>
<li>定位效果类似之前学过的固定背景，元素与视窗始终相对静止。元素的位置通过偏移值进行规定。</li>
<li>提升层级，用z-index样式的值可以改变一个定位元素的层级关系，从而改变元素的覆盖关系，值大者在上面</li>
</ul>
</li>
<li><p><code>z-index: 99;</code><strong>z轴的顺序</strong></p>
<ul>
<li>当网页上出现多个定位所产生的浮动层时，必然就会产生一个问题，就是当这些层的位置产生重合时，谁在谁的上面</li>
<li>x轴和y轴决定网页平面，z轴则是垂直于屏幕的虚拟坐标轴，浮动层在这个坐标轴上的顺序号就决定了谁上谁下。</li>
<li>定位才可以触发z-index属性，它没有单位，并可拥有负的属性值。默认值为0</li>
</ul>
</li>
<li><p><font color="green"><code>position:relative</code>和<code>margin</code><strong>都可以使元素位置发生偏移，有什么区别？</strong></font></p>
</li>
</ol>
<ul>
<li>相对定位可以使元素发生偏移，但是在文档流中，它仍然占据着原来的位置，所以其他元素的位置不会发生变化</li>
<li>通过负margin偏移的元素会放弃偏移前占据的空间，后面的其它元素就会“流”过来填充，所以它们位置发生了变化。</li>
</ul>
</li>
<li><h4 id="元素的居中"><a href="#元素的居中" class="headerlink" title="元素的居中"></a>元素的居中</h4><ol>
<li><p><strong>行内块级元素</strong></p>
<p>基本思想：使用<code>display: inline-block;</code>   <code>vertical-align: middle;</code>  以及<strong>一个伪元素</strong>让内容块垂直居中于容器中央</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.son</span>&#123;</span><br><span class="line">       <span class="attribute">display</span>:inline-block;</span><br><span class="line">       <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line">       <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">       <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果“<code>margin-left</code>”和“<code>margin-right</code>”都是“<code>auto</code>”，那么它们的使用值是相等的。它将元素相对于包含块的边缘水平居中<font color="red">(要求子元素比父元素小，且只能做水平方向的居中)。</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用CSS3中新增的<code>transform</code>属性, <u>支持水平和垂直居中</u>，子元素设置如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>:absolute;</span><br><span class="line">        left:50%;  //top:50%;</span><br><span class="line">        transform:translate(-50%,0); //transform:translate(0,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="green">transform是css3的变形，在后面会详细说明</font></p>
</li>
<li><p>使用<u><strong>绝对定位方式</strong></u>, <u><strong>以及负值的margin</strong></u>, 支持水平和垂直居中，<font color="red">（适用于子元素宽度大于父元素宽度的特殊情况，是最优的水平垂直居中方法）</font>子元素设置如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">       <span class="attribute">position</span>:absolute;</span><br><span class="line">       width:固定宽;  //height:固定高;</span><br><span class="line">       left:50%;      // top:50%;</span><br><span class="line">       margin-left:-0.5固定宽; // margin-top:-0.5固定高</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ul>
<ol start="5">
<li><p>使用<strong><u>绝对定位方式</u></strong>, 以及<strong><u>left:0;right:0;margin:0 auto;</u></strong> —支持水平和垂直居中，<font color="red">（缺点：子元素宽度必须小于父元素宽度）</font>子元素设置如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>:absolute;</span><br><span class="line">        width:固定宽;  //height:固定高</span><br><span class="line">        left:0;       //top:0;</span><br><span class="line">        right:0;      //bottom:0;</span><br><span class="line">        margin:0 auto;  //margin:auto 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>  <font color="orange" size="5px">6. 同时支持水平和垂直居中最好的方案是：transform(变形)<font color="red">（后面会说到）</font>、绝对定位  （相对定位只能做水平居中）和移动端阶段学习的弹性盒模型的几个方案</font></p>
<blockquote>
<p><font size="4"><strong>说那么多…做个练习吧</strong>！！！！</font></p>
</blockquote>
<p>​    <strong>1. 定位练习</strong></p>
<p>​    题目：做一个宽高300背景为红色的div块，将4个75*75像素背景为黑色的小div块定位在它的四个角</p>
<p>​    <font color="red">（注：给子元素设置绝对定位时要记得给父元素设置相对定位）</font></p>
<ul>
<li><p>HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">75px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">75px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(3)</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(4)</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 居中练习</strong></p>
<p>题目：做一个宽高为300背景为灰色的div块，固定定位在页面右下角，并为其设置一个子元素son，绝对定位在其正中心</p>
</li>
<li><p>HTML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">75px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">75px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：CSS部分给body设置高度是为了验证固定定位的特点，即下拉滚动条时没有改变位置</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端布局和HTML5新标签</title>
    <url>/2019/07/13/WEB%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E5%92%8CHTML5%E6%96%B0%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<ul>
<li><h4 id="做一个页面布局"><a href="#做一个页面布局" class="headerlink" title="做一个页面布局"></a>做一个页面布局</h4></li>
</ul>
<ol>
<li>大多数网站会把内容安排到多个列中(就像杂志或报纸那样)</li>
<li>开始使用布局的时候尽量通过ps等画图工具进行设计</li>
<li>早期的网站使用HTML table标签来设计出漂亮的布局，但是table标签是不建议作为布局工具使用的 - 表格不是布局工具</li>
<li>如今大多数网站使用<code>&lt;div&gt;</code>等元素来创建多列。CSS 用于对元素进行定位，或者为页面创建背景以及色彩丰富的外观</li>
<li>使用 CSS 最大的好处是，如果把 CSS 代码存放到外部样式表中，那么站点会更易于维护。通过编辑单一的文件，就可以改变所有页面的布局</li>
<li>学习布局时需要完成下面的步骤<ul>
<li>第一步：创建一个新项目，用index.html作为主页</li>
<li>第二步：按照ui设计画布局图</li>
<li>第三部：按照布局图布局HTML结构(必须与布局图相同)</li>
<li>第四部：在PS中精确测量出ui设计中每个区域的样式并在css中赋值(注意用内部或外链样式表)</li>
</ul>
</li>
</ol>
<ul>
<li><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4></li>
</ul>
<ol>
<li>在W3C经历了严格的标签XHTML、css和XHTML的过渡版之后HTML5的标准出现了。它的出现是为了解决Web各种浏览器之间的兼容性低；文档结构不够明确，不够语义化；应用程序功能受限，需要很多额外的插件(如flash)</li>
<li>目前知名浏览器厂商(微软、Google、苹果等)都对HTML5支持(但是目前还有没正式版本，部分内容不完全支持或兼容有问题)</li>
<li>HTML5的声明：<code>&lt;!doctype html&gt;</code>；元数据标签设置：<code>&lt;meta charset=&quot;utf-8&quot;/&gt;</code></li>
<li><ul>
<li>当元素去掉或者丢失样式的时候能够让页面呈现出清晰的结构</li>
<li>有利于SEO(搜索引擎优化)，语义化标签可以和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息——爬虫依赖于标签来确定上下文和各个关键字的权重</li>
<li>方便其他设备解析(如屏幕阅读器、盲人阅读器、移动设备)以意义的方式来渲染网页</li>
<li>便于团队开发和维护，语义化更具可读性，遵循W3C标准的团队都遵循这个标准，可以减少差异化</li>
<li>在html5之前只能使用div作为结构元素，而html5新增了很多带有语义的标签</li>
</ul>
</li>
<li><font color="blue">常用HTML5的结构标签</font><ul>
<li><code>header</code>(双标签)：页眉，用于页面的头部的信息介绍或者板块头部</li>
<li><code>footer</code>(双标签)：页脚，用于页面的底部或者版块底部</li>
<li><code>section</code>(双标签)：版块，用于划分页面上的不同区域，或者划分文章里不同的节，属于article的一个部分</li>
<li><code>hgroup</code>(双标签)：页面上的一个标题组合，一个标题和一个子标题，或者标语的组合</li>
<li><code>nav</code>(双标签)：导航，包含链接的的一个列表</li>
<li><code>article</code>(双标签)：用来在页面中表示一套结构完整且独立的内容部分，可以用来呈现论坛的一个帖子，杂志或报纸中的一篇文章，一篇博客，用户提交的评论内容，可互动的页面模块挂件等<br>可以用header/footer/section等来做头部/脚部/部分</li>
<li><code>aside</code>(双标签)：元素标签可以包含与当前页面或主要内容相关的引用、侧边栏、广告、nav元素组，以及其他类似的有别与主要内容的部分，aside 的内容应该与 article 的内容相关<ul>
<li>被包含在article中作为主要内容的附属信息部分，其中的内容 以是与当前文章有关的引用、词汇列表等</li>
<li>在article之外使用，作为页面或站点全局的附属信息部分；最典型的形式是侧边栏(sidebar)，其中的内容可以是友情链接、附属导航或广告单元等</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端样式的初始化和css样式的补充</title>
    <url>/2019/07/13/WEB%E5%89%8D%E7%AB%AF%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8Acss%E6%A0%B7%E5%BC%8F%E7%9A%84%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<ul>
<li><h4 id="浏览器的默认样式"><a href="#浏览器的默认样式" class="headerlink" title="浏览器的默认样式"></a>浏览器的默认样式</h4></li>
</ul>
<ol>
<li><p>同一个标签在不同的浏览器中有不同的默认样式，为了让样式在所有浏览器中统一，并设置一些预定义样式，我们应该做浏览器默认样式的初始化</p>
</li>
<li><p>默认样式的检查方式：可以用border+浏览器开发者工具来查看是否有默认样式</p>
</li>
<li><p>常见的浏览器默认样式</p>
<ul>
<li><p>文字斜体和加粗等字体样式：font-weight:normal;font-style:normal;</p>
</li>
<li><p>body、ul等区块元素的填充和边距：margin:0; padding:0;</p>
</li>
<li><p>li的列表样式：list-style:none;</p>
</li>
<li><p>a标签和其状态性伪类的字体颜色和下划线样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none; <span class="attribute">color</span>:<span class="number">#000</span>; <span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">text-decoration</span>:none; <span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">text-decoration</span>:none; <span class="attribute">color</span>:<span class="number">#000</span>;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:none; <span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">text-decoration</span>:none; <span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置盒模型的样式：box-sizing:border-box;</p>
</li>
</ul>
<p><font face="宋体" size="5px" color="#0099ff">也就是说，每写一个网页就要清一次样式，是不是很麻烦呢？别着急，这里准备了一个common.css，每次写网页直接引用就可以啦~</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"utf-8"</span>;</span><br><span class="line"><span class="comment">/* CSS Document */</span></span><br><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">	<span class="attribute">font-family</span>:Arial,Verdana,Tahoma,<span class="string">"微软雅黑"</span>,<span class="string">"黑体"</span>;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">1.2em</span>;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">li</span>,<span class="selector-tag">form</span>,<span class="selector-tag">table</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">i</span>,<span class="selector-tag">em</span>&#123;</span><br><span class="line">	<span class="attribute">font-style</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>:none; </span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>:none; </span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>:none; </span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>:none; </span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>:none; </span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>:block;</span><br><span class="line">	<span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">	<span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">	*zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><h4 id="CSS样式的补充"><a href="#CSS样式的补充" class="headerlink" title="CSS样式的补充"></a>CSS样式的补充</h4><ol>
<li>改变元素的透明度</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">opacity</span>: 0<span class="selector-class">.9</span>; <span class="comment">/* 赋值0-1，从透明到完全不透明 */</span></span><br><span class="line">filter: alpha(opacity=90); /* 为了兼容低版本IE浏览器的滤镜 */</span><br></pre></td></tr></table></figure>

<p>如果是背景颜色需要加透明度就是<code>background-color: rgba(255,255,255,0.5);</code></p>
<ol start="2">
<li>隐藏元素</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">visibility: hidden/visible; /* 隐藏元素但是依然占位 */</span><br><span class="line">display: none/block; /* 隐藏元素但是不占位 */</span><br></pre></td></tr></table></figure>

<p><font size="3px" color="red">注意：虽然visibility: hidden的隐藏元素依然占位，但是它与透明度为0有区别，透明度为0的元素我们依然可以摸到，但是visibiity: hidden的元素却无法摸得到</font></p>
<p><font size="2px" color="blue">举个例子：</font></p>
<ul>
<li><p>html部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 元素透明和visibility隐藏，元素的位置依然保留；而display的none方法，元素的位置消失 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 元素透明opacity看得见摸得着，而visibility和display看得见摸不着 --&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>css部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-tag">div</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 设置box1的透明度为0 */</span></span><br><span class="line">  <span class="selector-class">.box1</span>&#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 当鼠标点击时box1变为不透明，即可以显示 */</span></span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 设置box2元素为隐藏元素 */</span></span><br><span class="line">  <span class="selector-class">.box2</span>&#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 当鼠标点击时box2不能显示 */</span></span><br><span class="line">  <span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">visibility</span>: visible;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><ol start="3">
<li>overflow：溢出的部分应该如何显示</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">overflow-x</span><span class="selector-pseudo">:hidden</span>; <span class="comment">/*水平方向溢出*/</span></span><br><span class="line"><span class="selector-tag">overflow-y</span><span class="selector-pseudo">:auto</span>; <span class="comment">/*垂直方向溢出*/</span></span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:inherit</span>; <span class="comment">/*两个方向溢出*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">visible</span>：默认值。溢出的内容不会被修剪，会呈现在元素框之外；</span><br><span class="line"><span class="selector-tag">hidden</span>：溢出的内容会被修剪，并且其余内容是不可见的；(如上面的初始化默认样式中的<span class="selector-tag">overflow-x</span><span class="selector-pseudo">:hidden</span>;，让<span class="selector-tag">body</span>的内容在水平方向溢出时裁切，不显示滚动条)</span><br><span class="line"><span class="selector-tag">scroll</span>：溢出的内容会被修剪，浏览器会显示滚动条以便查看其余的内容；</span><br><span class="line"><span class="selector-tag">auto</span>：如果溢出的内容被修剪，则浏览器会显示滚动条以便查看其余的内容；</span><br><span class="line"><span class="selector-tag">inherit</span>：规定应该从父元素继承 <span class="selector-tag">overflow</span> 属性的值</span><br></pre></td></tr></table></figure>
</li>
<li><ol start="4">
<li><strong>百分比单位</strong>：</li>
</ol>
<ul>
<li>字体的行高使用了百分比，表示字体大小的百分之多少；</li>
<li>盒子模型子元素的宽高百分比=父元素宽高*子元素的宽高百分比；</li>
<li>子元素的padding和margin设置百分比时却不是对应父元素的内填充和外边距，而是<font color="red">子元素的padding和margin=父元素的宽*子元素的padding和margin的百分比</font>(后面的left和top也是父元素的宽高，需要注意)</li>
<li>背景定位的X/Y=（父元素宽/高-图片宽/高）*背景定位的百分比</li>
</ul>
</li>
<li><ol start="5">
<li><strong>最大最小宽高</strong>：可以配合上面的百分比宽高一起使用，做一个变化带有范围的效果：</li>
</ol>
<ul>
<li>最大宽：<code>max-width: ;</code>    最小宽：<code>min-width: ;</code></li>
<li>最大高：<code>max-height: ;</code> 最小高：<code>min-heihgt: ;</code></li>
</ul>
<p><font color="red">注：设置最小高度时，当文字超过最小高度的大小时高度会随文字的增多而变高</font></p>
</li>
<li><ol start="6">
<li>轮廓线outline（了解）：它是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用，它不会占据空间，也不一定是矩形。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">outline-color</span>:; <span class="comment">/*轮廓线颜色*/</span></span><br><span class="line"><span class="selector-tag">outline-style</span>:; <span class="comment">/*轮廓线样式*/</span></span><br><span class="line"><span class="selector-tag">outline-width</span>:; <span class="comment">/*轮廓线宽度*/</span></span><br><span class="line"><span class="selector-tag">outline-offset</span>:; <span class="comment">/*轮廓线扩张*/</span></span><br></pre></td></tr></table></figure>

<p>注：写成集合样式outline，如果不设置其中的某个值，也不会出问题，比如 <code>outline:solid #ff0000</code>; 也是允许的</p>
</li>
</ul>
<ul>
<li><h4 id="列表元素"><a href="#列表元素" class="headerlink" title="列表元素"></a>列表元素</h4><ol>
<li>列表元素有dl(定义列表)、dt(定义名)、dd(详情)、ul(无序列表)、ol(有序列表)、li(列表的项)</li>
<li>当我们需要把一系列类似的项在页面中展示的时候就要用到列表，比如名词解释(定义列表)、商品列表或导航(无序列表)</li>
<li>它们是一种绑定关系，其中dt和dd必须是dl的子元素，dl也只能用dt和dd作为子元素；li是ul和ol的子元素，ul和ol也只能用li做子元素</li>
<li>ol(有序列表)有一个type属性，可以把值设为1(默认值，数字序列)、A(大写字母序列)、a(小写字母序列)、I(大写罗马数字序列)、i(小写罗马数字序列)，若已经将li的list-style设置为none则样式都会丢失</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>git安装及基本使用</title>
    <url>/2019/07/06/git%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h6><blockquote>
<p>下载git</p>
</blockquote>
<blockquote>
<p>注册github</p>
</blockquote>
<blockquote>
<p>将git和github连接起来<br>   获取ssh秘钥 id_rsa.pub<br>   github里，找到settings，填入秘钥</p>
</blockquote>
<h6 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h6><blockquote>
<p>1、确定git和github已经连接</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2、本地文件推到github上</p>
</blockquote>
<ul>
<li>将新建的文件添加到git的缓存区</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加具体名称文件</span><br><span class="line">git add  index.html</span><br><span class="line">添加全部文件</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<ul>
<li>给提交的文件添加描述</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &apos;demo&apos;</span><br></pre></td></tr></table></figure>

<ul>
<li>汇总到总分支上</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<ul>
<li>退出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<ul>
<li>文件推到远程仓库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">git push origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>输入用户名(如果设置了SSH密匙的话就不用输入密码了)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入OpenSSH：输入密码</span><br></pre></td></tr></table></figure>

<p>==如果出现错误==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br></pre></td></tr></table></figure>

<h6 id="一般在push的时候会出现错误"><a href="#一般在push的时候会出现错误" class="headerlink" title="一般在push的时候会出现错误"></a>一般在push的时候会出现错误</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure>

<h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><ol>
<li>先执行git pull origin master</li>
<li>在执行git push origin master<br>==这个时候又可能出现错误==</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>

<p>不用慌，我在网上搜好多方法，都说使用如下指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories </span><br><span class="line">git pull --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<p>但是输入这些指令之后会跳出来另外一个界面然后从新pull就行了</p>
<h6 id="我的解决方法"><a href="#我的解决方法" class="headerlink" title="我的解决方法"></a>我的解决方法</h6><p>重新在原文件下Git Bush Here<br>然后重新开始就可以解决</p>
<h6 id="无论使用git-pull-出不出现错误"><a href="#无论使用git-pull-出不出现错误" class="headerlink" title="无论使用git pull 出不出现错误"></a>无论使用git pull 出不出现错误</h6><h2 id="只要出现"><a href="#只要出现" class="headerlink" title="只要出现"></a>只要出现</h2><h5 id="刷新github文件就推过来了"><a href="#刷新github文件就推过来了" class="headerlink" title="刷新github文件就推过来了"></a>刷新github文件就推过来了</h5><h4 id="学习相关git的操作"><a href="#学习相关git的操作" class="headerlink" title="学习相关git的操作"></a>学习相关git的操作</h4><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git的学习 廖雪峰的官方网站</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>内联块和浮动问题</title>
    <url>/2019/07/04/%E5%86%85%E8%81%94%E5%9D%97%E5%92%8C%E6%B5%AE%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>内联块和浮动都是为了使区块元素在一行显示</p>
</blockquote>
<ul>
<li><h4 id="内联块（inline-block）"><a href="#内联块（inline-block）" class="headerlink" title="内联块（inline-block）"></a>内联块（inline-block）</h4><ol>
<li>设置：很简单，直接在css样式中加上<code>display: inline-block;</code>即可</li>
<li>特点：<ul>
<li>可以和非区块元素在一行显示</li>
<li>支持所有的样式</li>
<li>不设置宽高时由内容（文字图片等）撑开</li>
<li>换行符会被解析（缺点）</li>
</ul>
</li>
</ol>
</li>
</ul>
<p><font color="red" size="4px">那么，如何去掉内联块之间的空格（换行符）呢？这里有四种方法哦~</font></p>
<p><font color="blue">a.第一种方法：将后面的内联块设置左外边距为负值，值为父元素大小的0.25倍</font></p>
<p>举个例子，假设有两个内联块，直接给后面的内联块（第二个）的css样式设置为<code>margin-left:-0.25m;</code></p>
<p><font color="blue">b.第二种方法：用注释去掉换行符</font></p>
<p>这个方法可能有点不好理解，前面说了，使用内联块换行符会被解析，那么如果给换行符加上注释会不会解决这个问题呢？答案是肯定的~</p>
<p>举个例子~</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--加上注释</span></span><br><span class="line"><span class="comment">--&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="blue">c.第三种方法：设置字间距（letter-spacing）为-0.25倍</font></p>
<p>也就是css样式里加上<code>letter-spacing:-0.25em;</code></p>
<p><font color="blue">d.第四种方法：将父元素的字体大小设置为0，在子元素里重新设置字体大小</font></p>
<p>这个方法很容易理解，这里就不举例啦！！</p>
<p><font size="4px">我们可以发现，使用内联块实现区块元素并排显示其实非常麻烦，那么有没有更加方便的方法呢？</font></p>
<ul>
<li><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>元素脱离文档流，按照浮动方向移动，遇到父级边界或者相邻浮动元素停住：<code>float：left/right/none</code>(默认值)，由于子元素脱离文档流，结果会使父元素高度崩塌，解决浮动元素脱离文档流不占位的方法</p>
<p><font color="red" size="4px">我们可以看到，浮动会使父元素高度崩塌。Therefore，解决父元素高度崩塌的方法来啦~</font></p>
</li>
</ul>
<p><font color="blue" size="3.5px">方法1：给父元素设置高度</font></p>
<p>​    局限性：（1）不确定高度时无法使用；（2）在内容、数量不确定时也无法使用</p>
<p><font color="blue" size="3.5px">方法2：将父元素设置为BFC盒子，也就是说不能用浮动方法，要在父元素的css样式里写为<code>overflow:hidden;</code></font></p>
<p>​    局限性：在父元素有溢出部分时无法使用</p>
<p><font color="blue" size="3.5px">方法3：为所有浮动元素后面设置一个空元素，在里面设置清除浮动<code>clear:both</code></font></p>
<p>   举个例子：div元素需要左浮动，我们需要在div元素后面设置空元素span</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"display:block; clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    局限性：创建了一个没有任何意义的空标签</p>
<p><font color="blue" size="3.5px">方法4：为父元素设置after伪元素，在该元素上设置清除浮动<code>clear:both;</code></font></p>
<p>​    局限性：低版本的IE浏览器不识别</p>
<p>   解决办法：用<code>.clearfix{*zoom:1}</code>来兼容</p>
<p>也就是说这个方法<font color="red" size="5">几乎没有缺点，是最优方法</font></p>
<p>好啦<del>让我们来举例叭</del></p>
<p><strong><em>假设有4个div元素，其中一个类名为parent元素是父元素（边框为2px black solid），为这三个div元素设置浮动并清除</em></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">black</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="comment">/*设置伪元素，清除浮动*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">content</span><span class="selector-pseudo">:""</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css的选择器扩展</title>
    <url>/2019/07/01/css%E7%9A%84%E9%80%89%E6%8B%A9%E5%99%A8%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<ul>
<li><h4 id="分组选择器："><a href="#分组选择器：" class="headerlink" title="分组选择器："></a>分组选择器：</h4><p>注：以下两种书写方式一般没有区别，但也有特殊情况。假设p标签也有一个类名为class，地址名为id的元素，就必须要在最前面加上标签名</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span>,<span class="selector-id">#id</span>    <span class="comment">/*选择类名为class的所有选择和地址名为id的元素*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.class</span>,<span class="selector-id">#id</span> <span class="comment">/*选择div的所有后代中类名为.class的元素和地址名为id的元素*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="多条件选择器："><a href="#多条件选择器：" class="headerlink" title="多条件选择器："></a>多条件选择器：</h4><p>同时满足类名为box1和box2的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-class">.box2</span>   <span class="comment">/*既有类名为box1的元素同时也有类名为box2的元素*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="子元素选择器："><a href="#子元素选择器：" class="headerlink" title="子元素选择器："></a>子元素选择器：</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-class">.class</span>   <span class="comment">/*选择div元素的所有子元素中有类名为class的元素*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="next选择器："><a href="#next选择器：" class="headerlink" title="next选择器："></a>next选择器：</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span>     <span class="comment">/*选择div元素的下个同级元素且标签为p的元素*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="伪类选择器（状态性伪类）："><a href="#伪类选择器（状态性伪类）：" class="headerlink" title="伪类选择器（状态性伪类）："></a>伪类选择器（状态性伪类）：</h4><p>注：以下的标签a的4个伪类必须按照lvha的顺序书写，否则可能会出错</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>    <span class="comment">/*选择所有未被访问的链接*/</span></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>    <span class="comment">/*选择所有已被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>   <span class="comment">/*选择鼠标指针位于其上的链接*/</span></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>   <span class="comment">/*选择活动链接（正在击中）*/</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><em>举个状态性伪类的例子：设计一个div盒子（宽200px高200px、红色），要求：当鼠标移动该盒子上时盒子变为蓝色，当鼠标点击该盒子时盒子的宽和高分别为500px和150px</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>状态性伪类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h4 id="伪元素选择器（结构性伪类）："><a href="#伪元素选择器（结构性伪类）：" class="headerlink" title="伪元素选择器（结构性伪类）："></a>伪元素选择器（结构性伪类）：</h4><p>注：before 和after中必须设置content(内容)和display(种类)两个样式，否则无法正确显示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span>  <span class="comment">/*在每个p元素的内容之前插入内容*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span>   <span class="comment">/*在每个p元素的内容之后插入元素*/</span></span><br><span class="line"><span class="selector-tag">display</span>   <span class="comment">/*用来修改元素种类，分别有block（区块元素）、inline(内联元素)、inline-block（内联块元素）、none（隐藏元素，不占用物理空间）*/</span></span><br><span class="line"><span class="selector-tag">content</span><span class="selector-pseudo">:""</span>   <span class="comment">/*引号里写要显示的内容，如果没有要显示的内容就空着*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><em>举个伪元素选择器（结构性伪类）的例子：写一个div元素(300,300)，为它设置before伪元素（区块元素  150px,150px），当你的鼠标移入div时让伪元素背景颜色发生变化，在div上击中时，伪元素隐藏</em></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>结构性伪类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:brown</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*先把div元素转换为伪元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">content</span><span class="selector-pseudo">:""</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:chartreuse</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        /* 鼠标移伪元素时改变颜色</span><br><span class="line"><span class="css">         * 格式：<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::befere</span></span></span><br><span class="line">         */</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:cornflowerblue</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:active</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>关于表格的一些基础知识~</title>
    <url>/2019/07/01/%E5%85%B3%E4%BA%8E%E8%A1%A8%E6%A0%BC%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<ul>
<li><h5 id="首先让我们认识一些表格标签"><a href="#首先让我们认识一些表格标签" class="headerlink" title="首先让我们认识一些表格标签"></a>首先让我们认识一些表格标签</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  <span class="comment">&lt;!-- 定义表格（必不可少） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>  <span class="comment">&lt;!-- 表格标题（默认居中） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span>  <span class="comment">&lt;!-- 表格表头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span>  <span class="comment">&lt;!-- 表格正文（必不可少） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>  <span class="comment">&lt;!-- 表格页脚 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>  <span class="comment">&lt;!-- 表头单元格（加粗黑体） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="comment">&lt;!-- 表格行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>  <span class="comment">&lt;!-- 表格单元格 --&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格的标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>我是第一列表头单元格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>我是第二列表头单元格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>我是第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>我是第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是一张2行2列的表格，第一行是表头单元格，第二行是表格正文。在浏览器运行后会发现，不仅单元格间有间隙，表格内边距也有。为了解决这个问题，表格属性来啦<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ##### 表格属性</span><br><span class="line"></span><br><span class="line">  ```css</span><br><span class="line">  cellspacing    ------单元间间隙(用于table标签)</span><br><span class="line">  cellpadding    ------表格内边距(用于table标签)</span><br><span class="line">  colspan=&quot;2&quot;    ------横向合并单元格(用于td标签)，2代表两个单元格合并</span><br><span class="line">  rowspan=&quot;2&quot;    ------纵向合并单元格(用于td标签)</span><br><span class="line">  ```</span><br><span class="line"></span><br><span class="line">再试一下，在table标签里加入了cellspacing=&quot;0&quot;，cellpadding=&quot;0&quot;后就不存在这样的问题了</span><br></pre></td></tr></table></figure></p>
<ul>
<li><h5 id="表格样式：为表格和单元格设置border等样式，否则无法看到表格边框，除此外table的border-collapse样式，可以用来合并相邻单元格的边框"><a href="#表格样式：为表格和单元格设置border等样式，否则无法看到表格边框，除此外table的border-collapse样式，可以用来合并相邻单元格的边框" class="headerlink" title="表格样式：为表格和单元格设置border等样式，否则无法看到表格边框，除此外table的border-collapse样式，可以用来合并相邻单元格的边框"></a>表格样式：为表格和单元格设置border等样式，否则无法看到表格边框，除此外table的border-collapse样式，可以用来合并相邻单元格的边框</h5></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-collapse</span><span class="selector-pseudo">:collapse</span>;     <span class="comment">/* 用于table标签中，注：使用该样式时要把单元间间隙（cellsapcing）设为0 */</span></span><br></pre></td></tr></table></figure>

<p>以上就是最简单的表格的制作啦~~</p>
<h4 id="接下来再举一个小例子：（加上css样式和合并单元格）"><a href="#接下来再举一个小例子：（加上css样式和合并单元格）" class="headerlink" title="接下来再举一个小例子：（加上css样式和合并单元格）"></a>接下来再举一个小例子：（加上css样式和合并单元格）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>简单的表格制作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        table,td,th&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">black</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        table&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-collapse</span><span class="selector-pseudo">:collapse</span>;<span class="comment">/*合并相邻的单元格边框*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        td,th&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;  <span class="comment">/*所有文字居中*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspancing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--第一行的第一列和第二列合并--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>第一行第一列表头单元格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;th&gt;第一行第二列表头单元格&lt;/th&gt;*/--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--第二行的第一列和第三行的第一列合并--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>我是第二行第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>我是第二行第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--第二行的第一列和第三行的第一列合并--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;td&gt;我是第三行第一列&lt;/td&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>我是第三行第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span>            	</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="最后来说一下table表格的缺点"><a href="#最后来说一下table表格的缺点" class="headerlink" title="最后来说一下table表格的缺点~"></a>最后来说一下table表格的缺点~</h5></li>
</ul>
<ol>
<li>太深的嵌套，如table&gt;tbody&gt;tr&gt;td&gt;h3，会导致搜索引擎读取困难，而且，最直接的损失就是大大增加了代码量</li>
<li>灵活性差，比如要将tr设置border等属性，是不行的，得通过td</li>
<li>代码臃肿，当在table中套用table的时候，阅读代码会显得异常混乱</li>
<li>混乱的colspan与rowspan，用来布局时，频繁使用他们会造成整个文档顺序混乱</li>
<li>table需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间</li>
<li>不够语义，无论是计算机还是阅读代码的人在阅读时都觉得非常困难</li>
</ol>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2019/06/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>  <strong>1.题目：</strong><br> 使用冒泡排序编写程序，实现对数组{25,24,12,76,101,96,28}的排序</p>
<p> <strong>2.源代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package interest;</span><br><span class="line"></span><br><span class="line">public class pubble </span><br><span class="line">&#123;</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		int[] arr=&#123;25,24,12,76,101,96,28&#125;;</span><br><span class="line">		for(int i=0;i&lt;arr.length-1;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			for(int j=0;j&lt;arr.length-1-i;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				if(arr[j]&gt;arr[j+1])</span><br><span class="line">				&#123;</span><br><span class="line">					int temp=arr[j];</span><br><span class="line">					arr[j]=arr[j+1];</span><br><span class="line">					arr[j+1]=temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(&quot;冒泡排序的结果是：&quot;);</span><br><span class="line">		for(int i=0;i&lt;arr.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(arr[i]+&quot; &quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>非负十进制整数转换为b进制数</title>
    <url>/2019/06/07/%E9%9D%9E%E8%B4%9F%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BAb%E8%BF%9B%E5%88%B6%E6%95%B0/</url>
    <content><![CDATA[<p>  <strong>1.题目名称</strong><br> 将非负十进制整数n转换成b进制。（其中b=2~16）</p>
<p> <strong>2.算法构造</strong><br> <strong>（1）递归：</strong><br> 十进制数对b进制取余，若b进制为1-9进制，将余数写入字符串；进制数为10-16时，将余数用相应的字符表示。然后利用递归模型返回十进制数和b进制的值，最后利用StringBuilder实现逆序输出字符串<br> 递归模型：duigui(n,b)= duigui(n/b,b) n&gt;=0<br> 递归出口：n&lt;b<br> (其中为是十进制数，b为进制数)<br> <strong>（2）非递归：</strong><br> 当十进制数不为0时，十进制数对b进制取余，十进制数变为原来的十进制数/b进制。若b进制为1-9进制，将余数写入字符串；进制数为10-16时，将余数用相应的字符表示，最后利用StringBuilder实现逆序输出字符串</p>
<p> <strong>5.经验归纳<br> 5.1遇到的问题</strong><br> &lt;1&gt;刚开始用的是数组，结果发现不用循环很难把字符赋给数组<br> &lt;2&gt;逆序输出那里考虑不周全<br> &lt;3&gt;用递归树或者递归栈描述调用过程<br> <strong>5.2心得体会</strong><br> 这次的基本要求没有什么难点，主要就是递归函数的建立，非递归比递归简单一些，就是在最后的逆序输出那里会遇到问题，上网查了一下，说是可以用StringBuffer来实现，所以基本上没什么大问题。对了~画出递归树或者递归栈的调用过程这里也是问题，第一次画，对这个概念不是很熟悉。</p>
<p> <strong>附：源代码</strong><br> 1.Test0类（主方法）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package interest;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test0 </span><br><span class="line">&#123;</span><br><span class="line">	static int n;</span><br><span class="line">	static int b;</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		Scanner sc=new Scanner(System.in);</span><br><span class="line">		TwoMethods t=new TwoMethods();</span><br><span class="line">		System.out.println(&quot;请输入一个非负整数：&quot;);</span><br><span class="line">		n=sc.nextInt();</span><br><span class="line">		while(true)</span><br><span class="line">		&#123;</span><br><span class="line">			if(n&lt;0)</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.println(&quot;Error！请输入一个非负整数：&quot;);</span><br><span class="line">				n=sc.nextInt();</span><br><span class="line">			&#125;</span><br><span class="line">			else</span><br><span class="line">				break;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;请输入你想转换的进制（1-16）：&quot;);</span><br><span class="line">		b=sc.nextInt();</span><br><span class="line">		while(true)</span><br><span class="line">		&#123;</span><br><span class="line">			if(b&lt;1||b&gt;16)</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.println(&quot;Error！请输入你想转换的进制（1-16）：&quot;);</span><br><span class="line">				b=sc.nextInt();</span><br><span class="line">			&#125;</span><br><span class="line">			else</span><br><span class="line">				break;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;你想使用哪种方法进行运算？1.递归  2.非递归（1/2）：&quot;);</span><br><span class="line">		int x=sc.nextInt();</span><br><span class="line">		switch(x)</span><br><span class="line">		&#123;</span><br><span class="line">		case 1:   //调用递归方法</span><br><span class="line">			t.digui(n,b);</span><br><span class="line">			break;</span><br><span class="line">		case 2:</span><br><span class="line">			t.feidigui(n,b);//调用非递归方法</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		sc.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 2.两种方法实现转换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package interest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class TwoMethods </span><br><span class="line">&#123;</span><br><span class="line">	static String a=&quot;&quot;;  //定义一个字符串，用来存储b进制</span><br><span class="line">	static int num;      //b进制数</span><br><span class="line">	public static void feidigui(int n,int b)  //非递归</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		while(n&gt;0)      //当十进制数不为0时</span><br><span class="line">		&#123;</span><br><span class="line">			num=n%b;   //十进制数对b进制取余</span><br><span class="line">			n=n/b;     //十进制数变为原来的十进制数/b进制</span><br><span class="line">			if(b&lt;10)  //若b进制为1-9进制</span><br><span class="line">			&#123;</span><br><span class="line">				a+=num;  //将余数写入字符串</span><br><span class="line">			&#125;</span><br><span class="line">			else   //进制数为10-16时</span><br><span class="line">			&#123;</span><br><span class="line">				a+=((char)(num-10)+&apos;A&apos;);  //将余数用相应的字符表示</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;用非递归方法计算的十进制转&quot;+b+&quot;进制的转换结果是：&quot;);</span><br><span class="line">		System.out.println(new StringBuilder(a).reverse().toString());  //利用StringBuilder实现逆序输出字符串</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void digui(int n,int b)   //递归</span><br><span class="line">	&#123;</span><br><span class="line">		if(n!=0)</span><br><span class="line">		&#123;</span><br><span class="line">			num=n%b;   //十进制数对b进制取余</span><br><span class="line"></span><br><span class="line">			if(b&lt;10)   //若b进制为1-9进制</span><br><span class="line">			&#123;</span><br><span class="line">				a+=num;  //将余数写入字符串</span><br><span class="line">			&#125;</span><br><span class="line">			else   //进制数为10-16时</span><br><span class="line">			&#123;</span><br><span class="line">				a+=((char)(num-10)+&apos;A&apos;); //将余数用相应的字符表示</span><br><span class="line">			&#125;</span><br><span class="line">			digui(n/b,b);  //利用递归模型返回十进制数和b进制的值</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">			&#123;</span><br><span class="line">			System.out.println(&quot;用递归方法计算的十进制转&quot;+b+&quot;进制的转换结果是：&quot;);</span><br><span class="line">			System.out.println(new StringBuilder(a).reverse().toString());  //利用StringBuilder实现逆序输出字符串</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的递归程序</title>
    <url>/2019/05/27/%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%92%E5%BD%92%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>  <strong>1.题目名称</strong><br> &lt;1&gt;赶鸭子问题：一个人赶着鸭子去每个村庄卖，每经过一个村子卖去所赶鸭子的一半又一只。这样他经过了七个村子后还剩两只鸭子，问他出发时共赶多少只鸭子？经过每个村子卖出多少只鸭子？<br> &lt;2&gt;角谷定理：输入一个自然数，若为偶数，则把它除以2，若为奇数，则把它乘以3加1。经过如此有限次运算后，总可以得到自然数值1。求经过多少次可得到自然数1。<br> 如：输入22，<br> 输出 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1<br> STEP=16</p>
<p> <strong>2.题目分析</strong><br> &lt;1&gt;赶鸭子问题：假设一共有sum只鸭子，而sum=one(n)，n表示村子数，每经过一个村子就卖出one(n)/2+1只鸭子，剩下的就是下一个村子的鸭子数，也就是one(n+1)，那么鸭子总数one(n)=(one(n)/2+1)+(one(n+1))，经过运算得出鸭子总数one(n)=(one(n+1)+1)_2；题目说这个人经过七个村子后还剩两只鸭子，也就是在第8个村子的时候还有两只鸭子，也就是one(8)=2<br> &lt;2&gt;角谷定理：这个题的递归出口是固定的，即当得到自然数值1的时候递归结束。假设经过了sum=one(x)次操作后得到自然数1，输入的自然数一共分为3种情况，第一种是x=1，这种情况很特殊，直接sum+1输出即可；第二种情况是x为偶数，按照题目要求，将这个数有限次除以2，也就是one(x/2)，并使sum递加；第三种情况是x为奇数，将这个数有限次乘以3再加1，也就是one(x_3+1)，并使sum递加</p>
<p> <strong>3.算法构造</strong><br> <img src="https://img-blog.csdnimg.cn/20190527171624885.GIF" alt="在这里插入图片描述"><br> <strong>4.心得体会</strong><br> 递归问题主要还是数学思维，我觉得第一个题用递归方法偏难一点，但是算法构造出来实现就简单了，这两个题学C语言的时候有接触过，所以还有印象。这两道题相对以前的作业简单很多~</p>
<p> <strong>附：源代码：</strong><br> <strong>&lt;1&gt;赶鸭子问题：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package DuckSale;</span><br><span class="line">public class 卖鸭子递归 </span><br><span class="line">&#123;</span><br><span class="line">	static int sum;</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		int n=1;</span><br><span class="line">		int num;//每个村子卖出的鸭子数</span><br><span class="line">		int sum=one(n);   //刚开始的鸭子数,n个村子</span><br><span class="line">		System.out.println(&quot;刚开始有&quot;+sum+&quot;只鸭子&quot;);</span><br><span class="line">		for(int i=1;i&lt;8;i++)//循环输出经过每个村子卖出的鸭子数</span><br><span class="line">		&#123;</span><br><span class="line">			num=sum/2+1;</span><br><span class="line">			sum-=num;  //剩余鸭子数</span><br><span class="line">			System.out.println(&quot;经过第&quot;+i+&quot;个村子卖出了&quot;+num+&quot;只鸭子,还剩下&quot;+sum+&quot;只鸭子&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public static int one(int n)</span><br><span class="line">	&#123;</span><br><span class="line">		if(n&lt;8)</span><br><span class="line">		&#123;</span><br><span class="line">			return 2*(one(n+1)+1);</span><br><span class="line">		&#125;</span><br><span class="line">		else if(n==8)</span><br><span class="line">		&#123;</span><br><span class="line">			return 2;</span><br><span class="line">		&#125;</span><br><span class="line">		return n;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>②非递归实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package DuckSale;</span><br><span class="line">public class 卖鸭子非递归</span><br><span class="line">&#123;</span><br><span class="line">	static int sum=2;//鸭子总数</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		int num;</span><br><span class="line">		for(int i=1;i&lt;8;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum=(sum+1)*2;//循环计算出鸭子总数</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;一共有&quot;+sum+&quot;只鸭子&quot;);</span><br><span class="line">		for(int i=1;i&lt;8;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			num=sum/2+1;</span><br><span class="line">			sum-=num;</span><br><span class="line">			System.out.println(&quot;经过第&quot;+i+&quot;个村子卖了&quot;+num+&quot;只鸭子，还剩&quot;+sum+&quot;只鸭子&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;2&gt;角谷定理：<br> ①递归实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package JiaoGuTheory;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class 角谷定理递归 &#123;</span><br><span class="line">	static int sum=0; //计算次数</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		Scanner sc=new Scanner(System.in);</span><br><span class="line">		System.out.print(&quot;请输入一个自然数：&quot;);</span><br><span class="line">		int x=sc.nextInt();</span><br><span class="line">		sc.close();</span><br><span class="line">		int sum=one(x);</span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(&quot;一共经过了&quot;+sum+&quot;次&quot;);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	public static int one(int x)</span><br><span class="line">	&#123;</span><br><span class="line">		if(x==1)   //输入的自然数为1</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(x+&quot; &quot;);</span><br><span class="line">			sum++;  </span><br><span class="line">		&#125;</span><br><span class="line">		else if(x%2==0)   //输入的自然数为偶数</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(x+&quot; &quot;);</span><br><span class="line">			one(x/2);//将这个数有限次除以2</span><br><span class="line">			sum++;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(x%2!=0)   //输入的自然数为奇数</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(x+&quot; &quot;);</span><br><span class="line">			one(x*3+1); //将这个数有限次乘以3再加1</span><br><span class="line">			sum++;</span><br><span class="line">		&#125;</span><br><span class="line">		return sum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>②非递归实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package JiaoGuTheory;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class 角谷定理非递归 &#123;</span><br><span class="line">	static int sum=0;</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		Scanner sc=new Scanner(System.in);</span><br><span class="line">		System.out.print(&quot;请输入一个自然数：&quot;);</span><br><span class="line">		int x=sc.nextInt();</span><br><span class="line">		sc.close();</span><br><span class="line">		while(x&gt;=1)</span><br><span class="line">		&#123;</span><br><span class="line">			if(x==1)</span><br><span class="line">			&#123;</span><br><span class="line">				sum++;</span><br><span class="line">				System.out.println(x);</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">			else if(x%2==0)</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.print(x+&quot; &quot;);</span><br><span class="line">				sum++;</span><br><span class="line">				x=x/2;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			else if(x%2!=0)</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.print(x+&quot; &quot;);</span><br><span class="line">				sum++;</span><br><span class="line">				x=x*3+1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;一共经过了&quot;+sum+&quot;次&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java模拟肯德基快餐店的收银系统</title>
    <url>/2019/05/10/Java%E6%A8%A1%E6%8B%9F%E8%82%AF%E5%BE%B7%E5%9F%BA%E5%BF%AB%E9%A4%90%E5%BA%97%E7%9A%84%E6%94%B6%E9%93%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>  <strong>1.题目名称</strong><br> 模拟肯德基快餐店的收银系统<br> 要求：结合设计模式（2种以上）至少实现系统的以下功能：<br> 1.正常餐品结算和找零。<br> 2.基本套餐结算和找零。<br> 3.使用优惠劵购买餐品结算和找零。<br> 4.可在一定时间段参与店内活动（自行设计或参考官网信息）。<br> 5.模拟打印小票的功能（写到文件中）。</p>
<p> <strong>2.算法构造</strong><br> 这个系统需要用到两种设计模式，分别是工厂方法模式和抽象工厂模式。<br> &lt;1&gt;工厂方法模式：在工厂方法模式中，核心的工厂类不再负责所有的产品的创建，而是将具体创建的工作交给子类去做。该核心类成为一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口。<br> 抽象工厂(IKfcFactory)：给出具体工厂必须实现的接口；<br> 具体工厂(ChinaKfcFactory)：在该工厂中指明生产各种抽象食物的方法：生产汉堡、薯条、鸡翅、饮料、套餐1、套餐2；<br> 抽象产品(Hamburg, FrenchFries, ChickenWings, Beverage, TaoCan1, TaoCan2)：负责输出用户的订单信息<br> 具体产品(ChinaHamburg, ChinaFrenchFries, ChinaChickenWings, ChinaBeverage, RealTaocan1, RealTaocan2)：这个工厂需要生产具体的食品：麻辣奥尔良烤堡、奥尔良烤翅、普通霸王薯条、可乐饮料。<br> &lt;2&gt;抽象工厂模式：抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。<br> 抽象工厂(AbstractBaseFood)<br> 具体工厂(ChinaKfcFactory)<br> 抽象产品(Hamburg, FrenchFries, ChickenWings, Beverage, TaoCan1, TaoCan2)：相当于产品等级<br> 具体产品(ChinaHamburg, ChinaFrenchFries, ChinaChickenWings, ChinaBeverage, RealTaocan1, RealTaocan2)：相当于产品族，生产出具体的食物<br> 客户类(Customer)：向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。</p>
<p> <strong>3.类图</strong></p>
<p> <img src="https://img-blog.csdnimg.cn/20190510205027533.GIF" alt="在这里插入图片描述"><br> <strong>4.调试及运行结果<br> 4.1调试结果</strong><br> <img src="https://img-blog.csdnimg.cn/20190510205247522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NzQ3NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>4.2运行结果<br> 1.选择单点：</strong><br> <img src="https://img-blog.csdnimg.cn/20190510205355126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NzQ3NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20190510205415228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NzQ3NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>2.选择套餐</strong><br> <img src="https://img-blog.csdnimg.cn/20190510205502460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NzQ3NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>4.文件里的账单（在eclipse中打开.txt文件）</strong><br> <img src="https://img-blog.csdnimg.cn/20190510205546916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NzQ3NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>5.经验归纳<br> 5.1遇到的问题</strong><br> &lt;1&gt;将账单写入文件后.txt文件里什么都没有<del>~  
 &lt;2&gt;不熟悉抽象工厂模式，将工厂方法模式和抽象方法模式混在一起了</del><br> &lt;3&gt;单品的种类太少，抽象工厂模式运用的不全面<br> &lt;4&gt;该系统还存在一些不足，打算后期进行优化<br> <strong>5.2心得体会</strong><br> 这个系统中，最核心的就是设计模式的选择与应用了！个人感觉我做的系统用的工厂方法模式比抽象工厂模式全面一些，因为每一种食品只有一种，没有分很多种，所以产品族的产品对象是不全面的。<br> 还有一个很大的问题，就是账单没有办法写入文件中。我选择的是FileWriter方法将账单写入文件的，然而文件中却什么都没有。后来我发现在eclipse中打开.txt文件，账单是在文件里的，所以我没有用记事本打开.txt文件，而是选择了eclipse。<br> 其实我觉得界面可以用Java的图形图像处理来实现，还涉及到数据库，打算考完试实现一下~~</p>
<p> <strong>附：源代码</strong><br> 1.AbstractBaseFood接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//食物基类</span><br><span class="line">	 </span><br><span class="line">public abstract class AbstractBaseFood &#123;</span><br><span class="line">	    //类别</span><br><span class="line">	protected String kind;</span><br><span class="line">	    //数量</span><br><span class="line">	protected int num;</span><br><span class="line">	    //价格</span><br><span class="line">	protected int price;</span><br><span class="line">	    //合计</span><br><span class="line">	public int totalPrice()</span><br><span class="line">	&#123;</span><br><span class="line">		return this.num * this.price;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 2.抽象食物接口IFood</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">	 //抽象食物接口</span><br><span class="line">	 </span><br><span class="line">	public interface IFood &#123;</span><br><span class="line">		//打印输出食物信息</span><br><span class="line">	    void printMessage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 3.肯德基抽象工厂接口IKfcFactory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//肯德基抽象工厂</span><br><span class="line"> </span><br><span class="line">public interface IKfcFactory &#123;</span><br><span class="line"></span><br><span class="line">    //生产汉堡</span><br><span class="line">    public Hamburg createHamburg(int num);</span><br><span class="line"></span><br><span class="line">    //生产薯条</span><br><span class="line">    public FrenchFries createFrenchFries(int num);</span><br><span class="line"></span><br><span class="line">    //生产鸡翅</span><br><span class="line">    public ChickenWings createChickenWings(int num);</span><br><span class="line"></span><br><span class="line">    //生产饮料</span><br><span class="line">    public Beverage createBeverage(int num);</span><br><span class="line">    </span><br><span class="line">    //生产套餐1</span><br><span class="line">    public TaoCan1 createTaoCan1(int num);</span><br><span class="line">    </span><br><span class="line">    //生产套餐2</span><br><span class="line">    public TaoCan2 createTaoCan2(int num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 4.肯德基具体工厂ChinaKfcFactory继承接口IKfcFactory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//肯德基具体工厂</span><br><span class="line"></span><br><span class="line">public class ChinaKfcFactory implements IKfcFactory&#123;</span><br><span class="line"></span><br><span class="line">    //生产汉堡</span><br><span class="line">    public Hamburg createHamburg(int num) &#123;</span><br><span class="line">        return new ChinaHamburg(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //生产薯条</span><br><span class="line">    public FrenchFries createFrenchFries(int num) &#123;</span><br><span class="line">        return new ChinaFrenchFries(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //生产鸡翅</span><br><span class="line">    public ChickenWings createChickenWings(int num) &#123;</span><br><span class="line">        return new ChinaChickenWings(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //生产饮料</span><br><span class="line">    public Beverage createBeverage(int num) &#123;</span><br><span class="line">        return new ChinaBeverage(num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //生产套餐1</span><br><span class="line">    public TaoCan1 createTaoCan1(int num) &#123;</span><br><span class="line">        return new RealTaoCan1(num);</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    //生产套餐2</span><br><span class="line">    public TaoCan2 createTaoCan2(int num) &#123;</span><br><span class="line">        return new RealTaoCan2(num);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 5.客户类Customer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//客户类</span><br><span class="line"></span><br><span class="line">public class Customer &#123;</span><br><span class="line"></span><br><span class="line">    //抽象工厂</span><br><span class="line">    private IKfcFactory kfcFactory;</span><br><span class="line"></span><br><span class="line">    //构造方法将抽象工厂作为参数传入</span><br><span class="line">    public Customer(IKfcFactory kfcFactory)&#123;</span><br><span class="line">        this.kfcFactory = kfcFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     //订购食物</span><br><span class="line">    </span><br><span class="line">    //订购麻辣鸡腿汉堡</span><br><span class="line">    public int orderHamburg(int num)&#123;</span><br><span class="line">        //获得奥尔良烤堡</span><br><span class="line">        Hamburg hamburg = kfcFactory.createHamburg(num);</span><br><span class="line">        //输出订购信息</span><br><span class="line">        hamburg.printMessage();</span><br><span class="line">        //返回总价</span><br><span class="line">        return hamburg.totalPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //订购奥尔良烤翅</span><br><span class="line">    public int orderChickenWings(int num)&#123;</span><br><span class="line">        //获得奥尔良烤鸡翅</span><br><span class="line">        ChickenWings chickenWings = kfcFactory.createChickenWings(num);</span><br><span class="line">        //输出订购信息</span><br><span class="line">        chickenWings.printMessage();</span><br><span class="line">        //返回总价</span><br><span class="line">        return chickenWings.totalPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //订购薯条</span><br><span class="line">    public int orderFrenchFries(int num)&#123;</span><br><span class="line">        //获得霸王薯条</span><br><span class="line">        FrenchFries frenchFries = kfcFactory.createFrenchFries(num);</span><br><span class="line">        //输出订购信息</span><br><span class="line">        frenchFries.printMessage();</span><br><span class="line">        //返回总价</span><br><span class="line">        return frenchFries.totalPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //订购可乐</span><br><span class="line">    public int orderBeverage(int num)&#123;</span><br><span class="line">        //获得可乐</span><br><span class="line">        Beverage beverage = kfcFactory.createBeverage(num);</span><br><span class="line">        //输出订购信息</span><br><span class="line">        beverage.printMessage();</span><br><span class="line">        //返回总价</span><br><span class="line">        return beverage.totalPrice();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //订购套餐1</span><br><span class="line">    public int orderTaoCan1(int num)&#123;</span><br><span class="line">    	//获得套餐1</span><br><span class="line">    	TaoCan1 taocan1=kfcFactory.createTaoCan1(num);</span><br><span class="line">    	//输出订购信息</span><br><span class="line">    	taocan1.printMessage();</span><br><span class="line">    	//返回总价</span><br><span class="line">    	return taocan1.totalPrice();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //订购套餐2</span><br><span class="line">    public int orderTaoCan2(int num)&#123;</span><br><span class="line">    	//获得套餐2</span><br><span class="line">    	TaoCan2 taocan2=kfcFactory.createTaoCan2(num);</span><br><span class="line">    	//输出订购信息</span><br><span class="line">    	taocan2.printMessage();</span><br><span class="line">    	//返回总价</span><br><span class="line">    	return taocan2.totalPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 6.汉堡基类Hamburg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//汉堡基类</span><br><span class="line"> </span><br><span class="line">public abstract class Hamburg extends AbstractBaseFood implements IFood&#123;</span><br><span class="line">    public void printMessage()&#123;</span><br><span class="line">        System.out.println(&quot;--&quot;+this.kind+&quot;奥尔良烤堡，\t单价：&quot;+this.price+</span><br><span class="line">                &quot;,\t数量：&quot;+this.num+&quot;，\t合计：&quot;+this.totalPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 7.汉堡子类(具体产品实现)ChinaHamburg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//奥尔良烤堡</span><br><span class="line">//具体产品</span><br><span class="line"></span><br><span class="line">public class ChinaHamburg extends Hamburg&#123;</span><br><span class="line">    public ChinaHamburg(int num) &#123;</span><br><span class="line">        this.kind = &quot;麻辣&quot;;</span><br><span class="line">        this.price = 28;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 8.薯条基类(抽象产品)FrenchFries</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//薯条基类</span><br><span class="line">//抽象产品</span><br><span class="line"></span><br><span class="line">public abstract class FrenchFries extends AbstractBaseFood implements IFood&#123;</span><br><span class="line">    public void printMessage()&#123;</span><br><span class="line">        System.out.println(&quot;--&quot;+this.kind+&quot;霸王薯条，\t单价：&quot;+this.price+</span><br><span class="line">                &quot;,\t数量：&quot;+this.num+&quot;，\t合计：&quot;+this.totalPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 9.薯条子类(具体产品实现)ChinaFrenchFries</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//薯条实现类</span><br><span class="line">//具体产品</span><br><span class="line"></span><br><span class="line">public class ChinaFrenchFries extends FrenchFries&#123;</span><br><span class="line">    public ChinaFrenchFries(int num) &#123;</span><br><span class="line">        this.kind = &quot;普通&quot;;</span><br><span class="line">        this.price = 8;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 10.鸡翅基类(抽象产品)ChickenWings</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//鸡翅基类</span><br><span class="line"></span><br><span class="line">public abstract class ChickenWings extends AbstractBaseFood implements IFood&#123;</span><br><span class="line">    public void printMessage()&#123;</span><br><span class="line">        System.out.println(&quot;--&quot;+this.kind+&quot;烤翅，\t单价：&quot;+this.price+</span><br><span class="line">                &quot;,\t数量：&quot;+this.num+&quot;，\t合计：&quot;+this.totalPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 11.鸡翅子类(具体产品实现)ChinaChickenWings</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//鸡翅实现类</span><br><span class="line"> //具体产品</span><br><span class="line"></span><br><span class="line">public class ChinaChickenWings extends ChickenWings&#123;</span><br><span class="line">    public ChinaChickenWings(int num) &#123;</span><br><span class="line">        this.kind = &quot;奥尔良&quot;;</span><br><span class="line">        this.price = 5;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 12.饮料基类(抽象产品)Beverage</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//饮料基类</span><br><span class="line"> </span><br><span class="line">public abstract class Beverage extends AbstractBaseFood implements IFood&#123;</span><br><span class="line">    public void printMessage()&#123;</span><br><span class="line">        System.out.println(&quot;--&quot;+this.kind+&quot;饮料，\t单价：&quot;+this.price+</span><br><span class="line">                &quot;,\t数量：&quot;+this.num+&quot;，\t合计：&quot;+this.totalPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 13.饮料子类(具体产品实现)ChinaBeverage</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//可乐实现类</span><br><span class="line"></span><br><span class="line">public class ChinaBeverage extends Beverage&#123;</span><br><span class="line">    public ChinaBeverage(int num) &#123;</span><br><span class="line">        this.kind = &quot;可乐&quot;;</span><br><span class="line">        this.price = 10;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 14.套餐1基类(抽象产品)TaoCan1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//套餐1基类</span><br><span class="line"></span><br><span class="line">public abstract class TaoCan1 extends AbstractBaseFood implements IFood&#123;</span><br><span class="line">    public void printMessage()&#123;</span><br><span class="line">        System.out.println(&quot;--&quot;+this.kind+&quot;套餐1，\t单价：&quot;+this.price+</span><br><span class="line">                &quot;,\t数量：&quot;+this.num+&quot;，\t合计：&quot;+this.totalPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 15.套餐1子类(具体产品实现)RealTaoCan1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//套餐1实现类</span><br><span class="line"></span><br><span class="line">public class RealTaoCan1 extends TaoCan1&#123;</span><br><span class="line">	    public RealTaoCan1(int num) &#123;</span><br><span class="line">	        this.kind = &quot;超值&quot;;</span><br><span class="line">	        this.price = 50;</span><br><span class="line">	        this.num = num;</span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 16.套餐2基类(抽象产品)TaoCan2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//套餐2基类</span><br><span class="line"></span><br><span class="line">public abstract class TaoCan2 extends AbstractBaseFood implements IFood&#123;</span><br><span class="line">    public void printMessage()&#123;</span><br><span class="line">        System.out.println(&quot;--&quot;+this.kind+&quot;套餐2，\t单价：&quot;+this.price+</span><br><span class="line">                &quot;,\t数量：&quot;+this.num+&quot;，\t合计：&quot;+this.totalPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 17.套餐2子类(具体产品实现)RealTaoCan2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line"></span><br><span class="line">//套餐2实现类</span><br><span class="line"></span><br><span class="line">public class RealTaoCan2 extends TaoCan2&#123;</span><br><span class="line">    public RealTaoCan2(int num) &#123;</span><br><span class="line">        this.kind = &quot;超值&quot;;</span><br><span class="line">        this.price = 40;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 18.菜单类MainMenu</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line"></span><br><span class="line">//菜单</span><br><span class="line"></span><br><span class="line">public class MainMenu &#123;</span><br><span class="line">	 //定义一个肯德基（IKfcFactory类型）</span><br><span class="line">    IKfcFactory kfcFactory = new ChinaKfcFactory();</span><br><span class="line">    //创建客户  </span><br><span class="line">    Customer customer = new Customer(kfcFactory);</span><br><span class="line">	Scanner sc=new Scanner(System.in);</span><br><span class="line">	public int a;</span><br><span class="line">	public int num1;</span><br><span class="line">	public int num2;</span><br><span class="line">	public int num3;</span><br><span class="line">	public int num4;</span><br><span class="line">	public int num5;</span><br><span class="line">	public int num6;</span><br><span class="line">	int hamburgMoney=customer.orderHamburg(num1);</span><br><span class="line">	int chickenWingsMoney = customer.orderChickenWings(num2);</span><br><span class="line">	int frenchFriesMoney = customer.orderFrenchFries(num3);</span><br><span class="line">	int singleMoney = customer.orderBeverage(num4);</span><br><span class="line">	int taocan1Money =customer.orderTaoCan1(num5);</span><br><span class="line">	int taocan2Money =customer.orderTaoCan2(num6);</span><br><span class="line">	public int price;</span><br><span class="line">	public String b;</span><br><span class="line">	public int c;</span><br><span class="line">	public int d;    //用户付款金额</span><br><span class="line">	public int e;    //找零</span><br><span class="line">	public void menu()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;* * * * * 欢迎进入肯德基炸鸡店 * * * * *&quot;);</span><br><span class="line">		System.out.println(&quot;* 您可以选择：1.单点      2.套餐                   *&quot;);</span><br><span class="line">		System.out.println(&quot;* 请您选择：&quot;);</span><br><span class="line">		a=sc.nextInt();</span><br><span class="line">		switch(a)</span><br><span class="line">		&#123;</span><br><span class="line">		case 1:</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.println(&quot;1.汉堡类：奥尔良烤堡_28元&quot;);				</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.println(&quot;2.鸡翅类：奥尔良烤翅_5元&quot;);</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.println(&quot;3.小食类：霸王薯条_8元&quot;);</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.println(&quot;4.饮料类：可乐_10元&quot;);</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.print(&quot;请您选择奥尔良烤堡的数量：&quot;);</span><br><span class="line">			num1=sc.nextInt();</span><br><span class="line">			hamburgMoney = customer.orderHamburg(num1);</span><br><span class="line">			System.out.print(&quot;请您选择奥尔良烤翅的数量：&quot;);</span><br><span class="line">			num2=sc.nextInt();</span><br><span class="line">		    chickenWingsMoney = customer.orderChickenWings(num2);</span><br><span class="line">			System.out.print(&quot;请您选择霸王薯条的数量：&quot;);</span><br><span class="line">			num3=sc.nextInt();</span><br><span class="line">			frenchFriesMoney = customer.orderFrenchFries(num3);</span><br><span class="line">			System.out.print(&quot;请您选择可乐的数量：&quot;);</span><br><span class="line">			num4=sc.nextInt();</span><br><span class="line">			singleMoney = customer.orderBeverage(num4);</span><br><span class="line">			price=hamburgMoney+chickenWingsMoney+frenchFriesMoney+singleMoney;</span><br><span class="line">			System.out.println(&quot;总计：&quot;+price);</span><br><span class="line">			break;</span><br><span class="line">		case 2:</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.println(&quot;套餐1：奥尔良烤堡+霸王薯条+可乐_50元&quot;);</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.println(&quot;套餐2：香辣鸡腿堡+麻辣烤翅+可乐_40元&quot;);</span><br><span class="line">			System.out.println(&quot;- - - - - - - - - - - - - - - - - - - - - - - - &quot;);</span><br><span class="line">			System.out.print(&quot;请您选择套餐1的数量：&quot;);</span><br><span class="line">			num5=sc.nextInt();</span><br><span class="line">			taocan1Money =customer.orderTaoCan1(num5);</span><br><span class="line">			System.out.print(&quot;请您选择套餐2的数量：&quot;);</span><br><span class="line">			num6=sc.nextInt();</span><br><span class="line">			taocan2Money =customer.orderTaoCan2(num6);</span><br><span class="line">			price=taocan1Money+taocan2Money;</span><br><span class="line">			System.out.println(&quot;总计：&quot;+price);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	//领取优惠券并付款找零</span><br><span class="line">	public void other()&#123;</span><br><span class="line">		System.out.println(&quot;为迎接新老顾客的到来，本店特地准备了两种优惠券&quot;);</span><br><span class="line">		System.out.println(&quot;---1.满45减5   ---2.满65减8&quot;);</span><br><span class="line">		System.out.print(&quot;您是否需要优惠券？(y/n)&quot;);</span><br><span class="line">		String b=sc.next();</span><br><span class="line">		if(&quot;y&quot;.equals(b))</span><br><span class="line">		&#123;</span><br><span class="line">			if(price&gt;=45&amp;&amp;price&lt;65)   //价格在45-65之间领取5元</span><br><span class="line">			&#123;</span><br><span class="line">				price-=5;</span><br><span class="line">				c=5;    //5元优惠券</span><br><span class="line">			&#125;</span><br><span class="line">			else if(price&gt;=65)  //价格&gt;=65领取8元</span><br><span class="line">			&#123;</span><br><span class="line">				price-=8;</span><br><span class="line">				c=8;</span><br><span class="line">			&#125;</span><br><span class="line">			else</span><br><span class="line">				System.out.println(&quot;您不能使用优惠券！&quot;);</span><br><span class="line">			System.out.println(&quot;领取&quot;+c+&quot;元优惠券成功！您一共消费：&quot;+price+&quot;元&quot;);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.print(&quot;付款：&quot;);</span><br><span class="line">		d=sc.nextInt();</span><br><span class="line">		e=d-price;</span><br><span class="line">		System.out.println(&quot;找零：&quot;+e);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//打印账单</span><br><span class="line">	public void paint()&#123;</span><br><span class="line">		System.out.print(&quot;您需要打印账单吗？(y/n)&quot;);</span><br><span class="line">		String m=sc.next();</span><br><span class="line">		if(&quot;y&quot;.equals(m))&#123;        //用户需要打印小票</span><br><span class="line">			System.out.println(&quot;您的账单为：&quot;);</span><br><span class="line">			switch(a)&#123;</span><br><span class="line">			case 1:</span><br><span class="line">				hamburgMoney=customer.orderHamburg(num1);</span><br><span class="line">				chickenWingsMoney = customer.orderChickenWings(num2);</span><br><span class="line">				frenchFriesMoney = customer.orderFrenchFries(num3);</span><br><span class="line">				singleMoney = customer.orderBeverage(num4);</span><br><span class="line">				System.out.println(&quot;领取&quot;+c+&quot;元优惠券&quot;);</span><br><span class="line">				System.out.println(&quot;总计：&quot;+price);</span><br><span class="line">				System.out.println(&quot;付款：&quot;+d);</span><br><span class="line">				System.out.println(&quot;找零：&quot;+e);</span><br><span class="line">				break;</span><br><span class="line">			case 2:</span><br><span class="line">				taocan1Money =customer.orderTaoCan1(num5);</span><br><span class="line">				taocan2Money =customer.orderTaoCan2(num6);</span><br><span class="line">				System.out.println(&quot;领取&quot;+c+&quot;元优惠券&quot;);</span><br><span class="line">				System.out.println(&quot;总计：&quot;+price);</span><br><span class="line">				System.out.println(&quot;付款：&quot;+d);</span><br><span class="line">				System.out.println(&quot;找零：&quot;+e);</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">			try&#123;</span><br><span class="line">				fully();</span><br><span class="line">			&#125;catch(Exception e)&#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(&quot;n&quot;.equals(m))&#123;</span><br><span class="line">			System.out.println(&quot;欢迎下次光临~&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//在文件中打印小票</span><br><span class="line">	public void fully() throws Exception&#123;</span><br><span class="line">		FileWriter pw=new FileWriter(&quot;zhangdan.txt&quot;,true);</span><br><span class="line">		BufferedWriter bw=new BufferedWriter(pw);</span><br><span class="line">		 try &#123;</span><br><span class="line">			 switch(a)</span><br><span class="line">			 &#123;</span><br><span class="line">			 case 1:</span><br><span class="line">			 bw.write(&quot;* * * * * * 欢迎光临肯德基炸鸡店* * * * * * * *\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;麻辣奥尔良烤堡      &quot;+&quot;单价：28   数量：&quot;+num1+&quot;合计：&quot;+hamburgMoney+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;奥尔良烤翅             &quot;+&quot;单价：5     数量：&quot;+num2+&quot;合计：&quot;+chickenWingsMoney+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;普通霸王薯条          &quot;+&quot;单价：8     数量：&quot;+num3+&quot;合计：&quot;+frenchFriesMoney+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;可乐饮料                 &quot;+&quot;单价：10   数量：&quot;+num4+&quot;合计：&quot;+singleMoney+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;总计：&quot;+price+&quot;\r\n&quot;); </span><br><span class="line">			 bw.write(&quot;付款：&quot;+d+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;找零：&quot;+e+&quot;\r\n&quot;);</span><br><span class="line">			 bw.flush();</span><br><span class="line">			 bw.close(); </span><br><span class="line">			 break;</span><br><span class="line">			 case 2:</span><br><span class="line">			 bw.write(&quot;* * * * * * 欢迎光临肯德基炸鸡店* * * * * * * *\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;超值套餐1      &quot;+&quot;单价：50     数量：&quot;+num5+&quot;合计：&quot;+taocan1Money+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;超值套餐2      &quot;+&quot;单价：40     数量：&quot;+num6+&quot;合计：&quot;+taocan2Money+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;总计：&quot;+price+&quot;\r\n&quot;); </span><br><span class="line">			 bw.write(&quot;付款：&quot;+d+&quot;\r\n&quot;);</span><br><span class="line">			 bw.write(&quot;找零：&quot;+e+&quot;\r\n&quot;);</span><br><span class="line">			 bw.flush();</span><br><span class="line">			 bw.close(); </span><br><span class="line">			 break;</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125; catch (IOException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();	</span><br><span class="line">				&#125;</span><br><span class="line">		 System.out.println(&quot;打印成功！欢迎下次光临~&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p> 19.主函数MainApp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package inter.KFC;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.text.*;    //获取当前系统时间</span><br><span class="line"></span><br><span class="line">public class MainApp &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    	Date date=new Date();</span><br><span class="line">    	DateFormat fullFormat=DateFormat.getDateInstance(DateFormat.FULL);</span><br><span class="line">    	System.out.println(&quot;当前日期：&quot;+fullFormat.format(date));</span><br><span class="line">        //引用菜单类</span><br><span class="line">        MainMenu mainmenu=new MainMenu();</span><br><span class="line">        mainmenu.menu();</span><br><span class="line">        mainmenu.other();</span><br><span class="line">        mainmenu.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>三种简单的程序设计模式实例</title>
    <url>/2019/05/01/%E4%B8%89%E7%A7%8D%E7%AE%80%E5%8D%95%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>  <strong>1.题目名称<br> (1)简单工厂模式</strong><br> 使用简单工厂模式模拟女娲（Nvwa）造人（Person），如果传入参数M，则返回一个Man对象，如果传入参数W，则返回一个Woman对象，请实现该场景。现需要增加一个新的Robot类，如果传入参数R，则返回一个Robot对象，对代码进行修改并注意女娲的变化。<br> <strong>(2)工厂方法模式</strong><br> 海尔工厂(Haier)生产海尔空调(HaierAirCondition)，美的工厂(Midea)生产美的空调(MideaAirCondition) 。使用工厂方法模式描述该场景，绘制类图并编程实现。(3)抽象工厂模式<br> 电脑配件生产工厂生产内存、CPU等硬件设备，这些内存、CPU的品牌、型号并不一定相同，根据下面的“产品等级结构-产品族”示意图，使用抽象工厂模式实现电脑配件生产过程并绘制相应的类图，绘制类图并编程实现。</p>
<p> <strong>2.题目分析<br> (1)简单工厂模式</strong><br> 简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。<br> <strong>&lt;1&gt;工厂角色</strong>(Nvwa)：实现所有实例的内部逻辑；<br> <strong>&lt;2&gt;抽象产品角色</strong>(Person)：所有对象的父类，负责描述所有实例共有的公共接口；<br> <strong>&lt;3&gt;具体产品角色</strong>(Man,Woman,Robot)：简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实现；<br> <strong>&lt;4&gt;XML配置文件</strong>(XMLUtilNvwa,Simple.xml)：将参数保存在XML等格式的配置文件中，修改时无须修改任何Java源代码。</p>
<p> <strong>(2)工厂方法模式</strong><br> 工厂方法模式(Factory Method Pattern)简称工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。<br> <strong>&lt;1&gt;抽象产品</strong>(KongTiao)：产品对象同一的基类，或者是同一的接口；<br> <strong>&lt;2&gt;具体产品</strong>(Haier,Midea)：各个不同的实例对象类；<br> <strong>&lt;3&gt;抽象工厂</strong>(KongTiaoFactory)：所有的子类工厂类的基类，或是同一的接口；<br> <strong>&lt;4&gt;具体工厂</strong>(HaierFactory,MideaFactory)：负责每个不同的产品对象的实际创建；<br> <strong>&lt;5&gt;XML配置文件</strong>(XMLUtil,FactoryMethod.xml)：将参数保存在XML等格式的配置文件中，修改时无须修改任何Java源代码。</p>
<p> <strong>(3)抽象工厂模式</strong><br> 抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。<br> 产品等级结构：即产品的继承结构，例如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。<br> 产品族：指由同一个工厂生产的，位于不同产品等级结构中的一组产品，例如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。<br> <strong>&lt;1&gt;抽象工厂</strong>(ComputerFactory)：模式的核心，通常是接口或抽象类，其他的具体工厂类必须实现这个接口或继承这个抽象类；<br> <strong>&lt;2&gt;具体工厂</strong>(macFactory,pcFactory)：直接在客户端的调用下创建产品的实例；<br> <strong>&lt;3&gt;抽象产品</strong>(CPU,RAM)：工厂模式所创建的对象的父类，或他们共同的接口；<br> <strong>&lt;4&gt;具体产品</strong>(pcCPU,macCPU,pcRAM,macRAM)：抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。<br> <strong>&lt;5&gt;XML配置文件</strong>(XMLUtil,AbstractFactory.xml)：将参数保存在XML等格式的配置文件中，修改时无须修改任何Java源代码</p>
<p> <strong>3.类图设计<br> (1)简单工厂模式：</strong><br> <img src="https://img-blog.csdnimg.cn/20190430234846261.GIF" alt="在这里插入图片描述"><br> <strong>(2)工厂方法模式：</strong><br> <img src="https://img-blog.csdnimg.cn/20190430235012546.GIF" alt="在这里插入图片描述"><br> <strong>(3)抽象工厂模式：</strong><br> <img src="https://img-blog.csdnimg.cn/20190430235127104.GIF" alt="在这里插入图片描述"></p>
<p> <strong>4.经验归纳<br> 4.1遇到的问题</strong><br> &lt;1&gt;对三种模式都不太熟悉，花费的时间较多<br> &lt;2&gt;不懂如何解析xml文档<br> &lt;3&gt;eclipse版本问题导致XMLUtil代码有错误，但可以运行<br> <strong>4.2心得体会</strong><br> 第一次编写程序设计模式的代码，刚开始觉得无从下手。对三种模式不熟悉，导致花费了较多的时间，所以一直在查资料。特别实在xml文档那块，我一直没搞懂为什么要写文档而不直接用输入输出流，结果发现是将参数保存在XML的配置文件中，这样修改参数的时候就没有必要修改任何Java源代码。但是这块还是挺薄弱的，写代码的时候也不能独立完成，还需要参考老师给的代码。第一个简单工厂模式挺简单的，第三个比较难（我觉得），所以要多练习抽象工厂模式的习题<del>~</del></p>
<p> <strong>附：源代码<br> (1)简单工厂模式<br> &lt;1&gt;抽象产品角色(父类):Person</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package Nvwa;</span><br><span class="line"></span><br><span class="line">public interface Person&#123;</span><br><span class="line">	public void make();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;2&gt;工厂角色(实现内部逻辑):Nvwa</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package Nvwa;</span><br><span class="line"></span><br><span class="line">public class Nvwa &#123;</span><br><span class="line">	public static Person producePerson(String sex) throws Exception</span><br><span class="line">	&#123;</span><br><span class="line">		if(sex.equalsIgnoreCase(&quot;M&quot;))  //选择&apos;M&apos;</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;造了一个男人！&quot;);</span><br><span class="line">			return new Man();  //返回参数</span><br><span class="line">		&#125;</span><br><span class="line">		else if(sex.equalsIgnoreCase(&quot;W&quot;))//选择&apos;W&apos;</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;造了一个女人！&quot;);</span><br><span class="line">			return new Woman();</span><br><span class="line">		&#125;</span><br><span class="line">		else if(sex.equalsIgnoreCase(&quot;R&quot;))//选择&apos;R&apos;</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;造了一个机器人！&quot;);</span><br><span class="line">			return new Robet();</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			throw new Exception(&quot;对不起，女娲正在忙，没空造人！&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;3&gt;具体产品角色(实现类):Man,Woman,Robet:<br> Man:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package Nvwa;</span><br><span class="line"></span><br><span class="line">public class Man implements Person&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;女娲正在造男人...&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>Woman:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package Nvwa;</span><br><span class="line"></span><br><span class="line">public class Woman implements Person&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;女娲正在造女人...&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>Robot:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package Nvwa;</span><br><span class="line"></span><br><span class="line">public class Robet implements Person&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;女娲正在造机器人...&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;4&gt;XML配置文件(方便修改参数):XMLUtilNvwa,Simple.xml</strong><br> <strong>XMLUtilNvwa：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLUtilNvwa：</span><br><span class="line">package Nvwa;</span><br><span class="line">import javax.xml.parsers.*;</span><br><span class="line">import org.w3c.dom.*;</span><br><span class="line">//import org.xml.sax.SAXException;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class XMLUtilNvwa &#123;</span><br><span class="line">	   //该方法用于从XML配置文件中提取名称，并返回该名称</span><br><span class="line">		public static String getSexName()</span><br><span class="line">		&#123;</span><br><span class="line">			try</span><br><span class="line">			&#123;</span><br><span class="line">				//创建文档对象</span><br><span class="line">				DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">				DocumentBuilder builder = dFactory.newDocumentBuilder();</span><br><span class="line">				Document doc;							</span><br><span class="line">				doc = builder.parse(new File(&quot;Simple.xml&quot;)); </span><br><span class="line">			</span><br><span class="line">				//获取包含名称的文本节点</span><br><span class="line">				NodeList nl = doc.getElementsByTagName(&quot;sexName&quot;);</span><br><span class="line">	            Node classNode=nl.item(0).getFirstChild();</span><br><span class="line">	            String sexName=classNode.getNodeValue().trim();</span><br><span class="line">	            return sexName;</span><br><span class="line">	           &#125;   </span><br><span class="line">	           	catch(Exception e)</span><br><span class="line">	           	&#123;</span><br><span class="line">	           		e.printStackTrace();</span><br><span class="line">	           		return null;</span><br><span class="line">	           	&#125;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>Simple.xml:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">	&lt;sexName&gt;M&lt;/sexName&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;6&gt;客户端：Client</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package Nvwa;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">	public static void main(String args[])</span><br><span class="line">	&#123;</span><br><span class="line">         try</span><br><span class="line">         &#123;</span><br><span class="line">         	Person pe;</span><br><span class="line">         	String sexName=XMLUtilNvwa.getSexName();</span><br><span class="line">         	pe=Nvwa.producePerson(sexName);</span><br><span class="line">         	pe.make();</span><br><span class="line">         &#125;</span><br><span class="line">         catch(Exception e)</span><br><span class="line">         &#123;</span><br><span class="line">         	System.out.println(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>(2)工厂方法模式<br> &lt;1&gt;抽象产品：KongTiao</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">public interface KongTiao &#123;</span><br><span class="line">	public void make();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;2&gt;具体产品：Haier,Midea<br> Haier：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">public class Haier implements KongTiao&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;海尔空调正在使用...&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>Midea：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">public class Midea implements KongTiao&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;美的空调正在使用...&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;3&gt;抽象工厂：KongTiaoFactory</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">public interface KongTiaoFactory &#123;</span><br><span class="line">	public KongTiao produceKT();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;4&gt;具体工厂：HaierFactory,MideaFactory<br> HaierFactory：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">public class HaierFactory implements KongTiaoFactory&#123;</span><br><span class="line">	public KongTiao produceKT()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;---海尔工厂正在生产海尔空调 &quot;);</span><br><span class="line">		return new Haier();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>MideaFactory：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">public class MideaFactory implements KongTiaoFactory&#123;</span><br><span class="line">	public KongTiao produceKT()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;---美的工厂正在生产美的空调 &quot;);</span><br><span class="line">		return new Midea();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;5&gt;XML配置文件：XMLUtil,FactoryMethod.xml<br> XMLUtil：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.*;</span><br><span class="line">import org.w3c.dom.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class XMLUtil &#123;</span><br><span class="line">	//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象</span><br><span class="line">		public static Object getBean()</span><br><span class="line">		&#123;</span><br><span class="line">			try</span><br><span class="line">			&#123;</span><br><span class="line">				//创建文档对象</span><br><span class="line">				DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">				DocumentBuilder builder = dFactory.newDocumentBuilder();</span><br><span class="line">				Document doc;							</span><br><span class="line">				doc = builder.parse(new File(&quot;FactoryMethod.xml&quot;)); </span><br><span class="line">			</span><br><span class="line">				//获取包含类名的文本节点</span><br><span class="line">				NodeList nl = doc.getElementsByTagName(&quot;className&quot;);</span><br><span class="line">	            Node classNode=nl.item(0).getFirstChild();</span><br><span class="line">	            String cName=classNode.getNodeValue();</span><br><span class="line">	            </span><br><span class="line">	            //通过类名生成实例对象并将其返回</span><br><span class="line">	            Class c=Class.forName(cName);</span><br><span class="line">		  	    Object obj=c.newInstance();</span><br><span class="line">	            return obj;</span><br><span class="line">	           &#125;   </span><br><span class="line">	           	catch(Exception e)</span><br><span class="line">	           	&#123;</span><br><span class="line">	           		e.printStackTrace();</span><br><span class="line">	           		return null;</span><br><span class="line">	           	&#125;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>FactoryMethod.xml：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">	&lt;className&gt;FactoryMethod.HaierFactory&lt;/className&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;6&gt;客户端：Client</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package FactoryMethod;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		try&#123;</span><br><span class="line">			KongTiao kt;</span><br><span class="line">			KongTiaoFactory fa;</span><br><span class="line">			fa=(KongTiaoFactory)XMLUtil.getBean();</span><br><span class="line">			kt=fa.produceKT();</span><br><span class="line">			kt.make();</span><br><span class="line">		&#125;catch(Exception e)</span><br><span class="line">         &#123;</span><br><span class="line">         	System.out.println(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>(3)抽象工厂模式<br> &lt;1&gt;抽象工厂：ComputerFactory</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public interface ComputerFactory &#123;	</span><br><span class="line">	public CPU produceCPU();</span><br><span class="line">	public RAM produceRAM();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;2&gt;具体工厂：macFactory,pcFactory<br> macFactory：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public class macFactory implements ComputerFactory&#123;</span><br><span class="line">	</span><br><span class="line">	//生产macCPU</span><br><span class="line">	public CPU produceCPU()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;生产了macCPU...&quot;);</span><br><span class="line">		//CPU macCPU;</span><br><span class="line">		return new macCPU();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//生产macRAM</span><br><span class="line">	public RAM produceRAM()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;生产了macRAM...&quot;);</span><br><span class="line">		return new macRAM();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>pcFactory：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public class pcCPU implements CPU&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;pcCPU&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;3&gt;抽象产品：CPU,RAM<br> CPU：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public interface CPU &#123;</span><br><span class="line">	public void make();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>RAM：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public interface RAM &#123;</span><br><span class="line">	public void make();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;4&gt;具体产品：pcCPU,macCPU,pcRAM,macRAM<br> pcCPU：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public class pcCPU implements CPU&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;pcCPU&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>macCPU：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public class macCPU implements CPU&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;macCPU&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>pcRAM：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public class pcRAM implements RAM&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;pcRAM&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>macRAM：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public class macRAM implements RAM&#123;</span><br><span class="line">	public void make()</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;macRAM&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;5&gt;XML配置文件：XMLUtil,AbstractFactory.xml<br> XMLUtil：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.*;</span><br><span class="line">import org.w3c.dom.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class XMLUtil &#123;</span><br><span class="line">//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象</span><br><span class="line">	public static Object getBean()</span><br><span class="line">	&#123;</span><br><span class="line">		try</span><br><span class="line">		&#123;</span><br><span class="line">			//创建文档对象</span><br><span class="line">			DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">			DocumentBuilder builder = dFactory.newDocumentBuilder();</span><br><span class="line">			Document doc;							</span><br><span class="line">			doc = builder.parse(new File(&quot;AbstractFactory.xml&quot;)); </span><br><span class="line">			</span><br><span class="line">			//获取包含类名的文本节点</span><br><span class="line">			NodeList nl = doc.getElementsByTagName(&quot;className&quot;);</span><br><span class="line">	        Node classNode=nl.item(0).getFirstChild();</span><br><span class="line">	        String cName=classNode.getNodeValue();</span><br><span class="line">	            </span><br><span class="line">	        //通过类名生成实例对象并将其返回</span><br><span class="line">	        Class c=Class.forName(cName);</span><br><span class="line">		  	Object obj=c.newInstance();</span><br><span class="line">	        return obj;</span><br><span class="line">	        &#125;catch(Exception e)</span><br><span class="line">	        &#123;</span><br><span class="line">	        	e.printStackTrace();</span><br><span class="line">	           	return null;</span><br><span class="line">	           	&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>AbstractFactory.xml：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">	&lt;className&gt;AbstractFactory.macFactory&lt;/className&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p> <strong>&lt;6&gt;客户端：Client</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package AbstractFactory;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;		</span><br><span class="line">		try</span><br><span class="line">		&#123;</span><br><span class="line">			ComputerFactory fac;</span><br><span class="line">			CPU cpu;</span><br><span class="line">			RAM ram;</span><br><span class="line">			fac=(ComputerFactory)XMLUtil.getBean();</span><br><span class="line">			cpu=fac.produceCPU();</span><br><span class="line">			cpu.make();</span><br><span class="line">			ram=fac.produceRAM();</span><br><span class="line">			ram.make();</span><br><span class="line">		&#125;</span><br><span class="line">		catch(Exception e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java创建RPG游戏角色</title>
    <url>/2019/04/17/Java%E5%88%9B%E5%BB%BARPG%E6%B8%B8%E6%88%8F%E8%A7%92%E8%89%B2/</url>
    <content><![CDATA[<p>  <strong>◆题目名称</strong><br> 创建RPG游戏角色</p>
<p> <strong>◆题目分析</strong><br> 该程序需要用到有关类与对象的知识点，所以不能使用C语言来编写代码，这里我选择Java语言。本题目要求的游戏角色应有以下属性：名字、性别、种族、职业、力量、敏捷、体力、智力、智慧、生命值和魔法值。本题目要求力量、敏捷、体力、智力和智慧要求是随机值（利用随机数函数来取得随机数），但是五项属性的总和应该是100，并且应该和职业相关。例如狂战士的体力和力量就要比较高，而巫师需要较高的智力，而祭司则需要较高的智慧。各职业初始属性的大致比例应遵从下表：<br> 职业/属性 力量 敏捷 体力 智力 智慧<br> 狂战士 40 20 30 5 5<br> 圣骑士 25 15 30 20 10<br> 刺客 20 35 20 15 10<br> 猎手 15 40 15 10 20<br> 祭司 15 20 15 35 15<br> 巫师 10 20 10 20 40<br> 例如，前面示意图中的祭司的初始属性，大致满足该比例，但是应该是随机的。然后利用属性值计算生命值和魔法值。<br> 最后向用户显示该角色的所有信息，将用户创建角色的相关信息写入文件保存。</p>
<p> <strong>◆算法构造</strong><br> &lt;1&gt;玩家选择1，则进入游戏；选择2，可以查看游戏规则；选择3，则游戏结束。<br> &lt;2&gt;选择1：玩家先输入角色姓名、性别、种族以及职业，根据种族和职业的限制表判断玩家是否可以使用该职业，若不能则重新选择职业；<br> &lt;3&gt;利用随机函数分别生成力量、敏捷、体力、智力和智慧五项属性，并将五项属性的总和控制在100，并且属性值和职业相关。可以由(int)(X+Math.random()_10-5)可以得到符合条件的属性值，其中X表示表1中的属性限定值，并计算生命值和魔法值：生命值=体力_20、魔法值=（智力+智慧）*10；<br> &lt;4&gt;打印所有的信息并向用户显示出来；<br> &lt;5&gt;将用户创建角色的相关信息写入txt文件保存。</p>
<p> <strong>◆算法实现</strong><br> 写入文件代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void REFile(int occ) throws IOException&#123;  //throws IOException:异常处理</span><br><span class="line">		 FileWriter writer=new FileWriter(&quot;message.txt&quot;,true);//存入信息，不会将以前的信息覆盖			</span><br><span class="line">			try &#123;</span><br><span class="line">				writer.write(&quot;姓名: &quot;+n+&quot;\t&quot;);  //&quot;\t&quot;表示空格</span><br><span class="line">				writer.write(&quot;性别 : &quot;+s+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;种族 : &quot;+ra+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;职业 : &quot;+occ+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;力量 : &quot;+strength+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;敏捷 : &quot;+smart+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;体力 : &quot;+body+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;智力 : &quot;+talent+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;智慧 : &quot;+wisdom+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;生命值: &quot;+life+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;魔法值: &quot;+magic+&quot;\r\n&quot;);//&quot;\r\n&quot;表示空行</span><br><span class="line">				writer.flush();</span><br><span class="line">				writer.close();  //关闭文件</span><br><span class="line">				</span><br><span class="line">			&#125; catch (IOException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();	</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(&quot;创建成功！&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>◆调试及运行结果<br> ◆◆调试结果</strong><br> <img src="https://img-blog.csdnimg.cn/20190417163502315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NzQ3NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>◆运行结果</strong><br> <img src="https://img-blog.csdnimg.cn/20190417163558887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NzQ3NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>◆◆文件保存情况</strong><br> <img src="https://img-blog.csdnimg.cn/2019041716363833.png" alt="在这里插入图片描述"><br> <strong>◆经验归纳<br> ◆◆遇到的问题</strong><br> &lt;1&gt;对于Java中的类和对象用的还不是很熟练(还在努力学习中)<br> &lt;2&gt;Java引用写入文件方法出问题(已解决)<br> &lt;3&gt;Java写入文件方法内部出现异常(已解决)<br> &lt;4&gt;IO流未声明(已解决)<br> <strong>◆◆心得体会</strong><br> 用Java写这个程序，让我查了不少有关Java的知识点。在类与对象那块还不太熟悉，其中，有一些知识点是值得记录的：<br> ①访问另一个类中的某个方法：Start g=new Start();g.start();<br> ②对象引用：Random r=new Random();r.n=name;<br> ③随机函数生成某个值：strength=(int)(40+Math.random()*10-5)(40是限制条件)<br> ④调用写入文件方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;        </span><br><span class="line">	REFile(occ);</span><br><span class="line">&#125;catch (IOException e) &#123;</span><br><span class="line">	// TODO Auto-generated catch block</span><br><span class="line">	e.printStackTrace();</span><br></pre></td></tr></table></figure>

<p> 在百度文库查找资料的时候我发现可以将这个代码优化，即编为小游戏的形式，我打算找时间写一下。</p>
<p> <strong>附：源代码(部分代码参考百度文库)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package game;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">public class First &#123;</span><br><span class="line">	public static void main(String[] args)&#123;   //菜单</span><br><span class="line">		System.out.println(&quot;这是一个RPG游戏&quot;);</span><br><span class="line">		System.out.println(&quot;1.开始游戏&quot;);</span><br><span class="line">		System.out.println(&quot;2.游戏规则&quot;);</span><br><span class="line">		System.out.println(&quot;3.结束游戏&quot;);</span><br><span class="line">		System.out.print(&quot;请输入您想进行的操作：(1-3)&quot;);</span><br><span class="line">		Scanner x=new Scanner(System.in);</span><br><span class="line">		int num=x.nextInt();    </span><br><span class="line">		switch(num)&#123;</span><br><span class="line">		case 1:</span><br><span class="line">			Start g=new Start();</span><br><span class="line">			g.start();      //访问Start类中的start方法开始创建角色</span><br><span class="line">			break;</span><br><span class="line">		case 2:</span><br><span class="line">			Rule r=new Rule();</span><br><span class="line">			r.rule();     //访问Rule类中的rule方法查看规则</span><br><span class="line">			break;</span><br><span class="line">		default:</span><br><span class="line">			System.out.println(&quot;游戏结束!&quot;);</span><br><span class="line">			System.exit(0);  //游戏结束标识</span><br><span class="line">		&#125;		</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//开始游戏</span><br><span class="line">class Start&#123;</span><br><span class="line">	int occ=0;</span><br><span class="line">	String name;</span><br><span class="line">	public void start()&#123;</span><br><span class="line">		System.out.print(&quot;请输入您游戏角色的姓名：&quot;);</span><br><span class="line">		Scanner a=new Scanner(System.in);</span><br><span class="line">		String name=a.next();</span><br><span class="line">		System.out.print(&quot;请选择您游戏角色的性别：(男或女)&quot;);</span><br><span class="line">		Scanner b=new Scanner(System.in);</span><br><span class="line">		String sex=b.next();</span><br><span class="line">		System.out.print(&quot;请选择您游戏角色的种族：(1.人类,2.精灵,3.兽人,4.矮人,5.元素)&quot;);</span><br><span class="line">		Scanner c=new Scanner(System.in);</span><br><span class="line">		int race=c.nextInt();</span><br><span class="line">		switch(race)&#123;  //职业选择</span><br><span class="line">		case 1:   //种族为人类</span><br><span class="line">			while(true)&#123;</span><br><span class="line">				System.out.print(&quot;请选择您的职业：(1.狂战士,2.圣骑士,3.刺客,4.猎手,5.祭司,6.巫师)&quot;);  </span><br><span class="line">				Scanner d=new Scanner(System.in);</span><br><span class="line">				occ=d.nextInt();</span><br><span class="line">				if(occ&gt;=1&amp;&amp;occ&lt;=6)&#123;      //验证输入正确性，正确则跳出循环，否则输出提示。</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">					System.out.println(&quot;请输入1-6之间的数字选择职业！！&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			break;</span><br><span class="line">		case 2:   //种族为精灵</span><br><span class="line">			while(true)&#123;</span><br><span class="line">				System.out.print(&quot;请选择您的职业：(1.狂战士,2.圣骑士,3.刺客,4.猎手,5.祭司,6.巫师)&quot;);  </span><br><span class="line">				Scanner d=new Scanner(System.in);</span><br><span class="line">				occ=d.nextInt();</span><br><span class="line">				if(occ&gt;=3&amp;&amp;occ&lt;=6)&#123;      //验证输入正确性，正确则跳出循环，否则输出提示。</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">					System.out.println(&quot;请输入3-6之间的数字选择职业！！&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			break;			</span><br><span class="line">		case 3:   //种族为兽人</span><br><span class="line">			while(true)&#123;</span><br><span class="line">				System.out.print(&quot;请选择您的职业：(1.狂战士,2.圣骑士,3.刺客,4.猎手,5.祭司,6.巫师)&quot;);  </span><br><span class="line">				Scanner d=new Scanner(System.in);</span><br><span class="line">				occ=d.nextInt();</span><br><span class="line">				if(occ==1||occ==4||occ==5)&#123;      //验证输入正确性，正确则跳出循环，否则输出提示。</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">					System.out.println(&quot;请输入1,4,5这三个数字任意一个选择职业！！&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			break;			</span><br><span class="line">		case 4:   //种族为矮人</span><br><span class="line">			while(true)&#123;</span><br><span class="line">				System.out.print(&quot;请选择您的职业：(1.狂战士,2.圣骑士,3.刺客,4.猎手,5.祭司,6.巫师)&quot;);  </span><br><span class="line">				Scanner d=new Scanner(System.in);</span><br><span class="line">				occ=d.nextInt();</span><br><span class="line">				if(occ==1||occ==2||occ==5)&#123;      //验证输入正确性，正确则跳出循环，否则输出提示。</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">					System.out.println(&quot;请输入1,2,5这三个数字任意一个选择职业！！&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			break;				</span><br><span class="line">		case 5:   //种族为元素</span><br><span class="line">			while(true)&#123;</span><br><span class="line">				System.out.print(&quot;请选择您的职业：(1.狂战士,2.圣骑士,3.刺客,4.猎手,5.祭司,6.巫师)&quot;);  </span><br><span class="line">				Scanner d=new Scanner(System.in);</span><br><span class="line">				occ=d.nextInt();</span><br><span class="line">				if(occ==5||occ==6)&#123;      //验证输入正确性，正确则跳出循环，否则输出提示。</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">					System.out.println(&quot;请输入5-6之间的数字选择职业！！&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			break;	</span><br><span class="line">		&#125;</span><br><span class="line">		Random r=new Random();</span><br><span class="line">		r.n=name;    //将姓名、性别、种族对象引用到Random类中</span><br><span class="line">		r.s=sex;</span><br><span class="line">		r.ra=race;</span><br><span class="line">		r.random(occ);//将职业传递到Random类的random方法中</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">class Random&#123;</span><br><span class="line">	String n;</span><br><span class="line">	String s;</span><br><span class="line">	int ra;</span><br><span class="line">	int strength=0;   //力量</span><br><span class="line">	int smart=0;      //敏捷</span><br><span class="line">	int body=0;       //体力</span><br><span class="line">	int talent=0;     //智力</span><br><span class="line">	int wisdom=0;     //智慧</span><br><span class="line">	int life=0;       //生命值</span><br><span class="line">	int magic=0;      //魔法值</span><br><span class="line">	public void random(int occ)&#123;   //随机函数生成各个值</span><br><span class="line">		System.out.println(occ);</span><br><span class="line">		if(occ==1)</span><br><span class="line">		&#123;</span><br><span class="line">			strength=(int)(40+Math.random()*10-5);//随机函数生成符合题目条件的各个值</span><br><span class="line">			smart=(int)(20+Math.random()*10-5);</span><br><span class="line">			body=(int)(30+Math.random()*10-5);</span><br><span class="line">			talent=(int)(5+Math.random()*10-5);</span><br><span class="line">			wisdom=100-strength-smart-body-talent;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(occ==2)&#123;</span><br><span class="line">			strength=(int)(25+Math.random()*10-5);</span><br><span class="line">			smart=(int)(15+Math.random()*10-5);</span><br><span class="line">			body=(int)(30+Math.random()*10-5);</span><br><span class="line">			talent=(int)(20+Math.random()*10-5);</span><br><span class="line">			wisdom=100-strength-smart-body-talent;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(occ==3)&#123;</span><br><span class="line">			strength=(int)(20+Math.random()*10-5);</span><br><span class="line">			smart=(int)(35+Math.random()*10-5);</span><br><span class="line">			body=(int)(20+Math.random()*10-5);</span><br><span class="line">			talent=(int)(15+Math.random()*10-5);</span><br><span class="line">			wisdom=100-strength-smart-body-talent;		</span><br><span class="line">		&#125;</span><br><span class="line">		else if(occ==4)&#123;</span><br><span class="line">			strength=(int)(15+Math.random()*10-5);</span><br><span class="line">			smart=(int)(40+Math.random()*10-5);</span><br><span class="line">			body=(int)(15+Math.random()*10-5);</span><br><span class="line">			talent=(int)(10+Math.random()*10-5);</span><br><span class="line">			wisdom=100-strength-smart-body-talent;		</span><br><span class="line">		&#125;</span><br><span class="line">		else if(occ==5)&#123;</span><br><span class="line">			strength=(int)(15+Math.random()*10-5);</span><br><span class="line">			smart=(int)(20+Math.random()*10-5);</span><br><span class="line">			body=(int)(15+Math.random()*10-5);</span><br><span class="line">			talent=(int)(35+Math.random()*10-5);</span><br><span class="line">			wisdom=100-strength-smart-body-talent;		</span><br><span class="line">		&#125;</span><br><span class="line">		else if(occ==6)&#123;</span><br><span class="line">			strength=(int)(10+Math.random()*10-5);</span><br><span class="line">			smart=(int)(20+Math.random()*10-5);</span><br><span class="line">			body=(int)(10+Math.random()*10-5);</span><br><span class="line">			talent=(int)(20+Math.random()*10-5);</span><br><span class="line">			wisdom=100-strength-smart-body-talent;			</span><br><span class="line">		&#125;</span><br><span class="line">		life=body*20;   //计算生命值和魔法值</span><br><span class="line">		magic=(talent+wisdom)*10;		</span><br><span class="line">		print(occ);  //调用打印方法</span><br><span class="line">		try &#123;        //调用写入文件方法</span><br><span class="line">			REFile(occ);</span><br><span class="line">		&#125;catch (IOException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	//打印</span><br><span class="line">	public void print(int occ)&#123; </span><br><span class="line">		System.out.println(&quot;* * * * * * * * * * * * *&quot;);</span><br><span class="line">		System.out.println(&quot;*    姓名：&quot;+n+&quot;         *&quot;);</span><br><span class="line">		System.out.println(&quot;*    性别：&quot;+s+&quot;         *&quot;);</span><br><span class="line">		System.out.println(&quot;*    种族：&quot;+ra+&quot;        *&quot;);</span><br><span class="line">		System.out.println(&quot;*    职业：&quot;+occ+&quot;       *&quot;);</span><br><span class="line">		System.out.println(&quot;*    力量：&quot;+strength+&quot;  *&quot;);</span><br><span class="line">		System.out.println(&quot;*    敏捷：&quot;+smart+&quot;     *&quot;);</span><br><span class="line">		System.out.println(&quot;*    体力：&quot;+body+&quot;      *&quot;);</span><br><span class="line">		System.out.println(&quot;*    智力：&quot;+talent+&quot;    *&quot;);</span><br><span class="line">		System.out.println(&quot;*    智慧：&quot;+wisdom+&quot;    *&quot;);</span><br><span class="line">		System.out.println(&quot;*    生命值：&quot;+life+&quot;     *&quot;);</span><br><span class="line">		System.out.println(&quot;*    魔法值：&quot;+magic+&quot;    *&quot;);</span><br><span class="line">		System.out.println(&quot;* * * * * * * * * * * * *&quot;);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	//写入文件</span><br><span class="line">	public void REFile(int occ) throws IOException&#123;  //throws IOException:异常处理</span><br><span class="line">		 FileWriter writer=new FileWriter(&quot;message.txt&quot;,true);//存入信息，不会将以前的信息覆盖			</span><br><span class="line">			try &#123;</span><br><span class="line">				writer.write(&quot;姓名: &quot;+n+&quot;\t&quot;);  //&quot;\t&quot;表示空格</span><br><span class="line">				writer.write(&quot;性别 : &quot;+s+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;种族 : &quot;+ra+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;职业 : &quot;+occ+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;力量 : &quot;+strength+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;敏捷 : &quot;+smart+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;体力 : &quot;+body+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;智力 : &quot;+talent+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;智慧 : &quot;+wisdom+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;生命值: &quot;+life+&quot;\t&quot;);</span><br><span class="line">				writer.write(&quot;魔法值: &quot;+magic+&quot;\r\n&quot;);//&quot;\r\n&quot;表示空行</span><br><span class="line">				writer.flush();</span><br><span class="line">				writer.close();  //关闭文件</span><br><span class="line">				</span><br><span class="line">			&#125; catch (IOException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();	</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(&quot;创建成功！&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">//游戏规则</span><br><span class="line">class Rule&#123;</span><br><span class="line">	public void rule()&#123; </span><br><span class="line">		System.out.println(&quot;很多职业会限制某些种族选择,种族和职业的限制情况如下：(下表均为不允许)&quot;);</span><br><span class="line">		System.out.println(&quot;┎---------------------------------------------┒&quot;);</span><br><span class="line">		System.out.println(&quot;│         种   类                   职   业                                │&quot;);</span><br><span class="line">		System.out.println(&quot;│          精灵               狂战士、圣骑士                       │&quot;);</span><br><span class="line">		System.out.println(&quot;│          兽人               圣骑士、刺客、巫师                │&quot;);</span><br><span class="line">		System.out.println(&quot;│          矮人               刺客、猎手、巫师                   │&quot;);</span><br><span class="line">		System.out.println(&quot;│          元素               狂战士、圣骑士、刺客、猎手  │&quot;);</span><br><span class="line">		System.out.println(&quot;┖---------------------------------------------┚&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>24点游戏简单版</title>
    <url>/2019/04/10/24%E7%82%B9%E6%B8%B8%E6%88%8F%E7%AE%80%E5%8D%95%E7%89%88/</url>
    <content><![CDATA[<p>  <strong>●题目名称</strong><br> 24点游戏（经典的纸牌益智游戏）</p>
<p> <strong>●题目分析</strong><br> 随机生成4个代表扑克牌牌面的数字字母，程序自动列出所有可能算出24的表达式，可以利用穷举法列出4个数字加减乘除的各种可能性，包括括号的算法，并且要利用循环控制计算范围，防止出现重复的表达式。</p>
<p> <strong>●算法构造</strong><br> &lt;1&gt;利用随机函数生成4个随机数<br> &lt;2&gt;将4个数所有可能的顺序列举，并调用计算函数<br> &lt;3&gt;循环调用使4个数字分别进行两两运算，并将表达式储存在一个数组中<br> &lt;4&gt;将3个运算符的顺序进行调整，调用加减乘除运算操作函数计算并输出</p>
<p> <strong>●算法实现</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt; </span><br><span class="line">#include&lt;stdlib.h&gt; </span><br><span class="line">#include&lt;time.h&gt; </span><br><span class="line">#define N 10    //定义四个数的取值最大为10</span><br><span class="line"></span><br><span class="line">double operate(double a,double b,char ch)   //加减乘除运算操作函数 </span><br><span class="line">&#123; </span><br><span class="line">  if(ch==&apos;+&apos;) </span><br><span class="line">      return a+b; </span><br><span class="line">  else if(ch==&apos;-&apos;) </span><br><span class="line">	  return a-b; </span><br><span class="line">  else if(ch==&apos;/&apos;) </span><br><span class="line">      return a/b; </span><br><span class="line">  else if(ch==&apos;*&apos;) </span><br><span class="line">	  return a*b; </span><br><span class="line">  else </span><br><span class="line">	  return 0; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">int precede(char a,char b)  //判断优先级函数 </span><br><span class="line">&#123; </span><br><span class="line">   if(a==&apos;+&apos;||a==&apos;-&apos;) </span><br><span class="line">   &#123; </span><br><span class="line">     if(b==&apos;*&apos;||b==&apos;/&apos;) </span><br><span class="line">		 return 1; </span><br><span class="line">	 if(b==&apos;+&apos;||b==&apos;-&apos;) </span><br><span class="line">		 return 0; </span><br><span class="line">   &#125; </span><br><span class="line">   if(a==&apos;*&apos;||a==&apos;/&apos;) </span><br><span class="line">	   return 0; </span><br><span class="line">   return 0; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int check(double A,double B,double C,double D) </span><br><span class="line">&#123;  </span><br><span class="line">  int i,j,k; </span><br><span class="line">  char d[4]=&#123;&apos;+&apos;,&apos;-&apos;,&apos;*&apos;,&apos;/&apos;&#125;;   //数组储存运算符</span><br><span class="line">  double a[N],b[N][N],c[N][N][N]; </span><br><span class="line">  for(i=0;i&lt;4;i++)              //循环调用使A,B进行运算操作,d[]为运算符,运算结果存到a[]中</span><br><span class="line">	  a[i]=operate(A,B,d[i]); </span><br><span class="line">  for(i=0;i&lt;4;i++) </span><br><span class="line">	  for(j=0;j&lt;4;j++) </span><br><span class="line">		  b[i][j]=operate(a[i],C,d[j]);   //A,B运算的结果和C运算，结果存到b[][]中</span><br><span class="line">	  for(i=0;i&lt;4;i++) </span><br><span class="line">		  for(j=0;j&lt;4;j++) </span><br><span class="line">			  for(k=0;k&lt;4;k++)         //循环防止重复</span><br><span class="line">				  c[i][j][k]=operate(b[i][j],D,d[k]);  //A,B,C运算的结果和D运算，结果存到c[][][]中</span><br><span class="line">			  for(i=0;i&lt;4;i++) </span><br><span class="line">				  for(j=0;j&lt;4;j++) </span><br><span class="line">					  for(k=0;k&lt;4;k++) </span><br><span class="line">					  &#123; </span><br><span class="line">						  if(c[i][j][k]==24.0)     //判断四个数运算结果是否为24</span><br><span class="line">							  return 1; </span><br><span class="line">					  &#125; </span><br><span class="line">					  return 0; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void SHOW(double A,double B,double C,double D) //输出函数，运算过程与check()函数相同</span><br><span class="line">&#123;  </span><br><span class="line">  int i,j,k; </span><br><span class="line">  char d[4]=&#123;&apos;+&apos;,&apos;-&apos;,&apos;*&apos;,&apos;/&apos;&#125;; </span><br><span class="line">  double a[N],b[N][N],c[N][N][N]; </span><br><span class="line">  for(i=0;i&lt;4;i++) </span><br><span class="line">	  a[i]=operate(A,B,d[i]); </span><br><span class="line">  for(i=0;i&lt;4;i++) </span><br><span class="line">	  for(j=0;j&lt;4;j++) </span><br><span class="line">		  b[i][j]=operate(a[i],C,d[j]);</span><br><span class="line">	  for(i=0;i&lt;4;i++) </span><br><span class="line">		  for(j=0;j&lt;4;j++) </span><br><span class="line">			  for(k=0;k&lt;4;k++)               //防止重复</span><br><span class="line">				  c[i][j][k]=operate(b[i][j],D,d[k]); </span><br><span class="line">			  for(i=0;i&lt;4;i++) </span><br><span class="line">				  for(j=0;j&lt;4;j++) </span><br><span class="line">					  for(k=0;k&lt;4;k++) </span><br><span class="line">					  &#123; </span><br><span class="line">						  if(c[i][j][k]==24.0) //判断四个数运算结果是否为24</span><br><span class="line">						  &#123;  </span><br><span class="line">							  if(precede(d[i],d[j])) //调用判断优先级函数，判断第一、第二个运算符可能出现的情况</span><br><span class="line">							  &#123; </span><br><span class="line">								  printf(&quot;(%.0f%c%.0f)%c%.0f%c%.0f=24&quot;,A,d[i],B,d[j],C,d[k],D); //(AB)CD</span><br><span class="line">								  printf(&quot;\n&quot;); </span><br><span class="line">							  &#125; </span><br><span class="line">							  else if(precede(d[j],d[k])) //调用判断优先级函数，判断第二、第三个运算符可能出现的情况</span><br><span class="line">							  &#123; </span><br><span class="line">								  printf(&quot;(%.0f%c%.0f%c%.0f)%c%.0f=24&quot;,A,d[i],B,d[j],C,d[k],D); </span><br><span class="line">								  printf(&quot;\n&quot;); </span><br><span class="line">							  &#125; </span><br><span class="line">							  else                       //调用判断优先级函数，判断第一、第三个运算符可能出现的情况 </span><br><span class="line">							  &#123; </span><br><span class="line">								  printf(&quot;%.0f%c%.0f%c%.0f%c%.0f=24&quot;,A,d[i],B,d[j],C,d[k],D); </span><br><span class="line">								  printf(&quot;\n&quot;); </span><br><span class="line">							  &#125; </span><br><span class="line">						  &#125; </span><br><span class="line">					  &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void game_24() </span><br><span class="line">&#123; </span><br><span class="line">  double A=0,B=0,C=0,D=0; </span><br><span class="line">  char j; </span><br><span class="line">  char d[4]=&#123;&apos;+&apos;,&apos;-&apos;,&apos;*&apos;,&apos;/&apos;&#125;; </span><br><span class="line">  srand((unsigned)time(NULL)); </span><br><span class="line">  while(1)               </span><br><span class="line">  &#123; </span><br><span class="line">	  while((A==0||B==0)||(C==0||D==0)) //当A,B,C,D不为0时，4个随机数赋值给A,B,C,D</span><br><span class="line">	  &#123; </span><br><span class="line">		  A=rand()%10*1.0; </span><br><span class="line">		  B=rand()%10*1.0; </span><br><span class="line">		  C=rand()%10*1.0; </span><br><span class="line">		  D=rand()%10*1.0; </span><br><span class="line">	  &#125; </span><br><span class="line">	  if((check(A,B,C,D)||check(B,C,A,D))||(check(C,B,D,A)||check(D,A,B,C))) </span><br><span class="line">		  break; </span><br><span class="line">	  else </span><br><span class="line">	  &#123; </span><br><span class="line">		  A=0; </span><br><span class="line">		  B=0; </span><br><span class="line">		  C=0; </span><br><span class="line">		  D=0; </span><br><span class="line">	  &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  printf(&quot;随机生成四个数为：&quot;);</span><br><span class="line">  printf(&quot;%.0f %.0f %.0f %.0f\n&quot;,A,B,C,D);   </span><br><span class="line">  printf(&quot;是否要看答案(y/n):&quot;); </span><br><span class="line">  while(1) </span><br><span class="line">  &#123; </span><br><span class="line">     scanf(&quot;%s&quot;,&amp;j); </span><br><span class="line">     if(j==&apos;y&apos;||j==&apos;Y&apos;) </span><br><span class="line">	 &#123;  </span><br><span class="line">		 SHOW(A,B,C,D);  //将24种可能列举，并调用函数计算并输出结果</span><br><span class="line">		 SHOW(A,B,D,C); </span><br><span class="line">   	     SHOW(A,D,B,C); </span><br><span class="line">		 SHOW(A,D,C,B); </span><br><span class="line">		 SHOW(A,C,B,D); </span><br><span class="line">		 SHOW(A,C,D,B); </span><br><span class="line">		 SHOW(B,A,C,D); </span><br><span class="line">		 SHOW(B,A,D,C); </span><br><span class="line">		 SHOW(B,C,A,D); </span><br><span class="line">		 SHOW(B,C,D,A); </span><br><span class="line">		 SHOW(B,D,A,C); </span><br><span class="line">		 SHOW(B,D,C,A); </span><br><span class="line">		 SHOW(C,A,B,D); </span><br><span class="line">		 SHOW(C,A,D,B); </span><br><span class="line">		 SHOW(C,B,A,D); </span><br><span class="line">		 SHOW(C,B,D,A); </span><br><span class="line">		 SHOW(C,D,A,B); </span><br><span class="line">		 SHOW(C,D,B,A); </span><br><span class="line">		 SHOW(D,A,B,C); </span><br><span class="line">		 SHOW(D,A,C,B); </span><br><span class="line">		 SHOW(D,B,A,C); </span><br><span class="line">		 SHOW(D,B,C,A); </span><br><span class="line">		 SHOW(D,C,A,B); </span><br><span class="line">		 SHOW(D,C,B,A); </span><br><span class="line">		 break; </span><br><span class="line">	 &#125; </span><br><span class="line">	 else </span><br><span class="line">		 printf(&quot;是否要看答案(y/n):&quot;); </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void menu() </span><br><span class="line">&#123; </span><br><span class="line">	int i; </span><br><span class="line">	while(1) </span><br><span class="line">	&#123; </span><br><span class="line">		system(&quot;cls&quot;); </span><br><span class="line">		printf(&quot;* * * * * * * * * * * * * * * * * * * * * * * * * *\n&quot;); </span><br><span class="line">		printf(&quot;*                                                 *\n&quot;); </span><br><span class="line">		printf(&quot;*                   智力游戏24点                  *\n&quot;); </span><br><span class="line">		printf(&quot;*                                                 *\n&quot;); </span><br><span class="line">		printf(&quot;*             1.开始游戏.                         *\n&quot;); </span><br><span class="line">		printf(&quot;*             2.退出游戏.                         *\n&quot;); </span><br><span class="line">		printf(&quot;*                                                 *\n&quot;); </span><br><span class="line">		printf(&quot;* * * * * * * * * * * * * * * * * * * * * * * * * *\n&quot;); </span><br><span class="line">		printf(&quot;你准备好了吗？\n&quot;); </span><br><span class="line">		printf(&quot;输入你的选择:&quot;); </span><br><span class="line">		scanf(&quot;%d&quot;,&amp;i); </span><br><span class="line">		if(i==3) </span><br><span class="line">			break; </span><br><span class="line">		switch(i) </span><br><span class="line">		&#123; </span><br><span class="line">		case 1: </span><br><span class="line">			game_24();   //开始游戏</span><br><span class="line">			system(&quot;PAUSE&quot;); </span><br><span class="line">			break; </span><br><span class="line">		default: </span><br><span class="line">			printf(&quot;error input!\n&quot;); </span><br><span class="line">			system(&quot;PAUSE&quot;); </span><br><span class="line">		&#125; </span><br><span class="line">	&#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void main() </span><br><span class="line">&#123; </span><br><span class="line">  menu(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> ●经验归纳</p>
<p> ●●遇到的问题<br> &lt;1&gt;在防止重复问题上有点迷茫，已解决<br> &lt;2&gt;对数据结构栈不够清楚，未写提高要求</p>
<p> ●●心得体会<br> 感觉自己对数据结构栈的知识点很薄弱，需要加强。而且在解决基本要求时考虑的不够全面，刚开始没有考虑到防止重复的问题，还有出现过进入无限循环的问题，好在均已解决，但是随机函数生成4个数字的时候，4个数字可能会出现重复的情况，我在网上找了一下，有不重复的随机函数代码，在这里不赘述了。<br> 个人认为这个代码还可以优化<del>~</del></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于文件的C语言学生信息管理系统</title>
    <url>/2019/04/03/%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>  <strong>●题目名称</strong><br> C语言学生信息管理系统</p>
<p> <strong>●题目分析</strong><br> 将文件引入学生信息管理系统，完善学生信息数据的处理，包括信息的读取、保存、刷新。编写与文件有关的程序，需要考虑将对文件以什么方式操作，文件能否被打开，文件在什么位置。为了程序的可读性，一般将文件的读取、存盘、操作自定义为函数。</p>
<p> <strong>●算法构造<br> ●●刷新学生信息update()函数</strong><br> &lt;1&gt;以只读方式打开指定文件，判断文件是否为空，若为空，则提示：文件为空！<br> &lt;2&gt;循环读入学生信息，并累加当前记录的学生人数n<br> &lt;3&gt;输出提示：刷新成功！<br> &lt;4&gt;关闭文件<br> <strong>●●查询学生信息seek()函数</strong><br> &lt;1&gt;用户输入要进行的操作:1.按学号查询；2.按姓名查询；3.退出本菜单<br> &lt;2&gt;选择1：输入要查询的学生的学号；判断输入的学号和存好的学号一致；一致则输出学生的信息，不一致则输出：该学号不存在！<br> &lt;3&gt;选择2：输入要查询的学生的姓名；判断输入的姓名和存好的姓名一致；一致则输出学生的信息，不一致则输出：该姓名不存在！<br> <strong>●●修改学生信息modify()函数</strong><br> &lt;1&gt;输入要修改的学生的学号<br> &lt;2&gt;比较输入的学号和文件存好的学号是否一致，选择要进行的操作编号：1.修改姓名；2.修改年龄；3.修改性别；4.修改C语言成绩；5.修改高等数学成绩；6.修改大学英语成绩；7.退出本菜单<br> &lt;3&gt;选择1：输入新的姓名s2；新的姓名s2替换原来的姓名；保存新的姓名<br> &lt;4&gt;选择2：输入新的年龄age；新的姓名age替换原来的年龄；保存新的年龄<br> &lt;5&gt;选择3：输入新的性别sex1；新的性别sex1替换原来的性别；保存新的性别<br> &lt;6&gt;选择4：输入新的C语言成绩score1；新的C语言成绩score1替换原来的C语言成绩；保存新的C语言成绩<br> &lt;7&gt;选择5：输入新的高等数学成绩score1；新的高等数学成绩score1替换原来的高等数学成绩；保存新的高等数学成绩<br> &lt;8&gt;选择6：输入新的大学英语成绩score1；新的大学英语成绩score1替换原来的姓名；保存新的大学英语成绩<br> &lt;9&gt;选择7：返回主菜单<br> <strong>●●插入学生信息函数insert()函数</strong><br> &lt;1&gt;输入待增加的学生数n<br> &lt;2&gt;循环依次输入每个学生的学号、姓名、性别、年龄、C语言成绩、高等数学成绩、大学英语成绩<br> &lt;3&gt;将这些信息依次写入文件<br> &lt;4&gt;提示：添加成功！<br> &lt;5&gt;调用按学号排序函数，将信息排序好<br> &lt;5&gt;关闭文件<br> <strong>●●按学号删除信息del()函数</strong><br> &lt;1&gt;输入要删除学生的学号s1<br> &lt;2&gt;初始化flag=0，进入循环，比较输入的学号和文件记录的学号是否一致，若一致则令flag=1，循环将后面的学生记录向前移动<br> &lt;3&gt;判断flag=0，提示：该学号不存在！<br> &lt;4&gt;判断flag=1，学生人数-1并保存，提示：删除成功！<br> &lt;5&gt;关闭文件<br> <strong>●●显示当前信息display()函数</strong><br> &lt;1&gt;打开文件<br> &lt;2&gt;读取文件信息；若文件为空，则提示：文件为空！若文件不为空，则循环依次输出每个学生的学号、姓名、性别、年龄、C语言成绩、高等数学成绩、大学英语成绩<br> &lt;3&gt;关闭文件<br> <strong>●●保存当前学生信息fileWrite()函数</strong><br> &lt;1&gt;打开文件<br> &lt;2&gt;读取文件信息；若文件为空，则提示：文件为空！若文件不为空，则循环依次写入每个学生的学号、姓名、性别、年龄、C语言成绩、高等数学成绩、大学英语成绩<br> &lt;3&gt;关闭文件</p>
<p> <strong>●源代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;    /*I/O函数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;  /*其它说明*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;  /*字符串函数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 15      <span class="comment">/* 学号和姓名最大字符数,实际请更改*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100        <span class="comment">/* 最大学生人数,实际请更改*/</span></span></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>,n=<span class="number">0</span>, m=<span class="number">0</span>;<span class="comment">/* n代表当前记录的学生人数*/</span></span><br><span class="line"><span class="comment">//学生信息结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> no[LEN];<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">char</span> name[LEN];<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">char</span> sex[LEN];<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">float</span> C;<span class="comment">//c语言成绩</span></span><br><span class="line">    <span class="keyword">float</span> M;<span class="comment">//数学成绩</span></span><br><span class="line">    <span class="keyword">float</span> E;<span class="comment">//英语成绩</span></span><br><span class="line">&#125;stu[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileWrite</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统帮助及说明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n0.欢迎使用系统帮助！\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n1.初次进入系统后,请先选择增加学生信息;\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n2.按照菜单提示键入数字代号;\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n3.增加学生信息后,切记保存;\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n4.谢谢您的使用！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//刷新学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    FILE * fp; </span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">"student.txt"</span>,<span class="string">"r"</span>))==<span class="literal">NULL</span>) </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"文件为空！\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s,%s,%s,%d,%f,%f,%f\n"</span>,&amp;stu[j].no,&amp;stu[j].name,&amp;stu[j].sex,&amp;stu[j].age,&amp;stu[j].C,&amp;stu[j].M,&amp;stu[j].E)==<span class="number">7</span>) <span class="comment">//从文件中读取信息 </span></span><br><span class="line">	&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    n=j; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n  提示：刷新成功!!!  \n"</span>); </span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seek</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">"student.txt"</span>,<span class="string">"r"</span>))==<span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s %s %s %d %f %f %f"</span>,&amp;stu[j].no,&amp;stu[j].name,&amp;stu[j].sex,&amp;stu[j].age,&amp;stu[j].C,&amp;stu[j].M,&amp;stu[j].E)==<span class="number">7</span>) </span><br><span class="line">	&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    n=j;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,item,flag;</span><br><span class="line">    <span class="keyword">char</span> s1[LEN+<span class="number">1</span>]; <span class="comment">/* 以姓名和学号最长长度+1为准*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"----------------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----1.按学号查询-----\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----2.按姓名查询-----\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----3.退出本菜单-----\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"----------------------\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请选择子菜单编号:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;item);           <span class="comment">//用户输入要进行的操作</span></span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span>(item) </span><br><span class="line">		&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"请输入要查询的学生的学号:\n"</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;s1);</span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)                  <span class="comment">//n代表当前记录的学生人数</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s1,stu[i].no)==<span class="number">0</span>)    <span class="comment">//strcmp()是字符串比较函数，判断输入的学号和存好的学号一致</span></span><br><span class="line">					&#123;</span><br><span class="line">                        flag=<span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"学生学号    学生姓名  年龄   性别  C语言成绩  高等数学  大学英语成绩\n"</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------\n"</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s %16s %10s %10d %10.1f %10.1f %10.1f\n"</span>,stu[i].no,stu[i].name,stu[i].sex,stu[i].age,stu[i].C,stu[i].M,stu[i].E);   <span class="comment">//输出学生的信息</span></span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span>==flag)         <span class="comment">//输入的学号和存好的学号不一致</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"该学号不存在！\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"请输入要查询的学生的姓名:\n"</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;s1);    <span class="comment">//输入学生姓名</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(stu[i].name,s1)==<span class="number">0</span>)   <span class="comment">//输入的姓名和存好的姓名一致 </span></span><br><span class="line">					&#123;</span><br><span class="line">                        flag=<span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"学生学号    学生姓名  年龄   性别  C语言成绩  高等数学  大学英语成绩\n"</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------\n"</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s %16s %10s %10d %10.1f %10.1f %10.1f\n"</span>,stu[i].no,stu[i].name,stu[i].sex,stu[i].age,stu[i].C,stu[i].M,stu[i].E);   <span class="comment">//输出学生的信息</span></span><br><span class="line">					&#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span>==flag)    <span class="comment">//输入的姓名和存好的姓名不一致</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"该姓名不存在！\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"请在1-3之间选择\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">"student.txt"</span>,<span class="string">"r"</span>))==<span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n 警告：打开文件错误，请退出重新打开！\n"</span>);</span><br><span class="line">		system(<span class="string">"pause"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s %s %s %d %f %f %f"</span>,&amp;stu[j].no,&amp;stu[j].name,&amp;stu[j].sex,&amp;stu[j].age,&amp;stu[j].C,&amp;stu[j].M,&amp;stu[j].E)==<span class="number">7</span>) </span><br><span class="line">	&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    n=j;</span><br><span class="line">    <span class="keyword">int</span> i,item=<span class="number">0</span>,num;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> sex1[<span class="number">4</span>],s1[LEN+<span class="number">1</span>],s2[LEN+<span class="number">1</span>]; <span class="comment">/* 以姓名和学号最长长度+1为准*/</span></span><br><span class="line">    <span class="keyword">float</span> score1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要修改的学生的学号:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(stu[i].no,s1)==<span class="number">0</span>)  <span class="comment">/*比较字符串是否相等*/</span></span><br><span class="line">		&#123;</span><br><span class="line">            num=i;       <span class="comment">//给num赋i值</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"------------------\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1.修改姓名\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"2.修改年龄\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"3.修改性别\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"4.修改C语言成绩\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"5.修改高等数学成绩\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"6.修改大学英语成绩\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"7.退出本菜单\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"------------------\n"</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">			&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"请选择子菜单编号:"</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;item);</span><br><span class="line">                <span class="keyword">switch</span>(item) </span><br><span class="line">				&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"请输入新的姓名:"</span>);</span><br><span class="line">                        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s2);</span><br><span class="line">                        <span class="built_in">strcpy</span>(stu[num].name,s2);           <span class="comment">//strcpy()是字符串复制函数，将新输入的值赋给原先的值</span></span><br><span class="line">                        fileWrite();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"请输入新的年龄:"</span>);</span><br><span class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;age);</span><br><span class="line">                        stu[num].age=age;</span><br><span class="line">                        fileWrite();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"请输入新的性别:"</span>);</span><br><span class="line">                        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;sex1);</span><br><span class="line">                        <span class="built_in">strcpy</span>(stu[num].sex,sex1);</span><br><span class="line">                        fileWrite();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"请输入新的C语言成绩:"</span>);</span><br><span class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;score1);</span><br><span class="line">                        stu[num].C=score1;</span><br><span class="line">                        fileWrite();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"请输入新的高等数学成绩:"</span>);</span><br><span class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;score1);</span><br><span class="line">                        stu[num].M=score1;</span><br><span class="line">                        fileWrite();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"请输入新的大学英语成绩:"</span>);</span><br><span class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;score1);</span><br><span class="line">                        stu[num].E=score1;</span><br><span class="line">                        fileWrite();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"请在1-7之间选择\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"没有该学生学号!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按学号排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,*p,*q,s;</span><br><span class="line">	<span class="keyword">char</span> temp[LEN+<span class="number">1</span>],ctemp[LEN];</span><br><span class="line">	<span class="keyword">float</span> *x,*y,z;</span><br><span class="line">	<span class="keyword">float</span> *a,*b,c;</span><br><span class="line">	<span class="keyword">float</span> *k,*l,h;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(stu[j<span class="number">-1</span>].no,stu[j].no)&gt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">strcpy</span>(temp,stu[j<span class="number">-1</span>].no);</span><br><span class="line">				<span class="built_in">strcpy</span>(stu[j<span class="number">-1</span>].no,stu[j].no);</span><br><span class="line">				<span class="built_in">strcpy</span>(stu[j].no,temp);</span><br><span class="line">				<span class="built_in">strcpy</span>(temp,stu[j<span class="number">-1</span>].name);</span><br><span class="line">				<span class="built_in">strcpy</span>(stu[j<span class="number">-1</span>].name,stu[j].name);</span><br><span class="line">				<span class="built_in">strcpy</span>(stu[j].name,temp);</span><br><span class="line">				p=&amp;stu[j<span class="number">-1</span>].age;</span><br><span class="line">				q=&amp;stu[j].age;</span><br><span class="line">				s=*q;</span><br><span class="line">				*q=*p;</span><br><span class="line">				*p=s;</span><br><span class="line">				<span class="built_in">strcpy</span>(ctemp,stu[j<span class="number">-1</span>].sex);</span><br><span class="line">				<span class="built_in">strcpy</span>(stu[j<span class="number">-1</span>].sex,stu[j].sex);</span><br><span class="line">				<span class="built_in">strcpy</span>(stu[j].sex,ctemp);</span><br><span class="line">				x=&amp;stu[j<span class="number">-1</span>].C;</span><br><span class="line">				y=&amp;stu[j].C;</span><br><span class="line">				z=*x;</span><br><span class="line">				*x=*y;</span><br><span class="line">				*y=z;</span><br><span class="line">				a=&amp;stu[j<span class="number">-1</span>].M;</span><br><span class="line">				b=&amp;stu[j].M;</span><br><span class="line">				c=*a;</span><br><span class="line">				*a=*b;</span><br><span class="line">				*b=c;</span><br><span class="line">				k=&amp;stu[j<span class="number">-1</span>].E;</span><br><span class="line">				l=&amp;stu[j].E;</span><br><span class="line">				h=*k;</span><br><span class="line">				*k=*l;</span><br><span class="line">				*l=h;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入学生信息函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入待增加的学生数:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    FILE * fp;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">"student.txt"</span>,<span class="string">"at"</span>))==<span class="literal">NULL</span>) </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"文件为空！\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line">	&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入第%d个学生的学号："</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"\n%s"</span>,&amp;stu[i].no);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入第%d个学生的姓名："</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;stu[i].name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入第%d 个学生的性别："</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;stu[i].sex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入第%d 个学生的年龄:"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;stu[i].age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入第%d 个学生的C语言成绩:"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;stu[i].C);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入第%d 个学生的高等数学成绩:"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;stu[i].M);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入第%d 个学生的大学英语成绩:"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;stu[i].E);</span><br><span class="line">		sort();   <span class="comment">//调用按学号排序函数</span></span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="built_in">fprintf</span>(fp,<span class="string">"%s %16s %10s %10d %10.1f %10.1f %10.1f\n"</span>,stu[i].no,stu[i].name,stu[i].sex,stu[i].age,stu[i].C,stu[i].M,stu[i].E);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n添加成功!!!\n"</span>);</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按学号删除信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">"student.txt"</span>,<span class="string">"r"</span>))==<span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s %s %s %d %f %f %f "</span>,&amp;stu[j].no,&amp;stu[j].name,&amp;stu[j].sex,&amp;stu[j].age,&amp;stu[j].C,&amp;stu[j].M,&amp;stu[j].E)==<span class="number">7</span>) </span><br><span class="line">	&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    n=j;</span><br><span class="line">    <span class="keyword">int</span> i,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> s1[LEN+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除学生的学号:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(stu[i].no,s1)==<span class="number">0</span>)  <span class="comment">//比较输入的学号和记录的学号一致</span></span><br><span class="line">		&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=i; j&lt;n<span class="number">-1</span>; j++) </span><br><span class="line">			&#123;</span><br><span class="line">				stu[j]=stu[j+<span class="number">1</span>];        <span class="comment">//后面的学生记录向前移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)   <span class="comment">//比较输入的学号和记录的学号不一致</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该学号不存在！\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>)      <span class="comment">//判断flag的值为1，则成功删除</span></span><br><span class="line">	&#123;</span><br><span class="line">        n--;        <span class="comment">//删除成功后，学生人数-1</span></span><br><span class="line">        fileWrite();</span><br><span class="line">        fclose(fp); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功,显示结果请选择菜单\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示当前信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">"student.txt"</span>,<span class="string">"r"</span>))==<span class="literal">NULL</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"文件为空！\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s %s %s %d %f %f %f"</span>,stu[i].no,stu[i].name,stu[i].sex,&amp;stu[i].age,&amp;stu[i].C,&amp;stu[i].M,&amp;stu[i].E)==<span class="number">7</span>) </span><br><span class="line">	&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    n=i;               <span class="comment">//记录文件中数据的行数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"学生学号    学生姓名  年龄   性别  C语言成绩  高等数学  大学英语成绩\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------------------------------------------------\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="comment">//依次输出学生信息</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %16s %10s %10d %10.1f %10.1f %10.1f\n"</span>,stu[i].no,stu[i].name,stu[i].sex,stu[i].age,stu[i].C,stu[i].M,stu[i].E);</span><br><span class="line">    &#125;</span><br><span class="line">	 fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存当前学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        FILE *fp;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">if</span>((fp=fopen(<span class="string">"student.txt"</span>,<span class="string">"w"</span>))==<span class="literal">NULL</span>) </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"文件为空！\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line">		&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">"%s %16s %10s %10d %10.1f %10.1f %10.1f\n"</span>,stu[i].no,stu[i].name,stu[i].sex,stu[i].age,stu[i].C,stu[i].M,stu[i].E);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"保存成功!!!"</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" \n\n                    \n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *                   学生信息管理系统                    *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *                                                       *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *       * * * * * * *系统功能菜单* * * * * * *          *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *    --------------------------------------------       *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *                                                       *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *       0.系统帮助及说明  |   1.刷新学生信息            *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *                                                       *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *       2.查询学生信息    |   3.修改学生信息            *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *                                                       *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *       4.增加学生信息    |   5.按学号删除信息          *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *                                                       *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *       6.显示当前信息    |   7.保存当前学生信息        *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *                                                       *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" *       8.退出系统                                      *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请选择菜单编号:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">switch</span>(num) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            help();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            update();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            seek();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            modify();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            insert();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            del();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            display();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            fileWrite();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"请在0-8之间选择\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k) </span><br><span class="line">	&#123;</span><br><span class="line">        menu();</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>●经验归纳<br> ●●遇到的问题</strong><br> 程序无法读取文件信息：对文件的概念不清楚，文件的读取中各个数据之间不能用逗号隔开<br> <strong>●●算法优化</strong><br> &lt;1&gt;将主函数写到子函数后面，删去函数声明<br> &lt;2&gt;利用结构体，使学生信息更加结构化<br> &lt;3&gt;新增按学号排序函数，用户在增加了学生信息后，调用该函数，将文件中学生信息按学号排序好<br> &lt;4&gt;优化删除学生信息函数，直接将后面的学生记录向前移动<br> &lt;5&gt;将每个涉及文件的子函数都加入了文件读取功能，目的是进行相应操作时不必每次都要先执行刷新函数<br> &lt;6&gt;优化修改学生信息函数，每次修改完都调用保存函数，实现自动保存<br> <strong>●●心得体会</strong><br> 学生信息管理系统是我们在学习C语言时的典例，但是我感觉在文件读取方面基础还是比较薄弱，一些基础性的知识点还是不能记住，所以以后要多多练习与读取文件有关的习题。</p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>求N个数的最大公约数和最小公倍数&amp;&amp;Hankson问题</title>
    <url>/2019/03/21/%E6%B1%82N%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0&amp;&amp;Hankson%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>  <strong>● 题目名称</strong><br> &lt;1&gt;求N个数的最大公约数和最小公倍数<br> &lt;2&gt;计算出Hankson的“逆问题”的答案</p>
<p> <strong>● 题目分析</strong><br> &lt;1&gt;求N个数的最大公约数和最小公倍数：可以先求出第一个数和第二个数的最大公约数和最小公倍数，再将这个最大公约数和最小公倍数与下一个数计算出新的最大公约数和最小公倍数，以此类推<br> &lt;2&gt;计算出Hankson的“逆问题”的答案：先输入组数，再根据组数以每组4个数循环输入，然后判断输入的四个数是否满足条件，接着再调用计算两个数的最大公约数和最小公倍数的函数，判断x是否满足条件，若满足，则累加，最后输出累加的结果</p>
<p> <strong>● 算法构造</strong><br> <strong>● ● 求N个数的最大公约数和最小公倍数</strong><br> &lt;1&gt;输入要计算最大公约数和最小公倍数的整数个数<br> &lt;2&gt;循环输入整数<br> &lt;3&gt;调用函数，求出这些整数的最大公约数和最小公倍数<br> &lt;4&gt;先计算出两个数的最大公约数（最小公倍数），再用该最大公约数（最小公倍数）和下一个数求最大公约数（最小公倍数），以此类推<br> &lt;5&gt;输出这些整数的最大公约数和最小公倍数<br> <strong>● ● 计算出Hankson的“逆问题”的答案</strong><br> &lt;1&gt;输入组数<br> &lt;2&gt;每组输入四个数，判断是否满足第一个数能被第二个数整除，第三个数能被第四个数整除的条件<br> &lt;3&gt;循环依次输入各组，每组4个数<br> &lt;4&gt;判断输入的4个数是否满足第一个数能被第二个数整除，第三个数能被第四个数整除的条件<br> &lt;5&gt;循环计算有多少个满足条件的数，调用计算两个数的最大公约数和最小公倍数的函数，判断x是否满足条件<br> &lt;6&gt;输出累加的数</p>
<p> <strong>● 算法实现</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">//辗转相除法求两个数的最大公约数</span><br><span class="line">int max1(int a,int b)             </span><br><span class="line">&#123;</span><br><span class="line">	int temp;</span><br><span class="line">	if(a&lt;b)                    //若存在a小于b的情况，则交换数值</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a;</span><br><span class="line">		a=b;</span><br><span class="line">		b=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	while(b!=0)          //直到b为0，通过赋值得到最大公约数为a的值</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a%b;           //temp为余数                      </span><br><span class="line">		a=b;                //将b的值赋给a</span><br><span class="line">		b=temp;            //将余数temp的值赋给b</span><br><span class="line">	&#125;</span><br><span class="line">	return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//求n个数的最大公约数</span><br><span class="line">int max2(int a[],int n)</span><br><span class="line">&#123;</span><br><span class="line">	int x=a[0],y=a[1],z=0;</span><br><span class="line">	z=max1(x,y);                    //先计算出两个数的最大公约数，再用该最大公约数和下一个数求最大公约数，以此类推</span><br><span class="line">	for(int i=2;i&lt;n;i++)</span><br><span class="line">		z=max1(z,a[i]);</span><br><span class="line">	return z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> //求两个数的最小公倍数</span><br><span class="line">int min1(int a,int b) </span><br><span class="line">&#123;</span><br><span class="line">  int max1(int a,int b);            //自定义函数返回值类型</span><br><span class="line">  int temp;</span><br><span class="line">  temp=max1(a,b);              //再次调用自定义函数，求出最大公约数</span><br><span class="line">  return  (a*b/temp);          //返回最小公倍数到主调函数处进行输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//求n个数的最小公倍数</span><br><span class="line">int min2(int a[],int n)</span><br><span class="line">&#123;</span><br><span class="line">	int x=a[0],y=a[1],z=0;          //与n个数的最大公约数同理</span><br><span class="line">	z=min1(x,y);</span><br><span class="line">	for(int i=2;i&lt;n;i++)</span><br><span class="line">		z=min1(z,a[i]);</span><br><span class="line">	return z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	int n=0,x=0,max=0,min=0,b,sum=0,i=0;</span><br><span class="line">	int c[4];</span><br><span class="line">	int a[]=&#123;0&#125;;</span><br><span class="line">	printf(&quot;* * * * * * * * * * * * * * * * * * * * * * * * * * *\n&quot;);</span><br><span class="line">	printf(&quot;* 1.输入n个你想计算最大公约数的正整数并计算.        *\n&quot;);</span><br><span class="line">	printf(&quot;* 2.计算出Hankson的“逆问题”的答案.                *\n&quot;);</span><br><span class="line">	printf(&quot;* * * * * * * * * * * * * * * * * * * * * * * * * * *\n&quot;);</span><br><span class="line">	printf(&quot;请选择你想要进行的操作:\n&quot;);</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">	while(x&lt;1||x&gt;2)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;没有这个选项！请重新输入：\n&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">	&#125;</span><br><span class="line">	switch(x)</span><br><span class="line">	&#123;</span><br><span class="line">	case 1:</span><br><span class="line">		printf(&quot;请输入你想要计算的整数个数（大于1）：&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;n);                  //输入要计算最大公约数和最小公倍数的整数个数</span><br><span class="line">		printf(&quot;请依次输入整数：\n&quot;);</span><br><span class="line">		for(i=0;i&lt;n;i++)</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;a[i]);             //循环输入整数</span><br><span class="line">		max=max2(a,n);                 //调用函数，求出这些整数的最大公约数</span><br><span class="line">		min=min2(a,n);           //调用函数，求出这些整数的最小公倍数</span><br><span class="line">		printf(&quot;这些数的最大公约数为：%d\n&quot;,max);</span><br><span class="line">		printf(&quot;这些数的最小公倍数为：%d\n&quot;,min);</span><br><span class="line">		break;</span><br><span class="line">	case 2:</span><br><span class="line">		printf(&quot;请输入数据的组数：&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;b);              //输入组数</span><br><span class="line">		printf(&quot;每组输入四个数，要求：保证第一个数能被第二个数整除，第三个数能被第四个数整除：\n&quot;);</span><br><span class="line">		for(;b&gt;0;b--)                //循环依次输入b个组</span><br><span class="line">		&#123;</span><br><span class="line">			for(i=0;i&lt;4;i++)          //每组4个数</span><br><span class="line">		&#123;</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;c[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		if(c[0]%c[1]!=0||c[3]%c[2]!=0)        //判断输入的4个数是否满足第一个数能被第二个数整除，第三个数能被第四个数整除的条件</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;输入不符合条件，请重新输入：\n&quot;);</span><br><span class="line">			for(i=0;i&lt;4;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				scanf(&quot;%d&quot;,&amp;c[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		for(int y=0;y&lt;=c[3];y++)          //循环计算有多少个满足条件的数</span><br><span class="line">		&#123;</span><br><span class="line">			if(max1(y,c[0])==c[1]&amp;&amp;min1(y,c[2])==c[3])   //调用计算两个数的最大公约数和最小公倍数的函数，判断y是否满足条件</span><br><span class="line">				sum++;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;一共有%d个数满足条件\n&quot;,sum);</span><br><span class="line">        sum=0;                      //累加sum初始化</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>● 经验归纳</strong><br> <strong>● ● 遇到的问题</strong><br> &lt;1&gt;习惯了计算两个数的最大公约数和最小公倍数，对N个数迷茫了…<br> &lt;2&gt;最大公约数和最小公倍数计算有误<br> &lt;3&gt;提高要求要输入的那四个数的限制条件运用不当，审题不清，导致频繁出错<br> &lt;4&gt;在一次循环之后未将累加的值初始化，导致下一次循环完毕后的结果有误<br> <strong>● ● 心得体会</strong><br> 以前都是计算两个数的最大公约数和最小公倍数，这次要计算n个数的最大公约数和最小公倍数，我其实运用的还是计算两个数的那个思想，就是加入了函数调用。<br> 感觉自己有时候还挺粗心的（也可能是代码敲久了有点晕hhh），还有就是提高要求把我卡住了。。完全不知道逆着怎么求…查了一些资料，然后和一起去图书馆敲代码的同学讨论了一下，大体有思路了，但只要写程序就有错误。。。。<br> 失误挺多的，希望自己能在以后的程序生涯里越来越棒，小细节都可以注意到<del>~</del></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>用JAVA编写奇数累加和猜数字小游戏代码（包含JAVA产生随机数）</title>
    <url>/2019/03/10/%E7%94%A8JAVA%E7%BC%96%E5%86%99%E5%A5%87%E6%95%B0%E7%B4%AF%E5%8A%A0%E5%92%8C%E7%8C%9C%E6%95%B0%E5%AD%97%E5%B0%8F%E6%B8%B8%E6%88%8F%E4%BB%A3%E7%A0%81%EF%BC%88%E5%8C%85%E5%90%ABJAVA%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%89/</url>
    <content><![CDATA[<p>  <strong>1.题目名称：</strong><br> 奇数累加、猜数字小游戏</p>
<p> <strong>2.题目要求：</strong><br> 求自然数1-99的所有奇数累加的和；<br> 计算机自动生成答案，玩家手动输入其猜想的数字，判断玩家是否猜对。</p>
<p> <strong>3.算法分析：</strong><br> <strong>3.1奇数累加</strong><br> （1）利用for循环，遍历自然数并限制累加范围在1-99之内<br> （2）遍历过程中，判断正在遍历的自然数是否奇数<br> （3）如果是奇数，则进行累加</p>
<p> <strong>3.2猜数字小游戏</strong><br> （1）利用随机数产生一个1-100的整数，即为正确答案<br> （2）玩家输入一个整数<br> （3）如果玩家输入的数为0，则退出游戏；如果玩家输入的数小于0或大于100，则重新输入<br> （4）利用循环判断计算机生成的数和玩家输入的数是否一致<br> （5）如果不一致：玩家输入的过大，则提示“太大了”；玩家输入的过小，则提示“太小了”<br> （6）如果玩家输入的数与计算机产生的数一致，则提示“恭喜你，答对啦！”</p>
<p> <strong>4.源代码：</strong><br> <strong>4.1奇数累加</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.itheima.first;</span><br><span class="line"></span><br><span class="line">public class Sum &#123;</span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		int i,sum=0;</span><br><span class="line">		for(i=1;i&lt;100;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(i%2!=0)   </span><br><span class="line">				sum+=i;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;在自然数1-99中奇数累加之和为：&quot;+sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>4.2猜数字小游戏</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package interesting;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class game &#123;</span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		int n=(int)(Math.random()*100)+1;             //利用随机数生成一个正确答案</span><br><span class="line">		Scanner a=new Scanner(System.in);</span><br><span class="line">		System.out.println(&quot;***********这是一个猜数字的游戏***********\n&quot;);</span><br><span class="line">		System.out.println(&quot;请输入你认为的正确答案(1-100)，退出游戏请按0：&quot;);</span><br><span class="line">		int b=a.nextInt();</span><br><span class="line">		while(b&lt;0||b&gt;100)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;输入错误~&quot;);</span><br><span class="line">			System.out.println(&quot;请输入你认为的正确答案(1-100)：&quot;);</span><br><span class="line">			b=a.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		if(b==0)</span><br><span class="line">			System.out.println(&quot;你已退出游戏~~~&quot;);</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			while(b!=n)              //如果用户输入的数与正确答案不符</span><br><span class="line">			&#123;</span><br><span class="line">				if(b&gt;n)</span><br><span class="line">					System.out.println(&quot;太大了~&quot;);</span><br><span class="line">				else if(b&lt;n)</span><br><span class="line">					System.out.println(&quot;太小了~&quot;);</span><br><span class="line">				System.out.println(&quot;请输入你认为的正确答案(1-100)：&quot;);</span><br><span class="line">				b=a.nextInt();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if(b==n)</span><br><span class="line">			System.out.println(&quot;恭喜你，猜对啦!&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>5.心得体会：</strong><br> 这些都是简单的程序，但是JAVA与C语言和C++的语法不一样，比如游戏里的产生随机数，我本来用的是C语言的随机数，但运行的时候发现了错误，于是我上网搜了一下，发现JAVA和C语言的随机数不一样；JAVA的输入代码，我在网上找了一下，接收字符和数字的输入代码是不一样的<del>~  
 还有程序最后保存是以文件夹的形式，我不知道最好是删除某个文件还是保留整个文件夹…于是我又做了新的尝试，我只留了src那个文件夹，然后…代码运行不了…我只好重新建了个项目，这次不敢删了…<br> 不过这是我第一次用JAVA写代码呢</del>感觉自己学到了很多*****</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>四种方法计算两个数的最大公约数</title>
    <url>/2019/03/08/%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0~~~/</url>
    <content><![CDATA[<p>  <strong>1.题目名称</strong><br> 计算两个数的最大公约数</p>
<p> <strong>2.题目分析</strong><br> 计算两个数的最大公约数，可以采用最大公约数的四种常用算法，分别是辗转相除法、穷举法、更相减损法、Stein算法。每种方法写一个函数，分别计算出最大公约数，主函数的菜单里有选择功能，用户可以选择自行输入两个数，然后调用这四种方法的任一种；也可以选择程序的测试功能，通过自己选择的组数，计算机自动产生随机函数，然后调用四种方法的任一种，并计算出程序运行的时间。</p>
<p> <strong>3.算法构造<br> 3.1辗转相除法</strong><br> 设两数为a,b设其中a 做被除数,b做除数，temp为余数<br> 1、大数放a中、小数放b中；<br> 2、求a/b的余数；<br> 3、若temp=0则b为最大公约数；<br> 4、如果temp!=0则把b的值给a、temp的值给a；<br> 5、返回第二步；</p>
<p> <strong>3.2穷举法（利用数学定义）</strong><br> 穷举法（也叫枚举法）穷举法求两个正整数的最大公约数的解题步骤：<br> 从两个数中较小数开始由大到小列举，直到找到公约数立即中断列举，得到的公约数便是最大公约数 。<br> 对两个正整数a,b如果能在区间[a,0]或[b,0]内能找到一个整数temp能同时被a和b所整除，则temp即为最大公约数。</p>
<p> <strong>3.3更相减损法</strong><br> 更相减损术，是出自《九章算术》的一种求最大公约数的算法，它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。《九章算术》是中国古代的数学专著，其中的“更相减损术”可以用来求两个数的最大公约数，即“可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。”<br> 翻译成现代语言如下：<br> 第一步：任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步。<br> 第二步：以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所得的减数和差相等为止。<br> 则第一步中约掉的若干个2与第二步中等数的乘积就是所求的最大公约数。<br> 其中所说的“等数”，就是最大公约数。求“等数”的办法是“更相减损”法。所以更相减损法也叫等值算法。</p>
<p> <strong>3.4 Stein算法</strong><br> Stein算法由J. Stein 1961年提出，这个方法也是计算两个数的最大公约数。来研究一下最大公约数的性质，发现有 gcd( k_x,k_y ) = k_gcd( x,y ) 这么一个非常好的性质。试取 k=2，则有 gcd( 2x,2y ) = 2 * gcd( x,y )。很快联想到将两个偶数化小的方法。那么一奇一个偶以及两个奇数的情况如何化小呢？<br> 先来看看一奇一偶的情况： 设有2x和y两个数，其中y为奇数。因为y的所有约数都是奇数，所以 a = gcd( 2x,y ) 是奇数。根据2x是个偶数不难联想到，a应该是x的约数。我们来证明一下：(2x)%a=0，设2x=n_a，因为a是奇数，2x是偶数，则必有n是偶数。又因为 x=(n/2)*a，所以 x%a=0，即a是x的约数。因为a也是y的约数，所以a是x和y的公约数，有 gcd( 2x,y ) &lt;= gcd( x,y )。因为gcd( x,y )明显是2x和y的公约数，又有gcd( x,y ) &lt;= gcd( 2x,y )，所以 gcd( 2x,y ) = gcd( x,y )。至此，我们得出了一奇一偶时化小的方法。<br> 再来看看两个奇数的情况：设有两个奇数x和y，不妨设x&gt;y，注意到x+y和x-y是两个偶数，则有 gcd( x+y,x-y ) = 2 * gcd( (x+y)/2,(x-y)/2 )，那么 gcd( x,y ) 与 gcd( x+y,x-y ) 以及 gcd( (x+y)/2,(x-y)/2 ) 之间是不是有某种联系呢？为了方便设 m=(x+y)/2 ，n=(x-y)/2 ，容易发现 m+n=x ，m-n=y 。设 a = gcd( m,n )，则 m%a=0,n%a=0 ，所以 (m+n)%a=0，(m-n)%a=0 ，即 x%a=0 ，y%a=0 ，所以a是x和y的公约数，有 gcd( m,n )&lt;= gcd(x,y)。再设 b = gcd( x,y )肯定为奇数，则 x%b=0,y%b=0 ，所以 (x+y)%b=0 ，(x-y)%b=0 ，又因为x+y和x-y都是偶数，跟前面一奇一偶时证明a是x的约数的方法相同，有 ((x+y)/2)%b=0,((x-y)/2)%b=0 ，即 m%b=0 ，n%b=0 ，所以b是m和n的公约数，有 gcd( x,y ) &lt;= gcd( m,n )。所以 gcd( x,y ) = gcd( m,n ) = gcd( (x+y)/2,(x-y)/2 )。<br> 整理一下，对两个正整数 x&gt;y ：<br> 1.均为偶数 gcd( x,y ) =2gcd( x/2,y/2 )；<br> 2.均为奇数 gcd( x,y ) = gcd( (x+y)/2,(x-y)/2 )；<br> 2.x奇y偶 gcd( x,y ) = gcd( x,y/2 )；<br> 3.x偶y奇 gcd( x,y ) = gcd( x/2,y ) 或 gcd( x,y )=gcd( y,x/2 )；<br> 现在已经有了递归式，还需要再找出一个退化情况。注意到 gcd( x,x ) = x ，就用这个。</p>
<p> <strong>4.算法实现<br> 4.1辗转相除法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max1(int a,int b)             //辗转相除法-------1.函数嵌套调用</span><br><span class="line">&#123;</span><br><span class="line">	int temp;</span><br><span class="line">	if(a&lt;b)                    //若存在a小于b的情况，则交换数值</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a;</span><br><span class="line">		a=b;</span><br><span class="line">		b=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	while(b!=0)          //直到b为0，通过赋值得到最大公约数为a的值</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a%b;           //temp为余数                      </span><br><span class="line">		a=b;                //将b的值赋给a</span><br><span class="line">		b=temp;            //将余数temp的值赋给b</span><br><span class="line">	&#125;</span><br><span class="line">	return a;</span><br><span class="line">&#125;</span><br><span class="line">int max2(int m,int n)        //辗转相除法-------2.函数递归调用</span><br><span class="line">&#123;</span><br><span class="line">	if(m%n==0)          //若m和n取余后余数为0，则返回最大公约数n</span><br><span class="line">		return n;</span><br><span class="line">	else</span><br><span class="line">		return max2(n,m%n);     //返回到max2这个函数中，并给m,n赋值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>4.2穷举法（利用数学定义）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max3(int x,int y)               //3.穷举法</span><br><span class="line">&#123;</span><br><span class="line">	int temp;</span><br><span class="line">	if(x&lt;y)                        //把较小的值赋给temp</span><br><span class="line">		temp=x;</span><br><span class="line">	else</span><br><span class="line">		temp=y;</span><br><span class="line">	while(temp&gt;0)</span><br><span class="line">	&#123;</span><br><span class="line">		if(x%temp==0&amp;&amp;y%temp==0)   //若大数取余小数余数为0，则结束循环，小数就是两个数的最大公约数</span><br><span class="line">			break;</span><br><span class="line">		else</span><br><span class="line">			temp--;                //两个数中较小的数temp减一，直到找到最大公约数或temp为0为止</span><br><span class="line">	&#125;</span><br><span class="line">	return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>4.3更相减损法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max4(int c,int d)             //4.更相减损法</span><br><span class="line">&#123;</span><br><span class="line">	int i=0;</span><br><span class="line">	int temp,x;</span><br><span class="line">	while(c%2==0&amp;&amp;d%2==0)    //检测c和d是否偶数，若是，则用2约简</span><br><span class="line">	&#123;</span><br><span class="line">		c=c/2;                           </span><br><span class="line">		d=d/2;</span><br><span class="line">		i++;                 //计算c和d被2约了几次</span><br><span class="line">	&#125;</span><br><span class="line">	if(c&lt;d)                  //始终令c&lt;d</span><br><span class="line">	&#123;</span><br><span class="line">		temp=c;</span><br><span class="line">		c=d;</span><br><span class="line">		d=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	while(x)                //当x不等于0时</span><br><span class="line">	&#123;</span><br><span class="line">		x=c-d;              //以较大的数减较小的数                        </span><br><span class="line">		c=(d&gt;x)?d:x;        //把所得的差与较小的数比较</span><br><span class="line">		d=(d&lt;x)?d:x;</span><br><span class="line">		if(x==d)           //所得的减数和差相等</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">	if(i)                                //当i不等于0</span><br><span class="line">		return (int)pow(2,i)*d;            //pow(2,i)表示2的i次方，即2的i次方与d的乘积就是最大公约数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>4.4 Stein算法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max5(unsigned int x,unsigned int y)       //5.Stein算法</span><br><span class="line">&#123;</span><br><span class="line">	int factor=0;</span><br><span class="line">	int temp;</span><br><span class="line">	if(x&lt;y)                              //赋值令x&gt;y</span><br><span class="line">	&#123;</span><br><span class="line">		temp=x;</span><br><span class="line">		x=y;</span><br><span class="line">		y=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	if(0==y)</span><br><span class="line">	&#123;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	while(x!=y)                       //当x和y不相等</span><br><span class="line">	&#123;</span><br><span class="line">		if(x &amp; 0x1 )                   //0x是十六进制的表示方式，这里表示十六进制的1,即x相与1，也就是判断x是奇数</span><br><span class="line">		&#123;</span><br><span class="line">			if(y &amp; 0x1 )              //如果x,y都是奇数</span><br><span class="line">			&#123;</span><br><span class="line">				y=(x-y)&gt;&gt;1;         // (x-y)即两个奇数的差是偶数，&gt;&gt;表示右移/2</span><br><span class="line">				x-=y;</span><br><span class="line">			&#125;</span><br><span class="line">			else                 //如果x是奇数，y是偶数</span><br><span class="line">			&#123;</span><br><span class="line">				y&gt;&gt;=1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else                         </span><br><span class="line">		&#123;</span><br><span class="line">			if(y &amp; 0x1 )           //如果x是偶数，y是奇数</span><br><span class="line">			&#123;</span><br><span class="line">				x&gt;&gt;=1;</span><br><span class="line">				if(x&lt;y)           //始终令x&gt;y</span><br><span class="line">				&#123;</span><br><span class="line">					temp=x;</span><br><span class="line">					x=y;</span><br><span class="line">					y=temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			else               //如果x,y是两个偶数</span><br><span class="line">			&#123;</span><br><span class="line">				x&gt;&gt;=1;</span><br><span class="line">				y&gt;&gt;=1;</span><br><span class="line">				++factor;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return (x&lt;&lt;factor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">****4.5完整代码****</span><br></pre></td></tr></table></figure>

<p> 在这里插入代码片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;                           //计算2的i次方的函数pow(2,i)的头文件</span><br><span class="line">#include&lt;time.h&gt;                          //计算程序运行时间和随机产生数的头文件</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">int max1(int a,int b)                     //辗转相除法-------1.函数嵌套调用</span><br><span class="line">&#123;</span><br><span class="line">	int temp;</span><br><span class="line">	if(a&lt;b)                               //若存在a小于b的情况，则交换数值</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a;</span><br><span class="line">		a=b;</span><br><span class="line">		b=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	while(b!=0)                           //直到b为0，通过赋值得到最大公约数为a的值</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a%b;                        //temp为余数                      </span><br><span class="line">		a=b;                             //将b的值赋给a</span><br><span class="line">		b=temp;                          //将余数temp的值赋给b</span><br><span class="line">	&#125;</span><br><span class="line">	return a;</span><br><span class="line">&#125;</span><br><span class="line">int max2(int m,int n)                 //辗转相除法-------2.函数递归调用</span><br><span class="line">&#123;</span><br><span class="line">	if(m%n==0)                        //若m和n取余后余数为0，则返回最大公约数n</span><br><span class="line">		return n;</span><br><span class="line">	else</span><br><span class="line">		return max2(n,m%n);          //返回到max2这个函数中，并给m,n赋值</span><br><span class="line">&#125;</span><br><span class="line">int max3(int x,int y)               //3.穷举法</span><br><span class="line">&#123;</span><br><span class="line">	int temp;</span><br><span class="line">	if(x&lt;y)                        //把较小的值赋给temp</span><br><span class="line">		temp=x;</span><br><span class="line">	else</span><br><span class="line">		temp=y;</span><br><span class="line">	while(temp&gt;0)</span><br><span class="line">	&#123;</span><br><span class="line">		if(x%temp==0&amp;&amp;y%temp==0)   //若大数取余小数余数为0，则结束循环，小数就是两个数的最大公约数</span><br><span class="line">			break;</span><br><span class="line">		else</span><br><span class="line">			temp--;                //两个数中较小的数temp减一，直到找到最大公约数或temp为0为止</span><br><span class="line">	&#125;</span><br><span class="line">	return temp;</span><br><span class="line">&#125;</span><br><span class="line">int max4(int c,int d)                           //4.更相减损法</span><br><span class="line">&#123;</span><br><span class="line">	int i=0;</span><br><span class="line">	int temp,x;</span><br><span class="line">	while(c%2==0&amp;&amp;d%2==0)                      //检测c和d是否偶数，若是，则用2约简</span><br><span class="line">	&#123;</span><br><span class="line">		c=c/2;                           </span><br><span class="line">		d=d/2;</span><br><span class="line">		i++;                                  //计算c和d被2约了几次</span><br><span class="line">	&#125;</span><br><span class="line">	if(c&lt;d)                                   //始终令c&lt;d</span><br><span class="line">	&#123;</span><br><span class="line">		temp=c;</span><br><span class="line">		c=d;</span><br><span class="line">		d=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	while(x)                                 //当x不等于0时</span><br><span class="line">	&#123;</span><br><span class="line">		x=c-d;                               //以较大的数减较小的数                        </span><br><span class="line">		c=(d&gt;x)?d:x;                         //把所得的差与较小的数比较</span><br><span class="line">		d=(d&lt;x)?d:x;</span><br><span class="line">		if(x==d)                            //所得的减数和差相等</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">	if(i)                                  //当i不等于0</span><br><span class="line">		return (int)pow(2,i)*d;            //pow(2,i)表示2的i次方，即2的i次方与d的乘积就是最大公约数</span><br><span class="line">&#125;</span><br><span class="line">int max5(unsigned int x,unsigned int y)                    //5.Stein算法</span><br><span class="line">&#123;</span><br><span class="line">	int factor=0;</span><br><span class="line">	int temp;</span><br><span class="line">	if(x&lt;y)                              //赋值令x&gt;y</span><br><span class="line">	&#123;</span><br><span class="line">		temp=x;</span><br><span class="line">		x=y;</span><br><span class="line">		y=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	if(0==y)</span><br><span class="line">	&#123;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	while(x!=y)                        //当x和y不相等</span><br><span class="line">	&#123;</span><br><span class="line">		if(x &amp; 0x1 )                   //0x是十六进制的表示方式，这里表示十六进制的1,即x相与1，也就是判断x是奇数</span><br><span class="line">		&#123;</span><br><span class="line">			if(y &amp; 0x1 )               //如果x,y都是奇数</span><br><span class="line">			&#123;</span><br><span class="line">				y=(x-y)&gt;&gt;1;           // (x-y)即两个奇数的差是偶数，&gt;&gt;表示右移/2</span><br><span class="line">				x-=y;</span><br><span class="line">			&#125;</span><br><span class="line">			else                      //如果x是奇数，y是偶数</span><br><span class="line">			&#123;</span><br><span class="line">				y&gt;&gt;=1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else                         </span><br><span class="line">		&#123;</span><br><span class="line">			if(y &amp; 0x1 )             //如果x是偶数，y是奇数</span><br><span class="line">			&#123;</span><br><span class="line">				x&gt;&gt;=1;</span><br><span class="line">				if(x&lt;y)            //始终令x&gt;y</span><br><span class="line">				&#123;</span><br><span class="line">					temp=x;</span><br><span class="line">					x=y;</span><br><span class="line">					y=temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			else                   //如果x,y是两个偶数</span><br><span class="line">			&#123;</span><br><span class="line">				x&gt;&gt;=1;</span><br><span class="line">				y&gt;&gt;=1;</span><br><span class="line">				++factor;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return (x&lt;&lt;factor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	int x,y,p,i,n,N,m[1000];</span><br><span class="line">	int a,b,c,d,e;</span><br><span class="line">	printf(&quot;*********************你有两种选择********************\n&quot;);</span><br><span class="line">	printf(&quot;* 1.输入两个你想计算最大公约数的正整数并计算.       *\n&quot;);</span><br><span class="line">	printf(&quot;* 2.利用随机数测试最大公约数并计算程序运行时间.     *\n&quot;);</span><br><span class="line">	printf(&quot;*****************************************************\n&quot;);</span><br><span class="line">	printf(&quot;请选择你想要进行的操作:\n&quot;);</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	while(n&lt;1||n&gt;2)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;没有这个选项！请重新输入：\n&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	&#125;</span><br><span class="line">	if(n==1)</span><br><span class="line">	&#123;</span><br><span class="line">	printf(&quot;请输入两个正整数:\n&quot;);     //用户自行输入两个数</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line">	while(x&lt;0||y&lt;0||x==0||y==0)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;请按要求输入正整数:\n&quot;);</span><br><span class="line">		scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;在这里你有5种方法计算最大公约数:\n&quot;);            //选择菜单</span><br><span class="line">	printf(&quot; * * * * * * * * * * * * * * * * * * * * *\n&quot;);</span><br><span class="line">	printf(&quot; *   1.辗转相除法----函数嵌套调用.       *\n&quot;);                </span><br><span class="line">	printf(&quot; *   2.辗转相除法----函数递归调用.       *\n&quot;);              </span><br><span class="line">	printf(&quot; *   3.穷举法.                           *\n&quot;); </span><br><span class="line">	printf(&quot; *   4.更相减损法.                       *\n&quot;);</span><br><span class="line">	printf(&quot; *   5.Stein算法.                        *\n&quot;);</span><br><span class="line">	printf(&quot; * * * * * * * * * * * * * * * * * * * * *\n&quot;); </span><br><span class="line">	while(1)</span><br><span class="line">	&#123;</span><br><span class="line">		int j=0;</span><br><span class="line">	    printf(&quot;请输入你的选择(1-5):\n&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;p);</span><br><span class="line">		while(p&lt;1||p&gt;5)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;输入错误！请重新输入:\n&quot;);</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;p);</span><br><span class="line">		&#125;</span><br><span class="line">		switch(p)</span><br><span class="line">		&#123;</span><br><span class="line">		case 1:</span><br><span class="line">				a=max1(x,y);</span><br><span class="line">				printf(&quot;你选择了辗转相除法中的函数嵌套调用.\n&quot;);</span><br><span class="line">				break;</span><br><span class="line">		case 2:</span><br><span class="line">	    		a=max2(x,y);</span><br><span class="line">		    	printf(&quot;你选择了辗转相除法中的函数递归调用.\n&quot;);</span><br><span class="line">			break;</span><br><span class="line">		case 3:</span><br><span class="line">				a=max3(x,y);</span><br><span class="line">				printf(&quot;你选择了穷举法.\n&quot;);</span><br><span class="line">				break;</span><br><span class="line">		case 4:</span><br><span class="line">				a=max4(x,y);</span><br><span class="line">				printf(&quot;你选择了更相减损法.\n&quot;);</span><br><span class="line">				break;</span><br><span class="line">		case 5:</span><br><span class="line">			</span><br><span class="line">	    		a=max5(x,y);</span><br><span class="line">		    	printf(&quot;你选择了Stein算法.\n&quot;);</span><br><span class="line">				break;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;用这种方法计算的最大公约数为%d:\n&quot;,a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if(n==2)</span><br><span class="line">&#123;</span><br><span class="line">		clock_t start,finish;                  //计算随机函数</span><br><span class="line">		double duration;</span><br><span class="line">		srand((unsigned)time(NULL));</span><br><span class="line">		printf(&quot;你想测试多少组数据？\n&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;N);</span><br><span class="line">		for(i=0;i&lt;N;i++)                     //随机取20个数（1-100）</span><br><span class="line">		&#123;</span><br><span class="line">			m[i]=rand()%100+1;</span><br><span class="line">			printf(&quot;%d\t&quot;,m[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">		printf(&quot;在这里你有5种方法计算最大公约数:\n&quot;);            //选择菜单</span><br><span class="line">		printf(&quot; * * * * * * * * * * * * * * * * * * * * *\n&quot;);</span><br><span class="line">		printf(&quot; *   1.辗转相除法----函数嵌套调用.       *\n&quot;);                </span><br><span class="line">		printf(&quot; *   2.辗转相除法----函数递归调用.       *\n&quot;);              </span><br><span class="line">		printf(&quot; *   3.穷举法.                           *\n&quot;); </span><br><span class="line">		printf(&quot; *   4.更相减损法.                       *\n&quot;);</span><br><span class="line">		printf(&quot; *   5.Stein算法.                        *\n&quot;);</span><br><span class="line">		printf(&quot; * * * * * * * * * * * * * * * * * * * * *\n&quot;); </span><br><span class="line">		while(1)</span><br><span class="line">		&#123;</span><br><span class="line">			int j=0;</span><br><span class="line">	    	printf(&quot;请输入你的选择(1-5):\n&quot;);</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;p);</span><br><span class="line">			while(p&lt;1||p&gt;5)</span><br><span class="line">			&#123;</span><br><span class="line">				printf(&quot;输入错误！请重新输入:\n&quot;);</span><br><span class="line">				scanf(&quot;%d&quot;,&amp;p);</span><br><span class="line">			&#125;</span><br><span class="line">			switch(p)</span><br><span class="line">			&#123;</span><br><span class="line">			case 1:</span><br><span class="line">				start=clock();                  //程序运行，开始计时</span><br><span class="line">				while(j&lt;20)</span><br><span class="line">				&#123;</span><br><span class="line">					x=m[j++];</span><br><span class="line">					y=m[j++];</span><br><span class="line">					a=max1(x,y);</span><br><span class="line">					printf(&quot;你选择了辗转相除法中的函数嵌套调用.\n&quot;);</span><br><span class="line">					printf(&quot;用这种方法计算的最大公约数为%d:\n&quot;,a);</span><br><span class="line">		</span><br><span class="line">				&#125;</span><br><span class="line">				finish=clock();                                  //程序运行结束，结束计时</span><br><span class="line">				break;</span><br><span class="line">			case 2:</span><br><span class="line">				start=clock();</span><br><span class="line">				while(j&lt;20)</span><br><span class="line">				&#123;</span><br><span class="line">					x=m[j++];</span><br><span class="line">					y=m[j++];</span><br><span class="line">	    			b=max2(x,y);</span><br><span class="line">		    		printf(&quot;你选择了辗转相除法中的函数递归调用.\n&quot;);</span><br><span class="line">		    		printf(&quot;用这种方法计算的最大公约数为%d:\n&quot;,b);</span><br><span class="line">				&#125;</span><br><span class="line">				finish=clock();</span><br><span class="line">				break;</span><br><span class="line">			case 3:</span><br><span class="line">				start=clock();</span><br><span class="line">				while(j&lt;20)</span><br><span class="line">				&#123;</span><br><span class="line">					x=m[j++];</span><br><span class="line">					y=m[j++];</span><br><span class="line">					c=max3(x,y);</span><br><span class="line">					printf(&quot;你选择了穷举法.\n&quot;);</span><br><span class="line">					printf(&quot;用这种方法计算的最大公约数为%d:\n&quot;,c);</span><br><span class="line">				&#125;</span><br><span class="line">				finish=clock();</span><br><span class="line">				break;</span><br><span class="line">			case 4:</span><br><span class="line">				start=clock();</span><br><span class="line">				while(j&lt;20)</span><br><span class="line">				&#123;	</span><br><span class="line">					x=m[j++];</span><br><span class="line">					y=m[j++];</span><br><span class="line">					d=max4(x,y);</span><br><span class="line">					printf(&quot;你选择了更相减损法.\n&quot;);</span><br><span class="line">					printf(&quot;用这种方法计算的最大公约数为%d:\n&quot;,d);</span><br><span class="line">				&#125;</span><br><span class="line">				finish=clock();</span><br><span class="line">				break;</span><br><span class="line">			case 5:</span><br><span class="line">			start=clock();</span><br><span class="line">			while(j&lt;20)</span><br><span class="line">			&#123;</span><br><span class="line">				x=m[j++];</span><br><span class="line">				y=m[j++];</span><br><span class="line">	    		e=max5(x,y);</span><br><span class="line">		    	printf(&quot;你选择了Stein算法.\n&quot;);</span><br><span class="line">		    	printf(&quot;用这种方法计算的最大公约数为%d:\n&quot;,e);</span><br><span class="line">			&#125;</span><br><span class="line">			finish=clock();</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">			duration=(double)(finish-start)/1000;                  ////计算时间差，由于计算机计算的是毫秒，转换成秒要除以1000</span><br><span class="line">			printf(&quot;这个方法的运行时间是%f秒\n&quot;,duration);</span><br><span class="line">	&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>5.经验归纳</strong><br> <strong>5.1遇到的问题</strong><br> 1.对随机函数不熟悉；<br> 2.测试环节，对计算程序运行时间不熟悉；<br> 3.在更相减损法的最后，用到了pow()函数，因没加头文件#include&lt;math.h&gt;而出错；<br> 4.因知识储备不足，对最后一种方法（Stein算法）不理解。<br> PS：以上问题均已解决。</p>
<p> <strong>5.2心得体会</strong><br> 我觉得这四种方法里Stein算法我有点看不懂（可能是因为有&gt;&gt;运算符），还有随机数的生成和计算程序运行时间的函数都只是有一些印象，并不熟悉。（但是我可以查资料和问同学啊hhh<del>）  
 主函数我改了很多次，就是想让界面更加美化一些，改完就发现程序出错了…其实就是赋值这么一个小细节，但就是发现不了（Emmmm），感觉自己还需要学很多东西，动手能力也要加强</del><br> 总之就是<del>~</del>add oil!!!</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>三天打鱼两天晒网</title>
    <url>/2019/03/01/%E2%80%9C%E4%B8%89%E5%A4%A9%E6%89%93%E9%B1%BC%E4%B8%A4%E5%A4%A9%E6%99%92%E7%BD%91%E2%80%9D/</url>
    <content><![CDATA[<p>  ♦ 题目：<br> 三天打鱼两天晒网</p>
<p> ♦问题：<br> 某人从2010年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的某一天中是“打鱼”还是“晒网”。</p>
<p> ♦ 要求：<br> 基本要求：1.程序风格良好(使用自定义注释模板)，提供友好的输入输出。<br> 提高要求：1.输入数据的正确性验证。 2.使用文件进行数据测试。如将日期 20100101 20111214 等数据保存在in.txt文件中，程序读入in.dat文件进行判定，并将结果输出至out.txt文件。</p>
<p> ♦程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">void hanshu(int year,int month,int day)</span><br><span class="line">&#123;</span><br><span class="line">	int sum=0;</span><br><span class="line">	int a=0;</span><br><span class="line">	int b=0;</span><br><span class="line">	int c=0;</span><br><span class="line">	int x[12]=&#123;31,28,31,30,31,30,31,31,30,31,30,31&#125;;       //平年各月份的天数</span><br><span class="line">	int y[12]=&#123;31,29,31,30,31,30,31,31,30,31,30,31&#125;;       //闰年各月份的天数</span><br><span class="line">	for(int i=2010;i&lt;year;i++)                        //利用循环结构计算出在输入年份之前的那几年一共有几天</span><br><span class="line">	&#123;</span><br><span class="line">		if((i%4==0&amp;&amp;i%100!=0)||i%400==0)              //判断是否有闰年，有的话，一年为366天；否则一年为365天</span><br><span class="line">			a+=366;</span><br><span class="line">		else</span><br><span class="line">			a+=365;</span><br><span class="line">	&#125;   </span><br><span class="line">	for(int j=0;j&lt;month-1;j++)                       //利用循环计算在输出月份之前的几个月一共有几天</span><br><span class="line">	&#123;</span><br><span class="line">		if((year%4==0&amp;&amp;year%100!=0)||year%400==0)    //判断该年是否为闰年，如果是，则用闰年数组；否则，用平年数组</span><br><span class="line">			b+=y[j];</span><br><span class="line">		else</span><br><span class="line">			b+=x[j];</span><br><span class="line">	&#125;</span><br><span class="line">	c=day;                                           //用户输入的天数	</span><br><span class="line">	sum=a+b+c;                                       //将年，月，日所计算的天数相加，即为总天数</span><br><span class="line">	printf(&quot;距离2010年1月1日一共有%d天\n&quot;,sum);</span><br><span class="line">	if(sum%5==1||sum%5==2||sum%5==3)                 //判断总天数取余后余数是否为1,2,3，如果是，输出“你在打鱼”；否则，输出“你在晒网”</span><br><span class="line">		printf(&quot;你在打鱼~~~\n&quot;);</span><br><span class="line">	else</span><br><span class="line">		printf(&quot;你在晒网~~~\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	int year,month,day,m,p,a,b,c;</span><br><span class="line">	printf(&quot;***************计算你到底在打鱼还是晒网***************\n&quot;);</span><br><span class="line">	printf(&quot;1.使用文件测试\n&quot;);</span><br><span class="line">	printf(&quot;2.从键盘输入计算\n&quot;);</span><br><span class="line">	printf(&quot;请输入你想选择的操作的序号：\n&quot;);</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">	if(m==1)                                                      //选择1，进入文件测试环节</span><br><span class="line">	&#123;</span><br><span class="line">		FILE *fp1;</span><br><span class="line">		FILE *fp2;</span><br><span class="line">		fp1=fopen(&quot;in.txt&quot;,&quot;r&quot;);</span><br><span class="line">		fp2=fopen(&quot;out.txt&quot;,&quot;w&quot;);</span><br><span class="line">		if(fp1==NULL)                                             //判断文件in.txt是否为空</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;无法打开该文件，请按任意键退出！\n&quot;);</span><br><span class="line">			exit(1);</span><br><span class="line">		&#125;</span><br><span class="line">		else if(fp2==NULL)                                       //判断文件out.txt是否为空</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;无法打开该文件，请按任意键退出！\n&quot;);</span><br><span class="line">			exit(1);</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">			fscanf(fp1,&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);                       //文件不为空，则用格式化读写函数fscanf()和fprintf()来读取文档in.txt和out.txt中的信息</span><br><span class="line">		hanshu(a,b,c);</span><br><span class="line">		fprintf(fp2,&quot;%1d&quot;,&amp;p);</span><br><span class="line">		fclose(fp1);                                             //关闭文件</span><br><span class="line">		fclose(fp2);</span><br><span class="line">	&#125;</span><br><span class="line">	else if(m==2)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;请输入年，月，日：(在2010年1月1日之后)\n&quot;);</span><br><span class="line">	    scanf(&quot;%d%d%d&quot;,&amp;year,&amp;month,&amp;day);</span><br><span class="line">	    while(year&lt;2010||month&gt;12||day&gt;31)                                       //判断输入年份是否小于2010年，如果是，则重新输入</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;输入错误！请重新输入！\n&quot;);</span><br><span class="line">		    scanf(&quot;%d%d%d&quot;,&amp;year,&amp;month,&amp;day);</span><br><span class="line">		&#125;</span><br><span class="line">		hanshu(year,month,day);</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;你的输入有误！请重新输入：\n&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> ♦ 心得：<br> 第一次接触文件测试这样的问题，我刚开始还真无从下手<del>还好问了班里比较厉害的同学，然后自己复习了C语言课本上的文件那一章，感觉遇到的问题挺多的，但是还好在我的不懈努力（不断问别人）下，最终是把文件测试这关通过了！！！<br> 刚开始敲得那个代码只有一个主函数，后来检查了一下觉得太简单了，然后运用了子函数，感觉自己对C语言还掌握的不是很清楚，还需要多多动手敲代码啊！！！（希望老师能看到我这个代码小白的认真</del>）  
 我觉得这次作业让我学到了好多东西，也了解到了大企业的程序设计风格，我可以从现在开始学习他们的风格。<br> 个人感觉还是对C语言感情更深一些，毕竟是接触计算机学到的第一门语言hhhh<del>希望我能够在史晓楠老师（超级厉害）的教导下学到更多以前没接触过的东西！！！<br> 新的一年，新一学期，新的起点，FIGHTING</del></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
